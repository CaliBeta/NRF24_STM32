
NRF24_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002abc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002b7c  08002b7c  00012b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bbc  08002bbc  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bbc  08002bbc  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bbc  08002bbc  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bbc  08002bbc  00012bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bc0  08002bc0  00012bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000002c  08002bf0  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08002bf0  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005b68  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001395  00000000  00000000  00025bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  00026f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000560  00000000  00000000  00027560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e6ca  00000000  00000000  00027ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007235  00000000  00000000  0003618a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055de2  00000000  00000000  0003d3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000931a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001440  00000000  00000000  000931f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000002c 	.word	0x2000002c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002b64 	.word	0x08002b64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000030 	.word	0x20000030
 8000104:	08002b64 	.word	0x08002b64

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000224:	f000 fe34 	bl	8000e90 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000228:	f000 f852 	bl	80002d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800022c:	f000 f8ce 	bl	80003cc <MX_GPIO_Init>
	MX_SPI1_Init();
 8000230:	f000 f88e 	bl	8000350 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	// MODULE SETTINGS ----------------------------------------------
	nrfTx.CE_port = CE_GPIO_Port;
 8000234:	4b20      	ldr	r3, [pc, #128]	; (80002b8 <main+0x98>)
 8000236:	2290      	movs	r2, #144	; 0x90
 8000238:	05d2      	lsls	r2, r2, #23
 800023a:	609a      	str	r2, [r3, #8]
	nrfTx.CE_pin = CE_Pin;
 800023c:	4b1e      	ldr	r3, [pc, #120]	; (80002b8 <main+0x98>)
 800023e:	2280      	movs	r2, #128	; 0x80
 8000240:	0152      	lsls	r2, r2, #5
 8000242:	819a      	strh	r2, [r3, #12]
	nrfTx.CSN_port = CSN_GPIO_Port;
 8000244:	4b1c      	ldr	r3, [pc, #112]	; (80002b8 <main+0x98>)
 8000246:	2290      	movs	r2, #144	; 0x90
 8000248:	05d2      	lsls	r2, r2, #23
 800024a:	601a      	str	r2, [r3, #0]
	nrfTx.CSN_pin = CSN_Pin;
 800024c:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <main+0x98>)
 800024e:	4a1b      	ldr	r2, [pc, #108]	; (80002bc <main+0x9c>)
 8000250:	809a      	strh	r2, [r3, #4]
	nrfTx.IRQ_port = IRQ_GPIO_Port;
 8000252:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <main+0x98>)
 8000254:	2290      	movs	r2, #144	; 0x90
 8000256:	05d2      	lsls	r2, r2, #23
 8000258:	611a      	str	r2, [r3, #16]
	nrfTx.IRQ_pin = IRQ_Pin;
 800025a:	4b17      	ldr	r3, [pc, #92]	; (80002b8 <main+0x98>)
 800025c:	2280      	movs	r2, #128	; 0x80
 800025e:	0052      	lsls	r2, r2, #1
 8000260:	829a      	strh	r2, [r3, #20]
	nrfTx.hSPIx = &hspi1;
 8000262:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <main+0x98>)
 8000264:	4a16      	ldr	r2, [pc, #88]	; (80002c0 <main+0xa0>)
 8000266:	619a      	str	r2, [r3, #24]

	nrf24_init(&nrfTx);
 8000268:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <main+0x98>)
 800026a:	0018      	movs	r0, r3
 800026c:	f000 f947 	bl	80004fe <nrf24_init>
	nrf24_setTxAddr(&nrfTx, txAddr);
 8000270:	4a14      	ldr	r2, [pc, #80]	; (80002c4 <main+0xa4>)
 8000272:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <main+0x98>)
 8000274:	0011      	movs	r1, r2
 8000276:	0018      	movs	r0, r3
 8000278:	f000 fada 	bl	8000830 <nrf24_setTxAddr>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		nrf24_setMode(&nrfTx, txMode);
 800027c:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <main+0x98>)
 800027e:	2102      	movs	r1, #2
 8000280:	0018      	movs	r0, r3
 8000282:	f000 fa6d 	bl	8000760 <nrf24_setMode>
		if (nrf24_Transmit(&nrfTx, txData, sizeof(txData)) == 1) {
 8000286:	4910      	ldr	r1, [pc, #64]	; (80002c8 <main+0xa8>)
 8000288:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <main+0x98>)
 800028a:	2216      	movs	r2, #22
 800028c:	0018      	movs	r0, r3
 800028e:	f000 fae6 	bl	800085e <nrf24_Transmit>
 8000292:	0003      	movs	r3, r0
 8000294:	2b01      	cmp	r3, #1
 8000296:	d109      	bne.n	80002ac <main+0x8c>
			nrf24_setMode(&nrfTx, standby);
 8000298:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <main+0x98>)
 800029a:	2101      	movs	r1, #1
 800029c:	0018      	movs	r0, r3
 800029e:	f000 fa5f 	bl	8000760 <nrf24_setMode>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80002a2:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <main+0xac>)
 80002a4:	2102      	movs	r1, #2
 80002a6:	0018      	movs	r0, r3
 80002a8:	f001 f8bb 	bl	8001422 <HAL_GPIO_TogglePin>
		}
		HAL_Delay(1000);
 80002ac:	23fa      	movs	r3, #250	; 0xfa
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 fe51 	bl	8000f58 <HAL_Delay>
		nrf24_setMode(&nrfTx, txMode);
 80002b6:	e7e1      	b.n	800027c <main+0x5c>
 80002b8:	200000ac 	.word	0x200000ac
 80002bc:	ffff8000 	.word	0xffff8000
 80002c0:	20000048 	.word	0x20000048
 80002c4:	20000000 	.word	0x20000000
 80002c8:	20000008 	.word	0x20000008
 80002cc:	48000400 	.word	0x48000400

080002d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002d0:	b590      	push	{r4, r7, lr}
 80002d2:	b091      	sub	sp, #68	; 0x44
 80002d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002d6:	2410      	movs	r4, #16
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	0018      	movs	r0, r3
 80002dc:	2330      	movs	r3, #48	; 0x30
 80002de:	001a      	movs	r2, r3
 80002e0:	2100      	movs	r1, #0
 80002e2:	f002 fc37 	bl	8002b54 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002e6:	003b      	movs	r3, r7
 80002e8:	0018      	movs	r0, r3
 80002ea:	2310      	movs	r3, #16
 80002ec:	001a      	movs	r2, r3
 80002ee:	2100      	movs	r1, #0
 80002f0:	f002 fc30 	bl	8002b54 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f4:	0021      	movs	r1, r4
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2202      	movs	r2, #2
 80002fa:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2201      	movs	r2, #1
 8000300:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2210      	movs	r2, #16
 8000306:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2200      	movs	r2, #0
 800030c:	621a      	str	r2, [r3, #32]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800030e:	187b      	adds	r3, r7, r1
 8000310:	0018      	movs	r0, r3
 8000312:	f001 f8a1 	bl	8001458 <HAL_RCC_OscConfig>
 8000316:	1e03      	subs	r3, r0, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x4e>
		Error_Handler();
 800031a:	f000 f8eb 	bl	80004f4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800031e:	003b      	movs	r3, r7
 8000320:	2207      	movs	r2, #7
 8000322:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000324:	003b      	movs	r3, r7
 8000326:	2200      	movs	r2, #0
 8000328:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032a:	003b      	movs	r3, r7
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000330:	003b      	movs	r3, r7
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000336:	003b      	movs	r3, r7
 8000338:	2100      	movs	r1, #0
 800033a:	0018      	movs	r0, r3
 800033c:	f001 fba6 	bl	8001a8c <HAL_RCC_ClockConfig>
 8000340:	1e03      	subs	r3, r0, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x78>
		Error_Handler();
 8000344:	f000 f8d6 	bl	80004f4 <Error_Handler>
	}
}
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b011      	add	sp, #68	; 0x44
 800034e:	bd90      	pop	{r4, r7, pc}

08000350 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000354:	4b1b      	ldr	r3, [pc, #108]	; (80003c4 <MX_SPI1_Init+0x74>)
 8000356:	4a1c      	ldr	r2, [pc, #112]	; (80003c8 <MX_SPI1_Init+0x78>)
 8000358:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800035a:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <MX_SPI1_Init+0x74>)
 800035c:	2282      	movs	r2, #130	; 0x82
 800035e:	0052      	lsls	r2, r2, #1
 8000360:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000362:	4b18      	ldr	r3, [pc, #96]	; (80003c4 <MX_SPI1_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000368:	4b16      	ldr	r3, [pc, #88]	; (80003c4 <MX_SPI1_Init+0x74>)
 800036a:	22e0      	movs	r2, #224	; 0xe0
 800036c:	00d2      	lsls	r2, r2, #3
 800036e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000370:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <MX_SPI1_Init+0x74>)
 8000372:	2200      	movs	r2, #0
 8000374:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000376:	4b13      	ldr	r3, [pc, #76]	; (80003c4 <MX_SPI1_Init+0x74>)
 8000378:	2200      	movs	r2, #0
 800037a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800037c:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <MX_SPI1_Init+0x74>)
 800037e:	2280      	movs	r2, #128	; 0x80
 8000380:	0092      	lsls	r2, r2, #2
 8000382:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000384:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <MX_SPI1_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <MX_SPI1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000390:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <MX_SPI1_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000396:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <MX_SPI1_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800039c:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <MX_SPI1_Init+0x74>)
 800039e:	2207      	movs	r2, #7
 80003a0:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <MX_SPI1_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <MX_SPI1_Init+0x74>)
 80003aa:	2208      	movs	r2, #8
 80003ac:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80003ae:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <MX_SPI1_Init+0x74>)
 80003b0:	0018      	movs	r0, r3
 80003b2:	f001 fc9d 	bl	8001cf0 <HAL_SPI_Init>
 80003b6:	1e03      	subs	r3, r0, #0
 80003b8:	d001      	beq.n	80003be <MX_SPI1_Init+0x6e>
		Error_Handler();
 80003ba:	f000 f89b 	bl	80004f4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000048 	.word	0x20000048
 80003c8:	40013000 	.word	0x40013000

080003cc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80003cc:	b590      	push	{r4, r7, lr}
 80003ce:	b089      	sub	sp, #36	; 0x24
 80003d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80003d2:	240c      	movs	r4, #12
 80003d4:	193b      	adds	r3, r7, r4
 80003d6:	0018      	movs	r0, r3
 80003d8:	2314      	movs	r3, #20
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f002 fbb9 	bl	8002b54 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80003e2:	4b42      	ldr	r3, [pc, #264]	; (80004ec <MX_GPIO_Init+0x120>)
 80003e4:	695a      	ldr	r2, [r3, #20]
 80003e6:	4b41      	ldr	r3, [pc, #260]	; (80004ec <MX_GPIO_Init+0x120>)
 80003e8:	2180      	movs	r1, #128	; 0x80
 80003ea:	02c9      	lsls	r1, r1, #11
 80003ec:	430a      	orrs	r2, r1
 80003ee:	615a      	str	r2, [r3, #20]
 80003f0:	4b3e      	ldr	r3, [pc, #248]	; (80004ec <MX_GPIO_Init+0x120>)
 80003f2:	695a      	ldr	r2, [r3, #20]
 80003f4:	2380      	movs	r3, #128	; 0x80
 80003f6:	02db      	lsls	r3, r3, #11
 80003f8:	4013      	ands	r3, r2
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003fe:	4b3b      	ldr	r3, [pc, #236]	; (80004ec <MX_GPIO_Init+0x120>)
 8000400:	695a      	ldr	r2, [r3, #20]
 8000402:	4b3a      	ldr	r3, [pc, #232]	; (80004ec <MX_GPIO_Init+0x120>)
 8000404:	2180      	movs	r1, #128	; 0x80
 8000406:	0289      	lsls	r1, r1, #10
 8000408:	430a      	orrs	r2, r1
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	4b37      	ldr	r3, [pc, #220]	; (80004ec <MX_GPIO_Init+0x120>)
 800040e:	695a      	ldr	r2, [r3, #20]
 8000410:	2380      	movs	r3, #128	; 0x80
 8000412:	029b      	lsls	r3, r3, #10
 8000414:	4013      	ands	r3, r2
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800041a:	4b35      	ldr	r3, [pc, #212]	; (80004f0 <MX_GPIO_Init+0x124>)
 800041c:	2200      	movs	r2, #0
 800041e:	2102      	movs	r1, #2
 8000420:	0018      	movs	r0, r3
 8000422:	f000 ffe1 	bl	80013e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000426:	2380      	movs	r3, #128	; 0x80
 8000428:	0159      	lsls	r1, r3, #5
 800042a:	2390      	movs	r3, #144	; 0x90
 800042c:	05db      	lsls	r3, r3, #23
 800042e:	2200      	movs	r2, #0
 8000430:	0018      	movs	r0, r3
 8000432:	f000 ffd9 	bl	80013e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 8000436:	2380      	movs	r3, #128	; 0x80
 8000438:	0219      	lsls	r1, r3, #8
 800043a:	2390      	movs	r3, #144	; 0x90
 800043c:	05db      	lsls	r3, r3, #23
 800043e:	2201      	movs	r2, #1
 8000440:	0018      	movs	r0, r3
 8000442:	f000 ffd1 	bl	80013e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000446:	193b      	adds	r3, r7, r4
 8000448:	2202      	movs	r2, #2
 800044a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	193b      	adds	r3, r7, r4
 800044e:	2201      	movs	r2, #1
 8000450:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	193b      	adds	r3, r7, r4
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000458:	193b      	adds	r3, r7, r4
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800045e:	193b      	adds	r3, r7, r4
 8000460:	4a23      	ldr	r2, [pc, #140]	; (80004f0 <MX_GPIO_Init+0x124>)
 8000462:	0019      	movs	r1, r3
 8000464:	0010      	movs	r0, r2
 8000466:	f000 fe4f 	bl	8001108 <HAL_GPIO_Init>

	/*Configure GPIO pin : IRQ_Pin */
	GPIO_InitStruct.Pin = IRQ_Pin;
 800046a:	193b      	adds	r3, r7, r4
 800046c:	2280      	movs	r2, #128	; 0x80
 800046e:	0052      	lsls	r2, r2, #1
 8000470:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000472:	193b      	adds	r3, r7, r4
 8000474:	2288      	movs	r2, #136	; 0x88
 8000476:	0352      	lsls	r2, r2, #13
 8000478:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800047a:	193b      	adds	r3, r7, r4
 800047c:	2201      	movs	r2, #1
 800047e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000480:	193a      	adds	r2, r7, r4
 8000482:	2390      	movs	r3, #144	; 0x90
 8000484:	05db      	lsls	r3, r3, #23
 8000486:	0011      	movs	r1, r2
 8000488:	0018      	movs	r0, r3
 800048a:	f000 fe3d 	bl	8001108 <HAL_GPIO_Init>

	/*Configure GPIO pin : CE_Pin */
	GPIO_InitStruct.Pin = CE_Pin;
 800048e:	0021      	movs	r1, r4
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2280      	movs	r2, #128	; 0x80
 8000494:	0152      	lsls	r2, r2, #5
 8000496:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000498:	000c      	movs	r4, r1
 800049a:	193b      	adds	r3, r7, r4
 800049c:	2201      	movs	r2, #1
 800049e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	2202      	movs	r2, #2
 80004a4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	2200      	movs	r2, #0
 80004aa:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 80004ac:	193a      	adds	r2, r7, r4
 80004ae:	2390      	movs	r3, #144	; 0x90
 80004b0:	05db      	lsls	r3, r3, #23
 80004b2:	0011      	movs	r1, r2
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 fe27 	bl	8001108 <HAL_GPIO_Init>

	/*Configure GPIO pin : CSN_Pin */
	GPIO_InitStruct.Pin = CSN_Pin;
 80004ba:	0021      	movs	r1, r4
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	2280      	movs	r2, #128	; 0x80
 80004c0:	0212      	lsls	r2, r2, #8
 80004c2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2201      	movs	r2, #1
 80004c8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2201      	movs	r2, #1
 80004ce:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2200      	movs	r2, #0
 80004d4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 80004d6:	187a      	adds	r2, r7, r1
 80004d8:	2390      	movs	r3, #144	; 0x90
 80004da:	05db      	lsls	r3, r3, #23
 80004dc:	0011      	movs	r1, r2
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 fe12 	bl	8001108 <HAL_GPIO_Init>

}
 80004e4:	46c0      	nop			; (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b009      	add	sp, #36	; 0x24
 80004ea:	bd90      	pop	{r4, r7, pc}
 80004ec:	40021000 	.word	0x40021000
 80004f0:	48000400 	.word	0x48000400

080004f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80004fc:	e7fe      	b.n	80004fc <Error_Handler+0x8>

080004fe <nrf24_init>:
		uint16_t len);
static void nrf_sendCmd(nrf24 *node, uint8_t cmd);
static void nrf24_reset(nrf24 *node, uint8_t reg);

/* Exported functions --------------------------------------------------------*/
void nrf24_init(nrf24 *node) {
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	0018      	movs	r0, r3
 800050a:	f000 fa2f 	bl	800096c <nrf24_CE_disable>

	nrf24_writeReg(node, CONFIG, 0);  			//No IRQ, no CRC
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2200      	movs	r2, #0
 8000512:	2100      	movs	r1, #0
 8000514:	0018      	movs	r0, r3
 8000516:	f000 fa59 	bl	80009cc <nrf24_writeReg>
	node->crc = no_CRC;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2200      	movs	r2, #0
 800051e:	77da      	strb	r2, [r3, #31]
	nrf24_writeReg(node, EN_AA, 0x00); 			//No auto ACK
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2200      	movs	r2, #0
 8000524:	2101      	movs	r1, #1
 8000526:	0018      	movs	r0, r3
 8000528:	f000 fa50 	bl	80009cc <nrf24_writeReg>
	nrf24_writeReg(node, EN_RXADDR, 0x00);	//Not enabling any data pipe
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2200      	movs	r2, #0
 8000530:	2102      	movs	r1, #2
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fa4a 	bl	80009cc <nrf24_writeReg>
	nrf24_writeReg(node, SETUP_AW, 0x03);  	//5 Bytes for the TX/RX address
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2203      	movs	r2, #3
 800053c:	2103      	movs	r1, #3
 800053e:	0018      	movs	r0, r3
 8000540:	f000 fa44 	bl	80009cc <nrf24_writeReg>
	nrf24_writeReg(node, SETUP_RETR, 0);   	//No retransmission
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	2104      	movs	r1, #4
 800054a:	0018      	movs	r0, r3
 800054c:	f000 fa3e 	bl	80009cc <nrf24_writeReg>

	nrf24_setDataRate(node, _250kbs);		//set minimum dataRate
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2100      	movs	r1, #0
 8000554:	0018      	movs	r0, r3
 8000556:	f000 f817 	bl	8000588 <nrf24_setDataRate>
	nrf24_setPALevel(node, high);				//set maximum PALevel 0dBm
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2103      	movs	r1, #3
 800055e:	0018      	movs	r0, r3
 8000560:	f000 f874 	bl	800064c <nrf24_setPALevel>
	nrf24_setChannel(node, DEFAULT_CHANNEL);	//default channel 100
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2164      	movs	r1, #100	; 0x64
 8000568:	0018      	movs	r0, r3
 800056a:	f000 f8df 	bl	800072c <nrf24_setChannel>
	nrf24_setMode(node, standby);		//set STANDBY mode
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2101      	movs	r1, #1
 8000572:	0018      	movs	r0, r3
 8000574:	f000 f8f4 	bl	8000760 <nrf24_setMode>

	nrf24_CE_enable(node);	// Enable the chip after configuring the device
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	0018      	movs	r0, r3
 800057c:	f000 f9e6 	bl	800094c <nrf24_CE_enable>
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b002      	add	sp, #8
 8000586:	bd80      	pop	{r7, pc}

08000588 <nrf24_setDataRate>:
// -----------------------------------------------------------------------------

//set module bitrate
void nrf24_setDataRate(nrf24 *node, DataRate _bitRate) {
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	000a      	movs	r2, r1
 8000592:	1cfb      	adds	r3, r7, #3
 8000594:	701a      	strb	r2, [r3, #0]
	nrf24_CE_disable(node);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	0018      	movs	r0, r3
 800059a:	f000 f9e7 	bl	800096c <nrf24_CE_disable>
	uint8_t config = nrf24_readReg(node, RF_SETUP);
 800059e:	230f      	movs	r3, #15
 80005a0:	18fc      	adds	r4, r7, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2106      	movs	r1, #6
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fa8d 	bl	8000ac6 <nrf24_readReg>
 80005ac:	0003      	movs	r3, r0
 80005ae:	7023      	strb	r3, [r4, #0]

	switch (_bitRate) {
 80005b0:	1cfb      	adds	r3, r7, #3
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	d027      	beq.n	8000608 <nrf24_setDataRate+0x80>
 80005b8:	dc37      	bgt.n	800062a <nrf24_setDataRate+0xa2>
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d002      	beq.n	80005c4 <nrf24_setDataRate+0x3c>
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d011      	beq.n	80005e6 <nrf24_setDataRate+0x5e>
			config |= (1 << 3);
			node->bitRate = _2mbs;
			break;

		default:
			break;
 80005c2:	e032      	b.n	800062a <nrf24_setDataRate+0xa2>
			config |= (1 << 5);		//write 1 in the RF_DR_LOW and 0 in RF_DR_HIGH bits
 80005c4:	200f      	movs	r0, #15
 80005c6:	183b      	adds	r3, r7, r0
 80005c8:	183a      	adds	r2, r7, r0
 80005ca:	7812      	ldrb	r2, [r2, #0]
 80005cc:	2120      	movs	r1, #32
 80005ce:	430a      	orrs	r2, r1
 80005d0:	701a      	strb	r2, [r3, #0]
			config &= ~(1 << 3);
 80005d2:	183b      	adds	r3, r7, r0
 80005d4:	183a      	adds	r2, r7, r0
 80005d6:	7812      	ldrb	r2, [r2, #0]
 80005d8:	2108      	movs	r1, #8
 80005da:	438a      	bics	r2, r1
 80005dc:	701a      	strb	r2, [r3, #0]
			node->bitRate = _250kbs;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	775a      	strb	r2, [r3, #29]
			break;
 80005e4:	e022      	b.n	800062c <nrf24_setDataRate+0xa4>
			config &= ~(1 << 5);	//write 0 in the RF_DR_LOW and 0 in RF_DR_HIGH bits
 80005e6:	200f      	movs	r0, #15
 80005e8:	183b      	adds	r3, r7, r0
 80005ea:	183a      	adds	r2, r7, r0
 80005ec:	7812      	ldrb	r2, [r2, #0]
 80005ee:	2120      	movs	r1, #32
 80005f0:	438a      	bics	r2, r1
 80005f2:	701a      	strb	r2, [r3, #0]
			config &= ~(1 << 3);
 80005f4:	183b      	adds	r3, r7, r0
 80005f6:	183a      	adds	r2, r7, r0
 80005f8:	7812      	ldrb	r2, [r2, #0]
 80005fa:	2108      	movs	r1, #8
 80005fc:	438a      	bics	r2, r1
 80005fe:	701a      	strb	r2, [r3, #0]
			node->bitRate = _1mbs;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2201      	movs	r2, #1
 8000604:	775a      	strb	r2, [r3, #29]
			break;
 8000606:	e011      	b.n	800062c <nrf24_setDataRate+0xa4>
			config &= ~(1 << 5);	//write 0 in the RF_DR_LOW and 1 in RF_DR_HIGH bits
 8000608:	200f      	movs	r0, #15
 800060a:	183b      	adds	r3, r7, r0
 800060c:	183a      	adds	r2, r7, r0
 800060e:	7812      	ldrb	r2, [r2, #0]
 8000610:	2120      	movs	r1, #32
 8000612:	438a      	bics	r2, r1
 8000614:	701a      	strb	r2, [r3, #0]
			config |= (1 << 3);
 8000616:	183b      	adds	r3, r7, r0
 8000618:	183a      	adds	r2, r7, r0
 800061a:	7812      	ldrb	r2, [r2, #0]
 800061c:	2108      	movs	r1, #8
 800061e:	430a      	orrs	r2, r1
 8000620:	701a      	strb	r2, [r3, #0]
			node->bitRate = _2mbs;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2202      	movs	r2, #2
 8000626:	775a      	strb	r2, [r3, #29]
			break;
 8000628:	e000      	b.n	800062c <nrf24_setDataRate+0xa4>
			break;
 800062a:	46c0      	nop			; (mov r8, r8)
	}
	nrf24_writeReg(node, RF_SETUP, config);
 800062c:	230f      	movs	r3, #15
 800062e:	18fb      	adds	r3, r7, r3
 8000630:	781a      	ldrb	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2106      	movs	r1, #6
 8000636:	0018      	movs	r0, r3
 8000638:	f000 f9c8 	bl	80009cc <nrf24_writeReg>
	nrf24_CE_enable(node);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	0018      	movs	r0, r3
 8000640:	f000 f984 	bl	800094c <nrf24_CE_enable>
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b005      	add	sp, #20
 800064a:	bd90      	pop	{r4, r7, pc}

0800064c <nrf24_setPALevel>:
// -----------------------------------------------------------------------------

//set PAlevel module in TX mode
void nrf24_setPALevel(nrf24 *node, PaLevel pwr) {
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	000a      	movs	r2, r1
 8000656:	1cfb      	adds	r3, r7, #3
 8000658:	701a      	strb	r2, [r3, #0]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	0018      	movs	r0, r3
 800065e:	f000 f985 	bl	800096c <nrf24_CE_disable>
	uint8_t config = nrf24_readReg(node, RF_SETUP);
 8000662:	230f      	movs	r3, #15
 8000664:	18fc      	adds	r4, r7, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2106      	movs	r1, #6
 800066a:	0018      	movs	r0, r3
 800066c:	f000 fa2b 	bl	8000ac6 <nrf24_readReg>
 8000670:	0003      	movs	r3, r0
 8000672:	7023      	strb	r3, [r4, #0]

	switch (pwr) {
 8000674:	1cfb      	adds	r3, r7, #3
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b03      	cmp	r3, #3
 800067a:	d03b      	beq.n	80006f4 <nrf24_setPALevel+0xa8>
 800067c:	dc45      	bgt.n	800070a <nrf24_setPALevel+0xbe>
 800067e:	2b02      	cmp	r3, #2
 8000680:	d027      	beq.n	80006d2 <nrf24_setPALevel+0x86>
 8000682:	dc42      	bgt.n	800070a <nrf24_setPALevel+0xbe>
 8000684:	2b00      	cmp	r3, #0
 8000686:	d002      	beq.n	800068e <nrf24_setPALevel+0x42>
 8000688:	2b01      	cmp	r3, #1
 800068a:	d011      	beq.n	80006b0 <nrf24_setPALevel+0x64>
			config |= (1 << 2) | (1 << 1);	//write 3 in the RF_PWR bits
			node->pa = high;
			break;

		default:
			break;
 800068c:	e03d      	b.n	800070a <nrf24_setPALevel+0xbe>
			config &= ~(1 << 2);	//write 0 in the RF_PWR bits
 800068e:	200f      	movs	r0, #15
 8000690:	183b      	adds	r3, r7, r0
 8000692:	183a      	adds	r2, r7, r0
 8000694:	7812      	ldrb	r2, [r2, #0]
 8000696:	2104      	movs	r1, #4
 8000698:	438a      	bics	r2, r1
 800069a:	701a      	strb	r2, [r3, #0]
			config &= ~(1 << 1);
 800069c:	183b      	adds	r3, r7, r0
 800069e:	183a      	adds	r2, r7, r0
 80006a0:	7812      	ldrb	r2, [r2, #0]
 80006a2:	2102      	movs	r1, #2
 80006a4:	438a      	bics	r2, r1
 80006a6:	701a      	strb	r2, [r3, #0]
			node->pa = veryLow;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	771a      	strb	r2, [r3, #28]
			break;
 80006ae:	e02d      	b.n	800070c <nrf24_setPALevel+0xc0>
			config &= ~(1 << 2);	//write 1 in the RF_PWR bits
 80006b0:	200f      	movs	r0, #15
 80006b2:	183b      	adds	r3, r7, r0
 80006b4:	183a      	adds	r2, r7, r0
 80006b6:	7812      	ldrb	r2, [r2, #0]
 80006b8:	2104      	movs	r1, #4
 80006ba:	438a      	bics	r2, r1
 80006bc:	701a      	strb	r2, [r3, #0]
			config |= (1 << 1);
 80006be:	183b      	adds	r3, r7, r0
 80006c0:	183a      	adds	r2, r7, r0
 80006c2:	7812      	ldrb	r2, [r2, #0]
 80006c4:	2102      	movs	r1, #2
 80006c6:	430a      	orrs	r2, r1
 80006c8:	701a      	strb	r2, [r3, #0]
			node->pa = low;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2201      	movs	r2, #1
 80006ce:	771a      	strb	r2, [r3, #28]
			break;
 80006d0:	e01c      	b.n	800070c <nrf24_setPALevel+0xc0>
			config |= (1 << 2);		//write 2 in the RF_PWR bits
 80006d2:	200f      	movs	r0, #15
 80006d4:	183b      	adds	r3, r7, r0
 80006d6:	183a      	adds	r2, r7, r0
 80006d8:	7812      	ldrb	r2, [r2, #0]
 80006da:	2104      	movs	r1, #4
 80006dc:	430a      	orrs	r2, r1
 80006de:	701a      	strb	r2, [r3, #0]
			config &= ~(1 << 1);
 80006e0:	183b      	adds	r3, r7, r0
 80006e2:	183a      	adds	r2, r7, r0
 80006e4:	7812      	ldrb	r2, [r2, #0]
 80006e6:	2102      	movs	r1, #2
 80006e8:	438a      	bics	r2, r1
 80006ea:	701a      	strb	r2, [r3, #0]
			node->pa = mid;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2202      	movs	r2, #2
 80006f0:	771a      	strb	r2, [r3, #28]
			break;
 80006f2:	e00b      	b.n	800070c <nrf24_setPALevel+0xc0>
			config |= (1 << 2) | (1 << 1);	//write 3 in the RF_PWR bits
 80006f4:	220f      	movs	r2, #15
 80006f6:	18bb      	adds	r3, r7, r2
 80006f8:	18ba      	adds	r2, r7, r2
 80006fa:	7812      	ldrb	r2, [r2, #0]
 80006fc:	2106      	movs	r1, #6
 80006fe:	430a      	orrs	r2, r1
 8000700:	701a      	strb	r2, [r3, #0]
			node->pa = high;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2203      	movs	r2, #3
 8000706:	771a      	strb	r2, [r3, #28]
			break;
 8000708:	e000      	b.n	800070c <nrf24_setPALevel+0xc0>
			break;
 800070a:	46c0      	nop			; (mov r8, r8)
	}
	nrf24_writeReg(node, RF_SETUP, config);
 800070c:	230f      	movs	r3, #15
 800070e:	18fb      	adds	r3, r7, r3
 8000710:	781a      	ldrb	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2106      	movs	r1, #6
 8000716:	0018      	movs	r0, r3
 8000718:	f000 f958 	bl	80009cc <nrf24_writeReg>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	0018      	movs	r0, r3
 8000720:	f000 f914 	bl	800094c <nrf24_CE_enable>
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b005      	add	sp, #20
 800072a:	bd90      	pop	{r4, r7, pc}

0800072c <nrf24_setChannel>:
// -----------------------------------------------------------------------------

//Set the channel device
void nrf24_setChannel(nrf24 *node, uint8_t channel) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	000a      	movs	r2, r1
 8000736:	1cfb      	adds	r3, r7, #3
 8000738:	701a      	strb	r2, [r3, #0]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	0018      	movs	r0, r3
 800073e:	f000 f915 	bl	800096c <nrf24_CE_disable>
	nrf24_writeReg(node, RF_CH, channel);  // select the channel
 8000742:	1cfb      	adds	r3, r7, #3
 8000744:	781a      	ldrb	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2105      	movs	r1, #5
 800074a:	0018      	movs	r0, r3
 800074c:	f000 f93e 	bl	80009cc <nrf24_writeReg>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	0018      	movs	r0, r3
 8000754:	f000 f8fa 	bl	800094c <nrf24_CE_enable>
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b002      	add	sp, #8
 800075e:	bd80      	pop	{r7, pc}

08000760 <nrf24_setMode>:
// -----------------------------------------------------------------------------

//Set the module operation mode
void nrf24_setMode(nrf24 *node, Mode _mode) {
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	000a      	movs	r2, r1
 800076a:	1cfb      	adds	r3, r7, #3
 800076c:	701a      	strb	r2, [r3, #0]
	uint8_t config = nrf24_readReg(node, CONFIG);
 800076e:	230f      	movs	r3, #15
 8000770:	18fc      	adds	r4, r7, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2100      	movs	r1, #0
 8000776:	0018      	movs	r0, r3
 8000778:	f000 f9a5 	bl	8000ac6 <nrf24_readReg>
 800077c:	0003      	movs	r3, r0
 800077e:	7023      	strb	r3, [r4, #0]

	switch (_mode) {
 8000780:	1cfb      	adds	r3, r7, #3
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b03      	cmp	r3, #3
 8000786:	d037      	beq.n	80007f8 <nrf24_setMode+0x98>
 8000788:	dc45      	bgt.n	8000816 <nrf24_setMode+0xb6>
 800078a:	2b02      	cmp	r3, #2
 800078c:	d01f      	beq.n	80007ce <nrf24_setMode+0x6e>
 800078e:	dc42      	bgt.n	8000816 <nrf24_setMode+0xb6>
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <nrf24_setMode+0x3a>
 8000794:	2b01      	cmp	r3, #1
 8000796:	d00b      	beq.n	80007b0 <nrf24_setMode+0x50>
			config |= (1 << 1) | (1 << 0); //write 1 in the PWR_UP and PRIM_RX bits
			node->mode = rxMode;
			break;

		default:
			break;
 8000798:	e03d      	b.n	8000816 <nrf24_setMode+0xb6>
			config &= ~(1 << 1);	//write 0 in the PWR_UP bit
 800079a:	220f      	movs	r2, #15
 800079c:	18bb      	adds	r3, r7, r2
 800079e:	18ba      	adds	r2, r7, r2
 80007a0:	7812      	ldrb	r2, [r2, #0]
 80007a2:	2102      	movs	r1, #2
 80007a4:	438a      	bics	r2, r1
 80007a6:	701a      	strb	r2, [r3, #0]
			node->mode = pwrDown;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	779a      	strb	r2, [r3, #30]
			break;
 80007ae:	e033      	b.n	8000818 <nrf24_setMode+0xb8>
			nrf24_CE_disable(node);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 f8da 	bl	800096c <nrf24_CE_disable>
			config |= (1 << 1);		//write 1 in the PWR_UP bit
 80007b8:	220f      	movs	r2, #15
 80007ba:	18bb      	adds	r3, r7, r2
 80007bc:	18ba      	adds	r2, r7, r2
 80007be:	7812      	ldrb	r2, [r2, #0]
 80007c0:	2102      	movs	r1, #2
 80007c2:	430a      	orrs	r2, r1
 80007c4:	701a      	strb	r2, [r3, #0]
			node->mode = standby;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2201      	movs	r2, #1
 80007ca:	779a      	strb	r2, [r3, #30]
			break;
 80007cc:	e024      	b.n	8000818 <nrf24_setMode+0xb8>
			nrf24_CE_enable(node);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	0018      	movs	r0, r3
 80007d2:	f000 f8bb 	bl	800094c <nrf24_CE_enable>
			config |= (1 << 1);		//write 1 in the PWR_UP bit
 80007d6:	200f      	movs	r0, #15
 80007d8:	183b      	adds	r3, r7, r0
 80007da:	183a      	adds	r2, r7, r0
 80007dc:	7812      	ldrb	r2, [r2, #0]
 80007de:	2102      	movs	r1, #2
 80007e0:	430a      	orrs	r2, r1
 80007e2:	701a      	strb	r2, [r3, #0]
			config &= ~(1 << 0);	//write 0 in the PRIM_RX bit
 80007e4:	183b      	adds	r3, r7, r0
 80007e6:	183a      	adds	r2, r7, r0
 80007e8:	7812      	ldrb	r2, [r2, #0]
 80007ea:	2101      	movs	r1, #1
 80007ec:	438a      	bics	r2, r1
 80007ee:	701a      	strb	r2, [r3, #0]
			node->mode = txMode;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2202      	movs	r2, #2
 80007f4:	779a      	strb	r2, [r3, #30]
			break;
 80007f6:	e00f      	b.n	8000818 <nrf24_setMode+0xb8>
			nrf24_CE_enable(node);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	0018      	movs	r0, r3
 80007fc:	f000 f8a6 	bl	800094c <nrf24_CE_enable>
			config |= (1 << 1) | (1 << 0); //write 1 in the PWR_UP and PRIM_RX bits
 8000800:	220f      	movs	r2, #15
 8000802:	18bb      	adds	r3, r7, r2
 8000804:	18ba      	adds	r2, r7, r2
 8000806:	7812      	ldrb	r2, [r2, #0]
 8000808:	2103      	movs	r1, #3
 800080a:	430a      	orrs	r2, r1
 800080c:	701a      	strb	r2, [r3, #0]
			node->mode = rxMode;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2203      	movs	r2, #3
 8000812:	779a      	strb	r2, [r3, #30]
			break;
 8000814:	e000      	b.n	8000818 <nrf24_setMode+0xb8>
			break;
 8000816:	46c0      	nop			; (mov r8, r8)
	}
	nrf24_writeReg(node, CONFIG, config);
 8000818:	230f      	movs	r3, #15
 800081a:	18fb      	adds	r3, r7, r3
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2100      	movs	r1, #0
 8000822:	0018      	movs	r0, r3
 8000824:	f000 f8d2 	bl	80009cc <nrf24_writeReg>
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b005      	add	sp, #20
 800082e:	bd90      	pop	{r4, r7, pc}

08000830 <nrf24_setTxAddr>:
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
}
// -----------------------------------------------------------------------------

// set up the Tx mode
void nrf24_setTxAddr(nrf24 *node, uint8_t *Address) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	0018      	movs	r0, r3
 800083e:	f000 f895 	bl	800096c <nrf24_CE_disable>
	nrf24_writeRegMulti(node, TX_ADDR, Address, 5);  // Write the TX address
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	2305      	movs	r3, #5
 8000848:	2110      	movs	r1, #16
 800084a:	f000 f8f4 	bl	8000a36 <nrf24_writeRegMulti>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	0018      	movs	r0, r3
 8000852:	f000 f87b 	bl	800094c <nrf24_CE_enable>
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b002      	add	sp, #8
 800085c:	bd80      	pop	{r7, pc}

0800085e <nrf24_Transmit>:
// -----------------------------------------------------------------------------

//transmit the data
uint8_t nrf24_Transmit(nrf24 *node, uint8_t *data, uint8_t len) {
 800085e:	b5b0      	push	{r4, r5, r7, lr}
 8000860:	b088      	sub	sp, #32
 8000862:	af00      	add	r7, sp, #0
 8000864:	60f8      	str	r0, [r7, #12]
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	701a      	strb	r2, [r3, #0]
	uint8_t cmdtosend = 0;
 800086c:	2416      	movs	r4, #22
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]

	nrf24_CSN_enable(node);		//select the device
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	0018      	movs	r0, r3
 8000878:	f000 f888 	bl	800098c <nrf24_CSN_enable>
	cmdtosend = W_TX_PAYLOAD;	//payload command
 800087c:	0021      	movs	r1, r4
 800087e:	187b      	adds	r3, r7, r1
 8000880:	22a0      	movs	r2, #160	; 0xa0
 8000882:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(node->hSPIx, &cmdtosend, 1, NRF_TX_TIMEOUT);
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	6998      	ldr	r0, [r3, #24]
 8000888:	23fa      	movs	r3, #250	; 0xfa
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	1879      	adds	r1, r7, r1
 800088e:	2201      	movs	r2, #1
 8000890:	f001 fae6 	bl	8001e60 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	0018      	movs	r0, r3
 800089c:	f001 ff56 	bl	800274c <HAL_SPI_GetState>
 80008a0:	0003      	movs	r3, r0
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d1f7      	bne.n	8000896 <nrf24_Transmit+0x38>
	// send the payload
	if (len < 33) HAL_SPI_Transmit(node->hSPIx, data, len, NRF_TX_TIMEOUT);
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b20      	cmp	r3, #32
 80008ac:	d809      	bhi.n	80008c2 <nrf24_Transmit+0x64>
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	6998      	ldr	r0, [r3, #24]
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	23fa      	movs	r3, #250	; 0xfa
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	f001 facf 	bl	8001e60 <HAL_SPI_Transmit>
	nrf24_CSN_disable(node);	//Unselect the device
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 f871 	bl	80009ac <nrf24_CSN_disable>

	uint8_t timeout = 0;
 80008ca:	231f      	movs	r3, #31
 80008cc:	18fb      	adds	r3, r7, r3
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
	while (timeout++ < 10) {
 80008d2:	e02e      	b.n	8000932 <nrf24_Transmit+0xd4>
		for (int i = 0; i < 200; ++i) {
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
 80008d8:	e003      	b.n	80008e2 <nrf24_Transmit+0x84>
			__ASM("NOP");
 80008da:	46c0      	nop			; (mov r8, r8)
		for (int i = 0; i < 200; ++i) {
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	3301      	adds	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
 80008e2:	69bb      	ldr	r3, [r7, #24]
 80008e4:	2bc7      	cmp	r3, #199	; 0xc7
 80008e6:	ddf8      	ble.n	80008da <nrf24_Transmit+0x7c>
		}
		uint8_t fifostatus = nrf24_readReg(node, FIFO_STATUS);
 80008e8:	2517      	movs	r5, #23
 80008ea:	197c      	adds	r4, r7, r5
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	2117      	movs	r1, #23
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 f8e8 	bl	8000ac6 <nrf24_readReg>
 80008f6:	0003      	movs	r3, r0
 80008f8:	7023      	strb	r3, [r4, #0]

		//check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
		if ((fifostatus & (1 << 4)) && (!(fifostatus & (1 << 3)))) {
 80008fa:	197b      	adds	r3, r7, r5
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2210      	movs	r2, #16
 8000900:	4013      	ands	r3, r2
 8000902:	d016      	beq.n	8000932 <nrf24_Transmit+0xd4>
 8000904:	197b      	adds	r3, r7, r5
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2208      	movs	r2, #8
 800090a:	4013      	ands	r3, r2
 800090c:	d111      	bne.n	8000932 <nrf24_Transmit+0xd4>
			cmdtosend = FLUSH_TX;
 800090e:	2116      	movs	r1, #22
 8000910:	187b      	adds	r3, r7, r1
 8000912:	22e1      	movs	r2, #225	; 0xe1
 8000914:	701a      	strb	r2, [r3, #0]
			nrf_sendCmd(node, cmdtosend);
 8000916:	187b      	adds	r3, r7, r1
 8000918:	781a      	ldrb	r2, [r3, #0]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	0011      	movs	r1, r2
 800091e:	0018      	movs	r0, r3
 8000920:	f000 f904 	bl	8000b2c <nrf_sendCmd>
			nrf24_reset(node, FIFO_STATUS);	//reset FIFO_STATUS
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2117      	movs	r1, #23
 8000928:	0018      	movs	r0, r3
 800092a:	f000 f923 	bl	8000b74 <nrf24_reset>
			return (1);
 800092e:	2301      	movs	r3, #1
 8000930:	e008      	b.n	8000944 <nrf24_Transmit+0xe6>
	while (timeout++ < 10) {
 8000932:	221f      	movs	r2, #31
 8000934:	18bb      	adds	r3, r7, r2
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	18ba      	adds	r2, r7, r2
 800093a:	1c59      	adds	r1, r3, #1
 800093c:	7011      	strb	r1, [r2, #0]
 800093e:	2b09      	cmp	r3, #9
 8000940:	d9c8      	bls.n	80008d4 <nrf24_Transmit+0x76>
		}
	}
	return (0);
 8000942:	2300      	movs	r3, #0
}
 8000944:	0018      	movs	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	b008      	add	sp, #32
 800094a:	bdb0      	pop	{r4, r5, r7, pc}

0800094c <nrf24_CE_enable>:
		*(data + i) = nrf24_readReg(node, i - 12);
}
// -----------------------------------------------------------------------------

/* privated functions --------------------------------------------------------*/
static void nrf24_CE_enable(nrf24 *node) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_SET);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6898      	ldr	r0, [r3, #8]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	899b      	ldrh	r3, [r3, #12]
 800095c:	2201      	movs	r2, #1
 800095e:	0019      	movs	r1, r3
 8000960:	f000 fd42 	bl	80013e8 <HAL_GPIO_WritePin>
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b002      	add	sp, #8
 800096a:	bd80      	pop	{r7, pc}

0800096c <nrf24_CE_disable>:
// -----------------------------------------------------------------------------

static void nrf24_CE_disable(nrf24 *node) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_RESET);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6898      	ldr	r0, [r3, #8]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	899b      	ldrh	r3, [r3, #12]
 800097c:	2200      	movs	r2, #0
 800097e:	0019      	movs	r1, r3
 8000980:	f000 fd32 	bl	80013e8 <HAL_GPIO_WritePin>
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	b002      	add	sp, #8
 800098a:	bd80      	pop	{r7, pc}

0800098c <nrf24_CSN_enable>:
// -----------------------------------------------------------------------------

static void nrf24_CSN_enable(nrf24 *node) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_RESET);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6818      	ldr	r0, [r3, #0]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	889b      	ldrh	r3, [r3, #4]
 800099c:	2200      	movs	r2, #0
 800099e:	0019      	movs	r1, r3
 80009a0:	f000 fd22 	bl	80013e8 <HAL_GPIO_WritePin>
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b002      	add	sp, #8
 80009aa:	bd80      	pop	{r7, pc}

080009ac <nrf24_CSN_disable>:
// -----------------------------------------------------------------------------

static void nrf24_CSN_disable(nrf24 *node) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_SET);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6818      	ldr	r0, [r3, #0]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	889b      	ldrh	r3, [r3, #4]
 80009bc:	2201      	movs	r2, #1
 80009be:	0019      	movs	r1, r3
 80009c0:	f000 fd12 	bl	80013e8 <HAL_GPIO_WritePin>
}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b002      	add	sp, #8
 80009ca:	bd80      	pop	{r7, pc}

080009cc <nrf24_writeReg>:
// -----------------------------------------------------------------------------

//write a value(s) in a register(s) by an address
static void nrf24_writeReg(nrf24 *node, uint8_t reg, uint8_t data) {
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	0008      	movs	r0, r1
 80009d6:	0011      	movs	r1, r2
 80009d8:	1cfb      	adds	r3, r7, #3
 80009da:	1c02      	adds	r2, r0, #0
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	1cbb      	adds	r3, r7, #2
 80009e0:	1c0a      	adds	r2, r1, #0
 80009e2:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 80009e4:	1cfb      	adds	r3, r7, #3
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2220      	movs	r2, #32
 80009ea:	4313      	orrs	r3, r2
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	240c      	movs	r4, #12
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	701a      	strb	r2, [r3, #0]
	buf[1] = data;
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	1cba      	adds	r2, r7, #2
 80009f8:	7812      	ldrb	r2, [r2, #0]
 80009fa:	705a      	strb	r2, [r3, #1]
	nrf24_CSN_enable(node);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	0018      	movs	r0, r3
 8000a00:	f7ff ffc4 	bl	800098c <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 2, NRF_TX_TIMEOUT);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6998      	ldr	r0, [r3, #24]
 8000a08:	23fa      	movs	r3, #250	; 0xfa
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	1939      	adds	r1, r7, r4
 8000a0e:	2202      	movs	r2, #2
 8000a10:	f001 fa26 	bl	8001e60 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f001 fe96 	bl	800274c <HAL_SPI_GetState>
 8000a20:	0003      	movs	r3, r0
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d1f7      	bne.n	8000a16 <nrf24_writeReg+0x4a>
	nrf24_CSN_disable(node);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f7ff ffbf 	bl	80009ac <nrf24_CSN_disable>
}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b005      	add	sp, #20
 8000a34:	bd90      	pop	{r4, r7, pc}

08000a36 <nrf24_writeRegMulti>:
// -----------------------------------------------------------------------------

//write multiple values in a registers by an address
static void nrf24_writeRegMulti(nrf24 *node, uint8_t reg, uint8_t *data,
		uint16_t len) {
 8000a36:	b590      	push	{r4, r7, lr}
 8000a38:	b087      	sub	sp, #28
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	60f8      	str	r0, [r7, #12]
 8000a3e:	0008      	movs	r0, r1
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	0019      	movs	r1, r3
 8000a44:	240b      	movs	r4, #11
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	1c02      	adds	r2, r0, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	1c0a      	adds	r2, r1, #0
 8000a52:	801a      	strh	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2220      	movs	r2, #32
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	2414      	movs	r4, #20
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	701a      	strb	r2, [r3, #0]
	nrf24_CSN_enable(node);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	0018      	movs	r0, r3
 8000a68:	f7ff ff90 	bl	800098c <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 1, NRF_TX_TIMEOUT);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	6998      	ldr	r0, [r3, #24]
 8000a70:	23fa      	movs	r3, #250	; 0xfa
 8000a72:	00db      	lsls	r3, r3, #3
 8000a74:	1939      	adds	r1, r7, r4
 8000a76:	2201      	movs	r2, #1
 8000a78:	f001 f9f2 	bl	8001e60 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	0018      	movs	r0, r3
 8000a84:	f001 fe62 	bl	800274c <HAL_SPI_GetState>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d1f7      	bne.n	8000a7e <nrf24_writeRegMulti+0x48>
	HAL_SPI_Transmit(node->hSPIx, data, len, NRF_TX_TIMEOUT);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	6998      	ldr	r0, [r3, #24]
 8000a92:	23fa      	movs	r3, #250	; 0xfa
 8000a94:	00dc      	lsls	r4, r3, #3
 8000a96:	2308      	movs	r3, #8
 8000a98:	18fb      	adds	r3, r7, r3
 8000a9a:	881a      	ldrh	r2, [r3, #0]
 8000a9c:	6879      	ldr	r1, [r7, #4]
 8000a9e:	0023      	movs	r3, r4
 8000aa0:	f001 f9de 	bl	8001e60 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f001 fe4e 	bl	800274c <HAL_SPI_GetState>
 8000ab0:	0003      	movs	r3, r0
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d1f7      	bne.n	8000aa6 <nrf24_writeRegMulti+0x70>
	nrf24_CSN_disable(node);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff ff77 	bl	80009ac <nrf24_CSN_disable>
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b007      	add	sp, #28
 8000ac4:	bd90      	pop	{r4, r7, pc}

08000ac6 <nrf24_readReg>:
// -----------------------------------------------------------------------------

//read a value from a register by an address
static uint8_t nrf24_readReg(nrf24 *node, uint8_t reg) {
 8000ac6:	b590      	push	{r4, r7, lr}
 8000ac8:	b085      	sub	sp, #20
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	000a      	movs	r2, r1
 8000ad0:	1cfb      	adds	r3, r7, #3
 8000ad2:	701a      	strb	r2, [r3, #0]
	uint8_t data = 0;
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
	nrf24_CSN_enable(node);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f7ff ff54 	bl	800098c <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, &reg, 1, NRF_TX_TIMEOUT);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6998      	ldr	r0, [r3, #24]
 8000ae8:	23fa      	movs	r3, #250	; 0xfa
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	1cf9      	adds	r1, r7, #3
 8000aee:	2201      	movs	r2, #1
 8000af0:	f001 f9b6 	bl	8001e60 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	0018      	movs	r0, r3
 8000afc:	f001 fe26 	bl	800274c <HAL_SPI_GetState>
 8000b00:	0003      	movs	r3, r0
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d1f7      	bne.n	8000af6 <nrf24_readReg+0x30>
	HAL_SPI_Receive(node->hSPIx, &data, 1, NRF_RX_TIMEOUT);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6998      	ldr	r0, [r3, #24]
 8000b0a:	23fa      	movs	r3, #250	; 0xfa
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	240f      	movs	r4, #15
 8000b10:	1939      	adds	r1, r7, r4
 8000b12:	2201      	movs	r2, #1
 8000b14:	f001 fafc 	bl	8002110 <HAL_SPI_Receive>
	nrf24_CSN_disable(node);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f7ff ff46 	bl	80009ac <nrf24_CSN_disable>
	return data;
 8000b20:	193b      	adds	r3, r7, r4
 8000b22:	781b      	ldrb	r3, [r3, #0]
}
 8000b24:	0018      	movs	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b005      	add	sp, #20
 8000b2a:	bd90      	pop	{r4, r7, pc}

08000b2c <nrf_sendCmd>:
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
	nrf24_CSN_disable(node);
}
// -----------------------------------------------------------------------------

static void nrf_sendCmd(nrf24 *node, uint8_t cmd) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	000a      	movs	r2, r1
 8000b36:	1cfb      	adds	r3, r7, #3
 8000b38:	701a      	strb	r2, [r3, #0]
	nrf24_CSN_enable(node);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f7ff ff25 	bl	800098c <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, &cmd, 1, NRF_TX_TIMEOUT);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6998      	ldr	r0, [r3, #24]
 8000b46:	23fa      	movs	r3, #250	; 0xfa
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	1cf9      	adds	r1, r7, #3
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f001 f987 	bl	8001e60 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f001 fdf7 	bl	800274c <HAL_SPI_GetState>
 8000b5e:	0003      	movs	r3, r0
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d1f7      	bne.n	8000b54 <nrf_sendCmd+0x28>
	nrf24_CSN_disable(node);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	0018      	movs	r0, r3
 8000b68:	f7ff ff20 	bl	80009ac <nrf24_CSN_disable>
}
 8000b6c:	46c0      	nop			; (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b002      	add	sp, #8
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <nrf24_reset>:
// -----------------------------------------------------------------------------

static void nrf24_reset(nrf24 *node, uint8_t reg) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	000a      	movs	r2, r1
 8000b7e:	1cfb      	adds	r3, r7, #3
 8000b80:	701a      	strb	r2, [r3, #0]
	if (reg == STATUS)
 8000b82:	1cfb      	adds	r3, r7, #3
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b07      	cmp	r3, #7
 8000b88:	d106      	bne.n	8000b98 <nrf24_reset+0x24>
		nrf24_writeReg(node, STATUS, 0x00);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2107      	movs	r1, #7
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff ff1b 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P5, 0);
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
		nrf24_writeReg(node, DYNPD, 0);
		nrf24_writeReg(node, FEATURE, 0);
	}
}
 8000b96:	e0bb      	b.n	8000d10 <nrf24_reset+0x19c>
	else if (reg == FIFO_STATUS)
 8000b98:	1cfb      	adds	r3, r7, #3
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b17      	cmp	r3, #23
 8000b9e:	d106      	bne.n	8000bae <nrf24_reset+0x3a>
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2211      	movs	r2, #17
 8000ba4:	2117      	movs	r1, #23
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f7ff ff10 	bl	80009cc <nrf24_writeReg>
}
 8000bac:	e0b0      	b.n	8000d10 <nrf24_reset+0x19c>
		nrf24_writeReg(node, CONFIG, 0x08);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2208      	movs	r2, #8
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f7ff ff09 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, EN_AA, 0x3F);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	223f      	movs	r2, #63	; 0x3f
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff ff03 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, EN_RXADDR, 0x03);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2203      	movs	r2, #3
 8000bca:	2102      	movs	r1, #2
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff fefd 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, SETUP_AW, 0x03);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	2103      	movs	r1, #3
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff fef7 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, SETUP_RETR, 0x03);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2203      	movs	r2, #3
 8000be2:	2104      	movs	r1, #4
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff fef1 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, RF_CH, 0x02);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2202      	movs	r2, #2
 8000bee:	2105      	movs	r1, #5
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff feeb 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, RF_SETUP, 0x0E);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	220e      	movs	r2, #14
 8000bfa:	2106      	movs	r1, #6
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff fee5 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, STATUS, 0x00);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	2107      	movs	r1, #7
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff fedf 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, OBSERVE_TX, 0x00);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	2108      	movs	r1, #8
 8000c14:	0018      	movs	r0, r3
 8000c16:	f7ff fed9 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, RPD, 0x00);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2109      	movs	r1, #9
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff fed3 	bl	80009cc <nrf24_writeReg>
		uint8_t rx_addr_p0_def[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };
 8000c26:	2018      	movs	r0, #24
 8000c28:	183b      	adds	r3, r7, r0
 8000c2a:	4a3b      	ldr	r2, [pc, #236]	; (8000d18 <nrf24_reset+0x1a4>)
 8000c2c:	6811      	ldr	r1, [r2, #0]
 8000c2e:	6019      	str	r1, [r3, #0]
 8000c30:	7912      	ldrb	r2, [r2, #4]
 8000c32:	711a      	strb	r2, [r3, #4]
		nrf24_writeRegMulti(node, RX_ADDR_P0, rx_addr_p0_def, 5);
 8000c34:	183a      	adds	r2, r7, r0
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	2305      	movs	r3, #5
 8000c3a:	210a      	movs	r1, #10
 8000c3c:	f7ff fefb 	bl	8000a36 <nrf24_writeRegMulti>
		uint8_t rx_addr_p1_def[5] = { 0xC2, 0xC2, 0xC2, 0xC2, 0xC2 };
 8000c40:	2010      	movs	r0, #16
 8000c42:	183b      	adds	r3, r7, r0
 8000c44:	4a35      	ldr	r2, [pc, #212]	; (8000d1c <nrf24_reset+0x1a8>)
 8000c46:	6811      	ldr	r1, [r2, #0]
 8000c48:	6019      	str	r1, [r3, #0]
 8000c4a:	7912      	ldrb	r2, [r2, #4]
 8000c4c:	711a      	strb	r2, [r3, #4]
		nrf24_writeRegMulti(node, RX_ADDR_P1, rx_addr_p1_def, 5);
 8000c4e:	183a      	adds	r2, r7, r0
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	2305      	movs	r3, #5
 8000c54:	210b      	movs	r1, #11
 8000c56:	f7ff feee 	bl	8000a36 <nrf24_writeRegMulti>
		nrf24_writeReg(node, RX_ADDR_P2, 0xC3);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	22c3      	movs	r2, #195	; 0xc3
 8000c5e:	210c      	movs	r1, #12
 8000c60:	0018      	movs	r0, r3
 8000c62:	f7ff feb3 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P3, 0xC4);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	22c4      	movs	r2, #196	; 0xc4
 8000c6a:	210d      	movs	r1, #13
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff fead 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P4, 0xC5);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	22c5      	movs	r2, #197	; 0xc5
 8000c76:	210e      	movs	r1, #14
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff fea7 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P5, 0xC6);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	22c6      	movs	r2, #198	; 0xc6
 8000c82:	210f      	movs	r1, #15
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff fea1 	bl	80009cc <nrf24_writeReg>
		uint8_t tx_addr_def[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };
 8000c8a:	2008      	movs	r0, #8
 8000c8c:	183b      	adds	r3, r7, r0
 8000c8e:	4a22      	ldr	r2, [pc, #136]	; (8000d18 <nrf24_reset+0x1a4>)
 8000c90:	6811      	ldr	r1, [r2, #0]
 8000c92:	6019      	str	r1, [r3, #0]
 8000c94:	7912      	ldrb	r2, [r2, #4]
 8000c96:	711a      	strb	r2, [r3, #4]
		nrf24_writeRegMulti(node, TX_ADDR, tx_addr_def, 5);
 8000c98:	183a      	adds	r2, r7, r0
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	2305      	movs	r3, #5
 8000c9e:	2110      	movs	r1, #16
 8000ca0:	f7ff fec9 	bl	8000a36 <nrf24_writeRegMulti>
		nrf24_writeReg(node, RX_PW_P0, 0);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2111      	movs	r1, #17
 8000caa:	0018      	movs	r0, r3
 8000cac:	f7ff fe8e 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P1, 0);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2112      	movs	r1, #18
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f7ff fe88 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P2, 0);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2113      	movs	r1, #19
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f7ff fe82 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P3, 0);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2114      	movs	r1, #20
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f7ff fe7c 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P4, 0);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2115      	movs	r1, #21
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f7ff fe76 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P5, 0);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2116      	movs	r1, #22
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f7ff fe70 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2211      	movs	r2, #17
 8000cf0:	2117      	movs	r1, #23
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff fe6a 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, DYNPD, 0);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	211c      	movs	r1, #28
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f7ff fe64 	bl	80009cc <nrf24_writeReg>
		nrf24_writeReg(node, FEATURE, 0);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2200      	movs	r2, #0
 8000d08:	211d      	movs	r1, #29
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff fe5e 	bl	80009cc <nrf24_writeReg>
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b008      	add	sp, #32
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	08002b7c 	.word	0x08002b7c
 8000d1c:	08002b84 	.word	0x08002b84

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <HAL_MspInit+0x44>)
 8000d28:	699a      	ldr	r2, [r3, #24]
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_MspInit+0x44>)
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	619a      	str	r2, [r3, #24]
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <HAL_MspInit+0x44>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	2201      	movs	r2, #1
 8000d38:	4013      	ands	r3, r2
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_MspInit+0x44>)
 8000d40:	69da      	ldr	r2, [r3, #28]
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_MspInit+0x44>)
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	0549      	lsls	r1, r1, #21
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	61da      	str	r2, [r3, #28]
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <HAL_MspInit+0x44>)
 8000d4e:	69da      	ldr	r2, [r3, #28]
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	055b      	lsls	r3, r3, #21
 8000d54:	4013      	ands	r3, r2
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	40021000 	.word	0x40021000

08000d68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d68:	b590      	push	{r4, r7, lr}
 8000d6a:	b08b      	sub	sp, #44	; 0x2c
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	2414      	movs	r4, #20
 8000d72:	193b      	adds	r3, r7, r4
 8000d74:	0018      	movs	r0, r3
 8000d76:	2314      	movs	r3, #20
 8000d78:	001a      	movs	r2, r3
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	f001 feea 	bl	8002b54 <memset>
  if(hspi->Instance==SPI1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a1c      	ldr	r2, [pc, #112]	; (8000df8 <HAL_SPI_MspInit+0x90>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d131      	bne.n	8000dee <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <HAL_SPI_MspInit+0x94>)
 8000d8c:	699a      	ldr	r2, [r3, #24]
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <HAL_SPI_MspInit+0x94>)
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	0149      	lsls	r1, r1, #5
 8000d94:	430a      	orrs	r2, r1
 8000d96:	619a      	str	r2, [r3, #24]
 8000d98:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <HAL_SPI_MspInit+0x94>)
 8000d9a:	699a      	ldr	r2, [r3, #24]
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	015b      	lsls	r3, r3, #5
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_SPI_MspInit+0x94>)
 8000da8:	695a      	ldr	r2, [r3, #20]
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_SPI_MspInit+0x94>)
 8000dac:	2180      	movs	r1, #128	; 0x80
 8000dae:	02c9      	lsls	r1, r1, #11
 8000db0:	430a      	orrs	r2, r1
 8000db2:	615a      	str	r2, [r3, #20]
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_SPI_MspInit+0x94>)
 8000db6:	695a      	ldr	r2, [r3, #20]
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	02db      	lsls	r3, r3, #11
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000dc2:	0021      	movs	r1, r4
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	2238      	movs	r2, #56	; 0x38
 8000dc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	2202      	movs	r2, #2
 8000dce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <HAL_SPI_MspInit+0x98>)
 8000de6:	0019      	movs	r1, r3
 8000de8:	0010      	movs	r0, r2
 8000dea:	f000 f98d 	bl	8001108 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b00b      	add	sp, #44	; 0x2c
 8000df4:	bd90      	pop	{r4, r7, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	40013000 	.word	0x40013000
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	48000400 	.word	0x48000400

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <NMI_Handler+0x4>

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e28:	f000 f87a 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e3e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e40:	480d      	ldr	r0, [pc, #52]	; (8000e78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e42:	490e      	ldr	r1, [pc, #56]	; (8000e7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e44:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <LoopForever+0xe>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e58:	4c0b      	ldr	r4, [pc, #44]	; (8000e88 <LoopForever+0x16>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e66:	f7ff ffe4 	bl	8000e32 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e6a:	f001 fe4f 	bl	8002b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e6e:	f7ff f9d7 	bl	8000220 <main>

08000e72 <LoopForever>:

LoopForever:
    b LoopForever
 8000e72:	e7fe      	b.n	8000e72 <LoopForever>
  ldr   r0, =_estack
 8000e74:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e7c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000e80:	08002bc4 	.word	0x08002bc4
  ldr r2, =_sbss
 8000e84:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000e88:	200000d0 	.word	0x200000d0

08000e8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC1_IRQHandler>
	...

08000e90 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <HAL_Init+0x24>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_Init+0x24>)
 8000e9a:	2110      	movs	r1, #16
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f809 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea6:	f7ff ff3b 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	40022000 	.word	0x40022000

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <HAL_InitTick+0x5c>)
 8000ec2:	681c      	ldr	r4, [r3, #0]
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <HAL_InitTick+0x60>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	0019      	movs	r1, r3
 8000eca:	23fa      	movs	r3, #250	; 0xfa
 8000ecc:	0098      	lsls	r0, r3, #2
 8000ece:	f7ff f91b 	bl	8000108 <__udivsi3>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	0019      	movs	r1, r3
 8000ed6:	0020      	movs	r0, r4
 8000ed8:	f7ff f916 	bl	8000108 <__udivsi3>
 8000edc:	0003      	movs	r3, r0
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f000 f905 	bl	80010ee <HAL_SYSTICK_Config>
 8000ee4:	1e03      	subs	r3, r0, #0
 8000ee6:	d001      	beq.n	8000eec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e00f      	b.n	8000f0c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d80b      	bhi.n	8000f0a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	425b      	negs	r3, r3
 8000ef8:	2200      	movs	r2, #0
 8000efa:	0018      	movs	r0, r3
 8000efc:	f000 f8e2 	bl	80010c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_InitTick+0x64>)
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e000      	b.n	8000f0c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b003      	add	sp, #12
 8000f12:	bd90      	pop	{r4, r7, pc}
 8000f14:	20000020 	.word	0x20000020
 8000f18:	20000028 	.word	0x20000028
 8000f1c:	20000024 	.word	0x20000024

08000f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_IncTick+0x1c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	001a      	movs	r2, r3
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_IncTick+0x20>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	18d2      	adds	r2, r2, r3
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <HAL_IncTick+0x20>)
 8000f32:	601a      	str	r2, [r3, #0]
}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	20000028 	.word	0x20000028
 8000f40:	200000cc 	.word	0x200000cc

08000f44 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <HAL_GetTick+0x10>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	200000cc 	.word	0x200000cc

08000f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff fff0 	bl	8000f44 <HAL_GetTick>
 8000f64:	0003      	movs	r3, r0
 8000f66:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	d005      	beq.n	8000f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_Delay+0x44>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	001a      	movs	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	189b      	adds	r3, r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	f7ff ffe0 	bl	8000f44 <HAL_GetTick>
 8000f84:	0002      	movs	r2, r0
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d8f7      	bhi.n	8000f80 <HAL_Delay+0x28>
  {
  }
}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b004      	add	sp, #16
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	20000028 	.word	0x20000028

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	0002      	movs	r2, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	1dfb      	adds	r3, r7, #7
 8000fac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b7f      	cmp	r3, #127	; 0x7f
 8000fb4:	d828      	bhi.n	8001008 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb6:	4a2f      	ldr	r2, [pc, #188]	; (8001074 <__NVIC_SetPriority+0xd4>)
 8000fb8:	1dfb      	adds	r3, r7, #7
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	33c0      	adds	r3, #192	; 0xc0
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	589b      	ldr	r3, [r3, r2]
 8000fc6:	1dfa      	adds	r2, r7, #7
 8000fc8:	7812      	ldrb	r2, [r2, #0]
 8000fca:	0011      	movs	r1, r2
 8000fcc:	2203      	movs	r2, #3
 8000fce:	400a      	ands	r2, r1
 8000fd0:	00d2      	lsls	r2, r2, #3
 8000fd2:	21ff      	movs	r1, #255	; 0xff
 8000fd4:	4091      	lsls	r1, r2
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	43d2      	mvns	r2, r2
 8000fda:	401a      	ands	r2, r3
 8000fdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	019b      	lsls	r3, r3, #6
 8000fe2:	22ff      	movs	r2, #255	; 0xff
 8000fe4:	401a      	ands	r2, r3
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	0018      	movs	r0, r3
 8000fec:	2303      	movs	r3, #3
 8000fee:	4003      	ands	r3, r0
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff4:	481f      	ldr	r0, [pc, #124]	; (8001074 <__NVIC_SetPriority+0xd4>)
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	089b      	lsrs	r3, r3, #2
 8000ffe:	430a      	orrs	r2, r1
 8001000:	33c0      	adds	r3, #192	; 0xc0
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001006:	e031      	b.n	800106c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <__NVIC_SetPriority+0xd8>)
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	0019      	movs	r1, r3
 8001010:	230f      	movs	r3, #15
 8001012:	400b      	ands	r3, r1
 8001014:	3b08      	subs	r3, #8
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3306      	adds	r3, #6
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	18d3      	adds	r3, r2, r3
 800101e:	3304      	adds	r3, #4
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	1dfa      	adds	r2, r7, #7
 8001024:	7812      	ldrb	r2, [r2, #0]
 8001026:	0011      	movs	r1, r2
 8001028:	2203      	movs	r2, #3
 800102a:	400a      	ands	r2, r1
 800102c:	00d2      	lsls	r2, r2, #3
 800102e:	21ff      	movs	r1, #255	; 0xff
 8001030:	4091      	lsls	r1, r2
 8001032:	000a      	movs	r2, r1
 8001034:	43d2      	mvns	r2, r2
 8001036:	401a      	ands	r2, r3
 8001038:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	019b      	lsls	r3, r3, #6
 800103e:	22ff      	movs	r2, #255	; 0xff
 8001040:	401a      	ands	r2, r3
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	0018      	movs	r0, r3
 8001048:	2303      	movs	r3, #3
 800104a:	4003      	ands	r3, r0
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001050:	4809      	ldr	r0, [pc, #36]	; (8001078 <__NVIC_SetPriority+0xd8>)
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	001c      	movs	r4, r3
 8001058:	230f      	movs	r3, #15
 800105a:	4023      	ands	r3, r4
 800105c:	3b08      	subs	r3, #8
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	430a      	orrs	r2, r1
 8001062:	3306      	adds	r3, #6
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	18c3      	adds	r3, r0, r3
 8001068:	3304      	adds	r3, #4
 800106a:	601a      	str	r2, [r3, #0]
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b003      	add	sp, #12
 8001072:	bd90      	pop	{r4, r7, pc}
 8001074:	e000e100 	.word	0xe000e100
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	1e5a      	subs	r2, r3, #1
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	045b      	lsls	r3, r3, #17
 800108c:	429a      	cmp	r2, r3
 800108e:	d301      	bcc.n	8001094 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001090:	2301      	movs	r3, #1
 8001092:	e010      	b.n	80010b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <SysTick_Config+0x44>)
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	3a01      	subs	r2, #1
 800109a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109c:	2301      	movs	r3, #1
 800109e:	425b      	negs	r3, r3
 80010a0:	2103      	movs	r1, #3
 80010a2:	0018      	movs	r0, r3
 80010a4:	f7ff ff7c 	bl	8000fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SysTick_Config+0x44>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SysTick_Config+0x44>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	0018      	movs	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b002      	add	sp, #8
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	210f      	movs	r1, #15
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	1c02      	adds	r2, r0, #0
 80010d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	0011      	movs	r1, r2
 80010e0:	0018      	movs	r0, r3
 80010e2:	f7ff ff5d 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b004      	add	sp, #16
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff ffbf 	bl	800107c <SysTick_Config>
 80010fe:	0003      	movs	r3, r0
}
 8001100:	0018      	movs	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	b002      	add	sp, #8
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001116:	e14f      	b.n	80013b8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2101      	movs	r1, #1
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4091      	lsls	r1, r2
 8001122:	000a      	movs	r2, r1
 8001124:	4013      	ands	r3, r2
 8001126:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d100      	bne.n	8001130 <HAL_GPIO_Init+0x28>
 800112e:	e140      	b.n	80013b2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2203      	movs	r2, #3
 8001136:	4013      	ands	r3, r2
 8001138:	2b01      	cmp	r3, #1
 800113a:	d005      	beq.n	8001148 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2203      	movs	r2, #3
 8001142:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001144:	2b02      	cmp	r3, #2
 8001146:	d130      	bne.n	80011aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	409a      	lsls	r2, r3
 8001156:	0013      	movs	r3, r2
 8001158:	43da      	mvns	r2, r3
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	409a      	lsls	r2, r3
 800116a:	0013      	movs	r3, r2
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800117e:	2201      	movs	r2, #1
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
 8001184:	0013      	movs	r3, r2
 8001186:	43da      	mvns	r2, r3
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	091b      	lsrs	r3, r3, #4
 8001194:	2201      	movs	r2, #1
 8001196:	401a      	ands	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	409a      	lsls	r2, r3
 800119c:	0013      	movs	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2203      	movs	r2, #3
 80011b0:	4013      	ands	r3, r2
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d017      	beq.n	80011e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	409a      	lsls	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	43da      	mvns	r2, r3
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	409a      	lsls	r2, r3
 80011d8:	0013      	movs	r3, r2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2203      	movs	r2, #3
 80011ec:	4013      	ands	r3, r2
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d123      	bne.n	800123a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	08da      	lsrs	r2, r3, #3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3208      	adds	r2, #8
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	58d3      	ldr	r3, [r2, r3]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	2207      	movs	r2, #7
 8001204:	4013      	ands	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	220f      	movs	r2, #15
 800120a:	409a      	lsls	r2, r3
 800120c:	0013      	movs	r3, r2
 800120e:	43da      	mvns	r2, r3
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	691a      	ldr	r2, [r3, #16]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2107      	movs	r1, #7
 800121e:	400b      	ands	r3, r1
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	409a      	lsls	r2, r3
 8001224:	0013      	movs	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	08da      	lsrs	r2, r3, #3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3208      	adds	r2, #8
 8001234:	0092      	lsls	r2, r2, #2
 8001236:	6939      	ldr	r1, [r7, #16]
 8001238:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	409a      	lsls	r2, r3
 8001248:	0013      	movs	r3, r2
 800124a:	43da      	mvns	r2, r3
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2203      	movs	r2, #3
 8001258:	401a      	ands	r2, r3
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	409a      	lsls	r2, r3
 8001260:	0013      	movs	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	23c0      	movs	r3, #192	; 0xc0
 8001274:	029b      	lsls	r3, r3, #10
 8001276:	4013      	ands	r3, r2
 8001278:	d100      	bne.n	800127c <HAL_GPIO_Init+0x174>
 800127a:	e09a      	b.n	80013b2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127c:	4b54      	ldr	r3, [pc, #336]	; (80013d0 <HAL_GPIO_Init+0x2c8>)
 800127e:	699a      	ldr	r2, [r3, #24]
 8001280:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <HAL_GPIO_Init+0x2c8>)
 8001282:	2101      	movs	r1, #1
 8001284:	430a      	orrs	r2, r1
 8001286:	619a      	str	r2, [r3, #24]
 8001288:	4b51      	ldr	r3, [pc, #324]	; (80013d0 <HAL_GPIO_Init+0x2c8>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	2201      	movs	r2, #1
 800128e:	4013      	ands	r3, r2
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001294:	4a4f      	ldr	r2, [pc, #316]	; (80013d4 <HAL_GPIO_Init+0x2cc>)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	589b      	ldr	r3, [r3, r2]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	2203      	movs	r2, #3
 80012a6:	4013      	ands	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	409a      	lsls	r2, r3
 80012ae:	0013      	movs	r3, r2
 80012b0:	43da      	mvns	r2, r3
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	2390      	movs	r3, #144	; 0x90
 80012bc:	05db      	lsls	r3, r3, #23
 80012be:	429a      	cmp	r2, r3
 80012c0:	d013      	beq.n	80012ea <HAL_GPIO_Init+0x1e2>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a44      	ldr	r2, [pc, #272]	; (80013d8 <HAL_GPIO_Init+0x2d0>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d00d      	beq.n	80012e6 <HAL_GPIO_Init+0x1de>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a43      	ldr	r2, [pc, #268]	; (80013dc <HAL_GPIO_Init+0x2d4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d007      	beq.n	80012e2 <HAL_GPIO_Init+0x1da>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a42      	ldr	r2, [pc, #264]	; (80013e0 <HAL_GPIO_Init+0x2d8>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d101      	bne.n	80012de <HAL_GPIO_Init+0x1d6>
 80012da:	2303      	movs	r3, #3
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x1e4>
 80012de:	2305      	movs	r3, #5
 80012e0:	e004      	b.n	80012ec <HAL_GPIO_Init+0x1e4>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_Init+0x1e4>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <HAL_GPIO_Init+0x1e4>
 80012ea:	2300      	movs	r3, #0
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	2103      	movs	r1, #3
 80012f0:	400a      	ands	r2, r1
 80012f2:	0092      	lsls	r2, r2, #2
 80012f4:	4093      	lsls	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012fc:	4935      	ldr	r1, [pc, #212]	; (80013d4 <HAL_GPIO_Init+0x2cc>)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3302      	adds	r3, #2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800130a:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <HAL_GPIO_Init+0x2dc>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	43da      	mvns	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	025b      	lsls	r3, r3, #9
 8001322:	4013      	ands	r3, r2
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800132e:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <HAL_GPIO_Init+0x2dc>)
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001334:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <HAL_GPIO_Init+0x2dc>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	43da      	mvns	r2, r3
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	029b      	lsls	r3, r3, #10
 800134c:	4013      	ands	r3, r2
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <HAL_GPIO_Init+0x2dc>)
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135e:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <HAL_GPIO_Init+0x2dc>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	43da      	mvns	r2, r3
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	035b      	lsls	r3, r3, #13
 8001376:	4013      	ands	r3, r2
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <HAL_GPIO_Init+0x2dc>)
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_GPIO_Init+0x2dc>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	43da      	mvns	r2, r3
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	039b      	lsls	r3, r3, #14
 80013a0:	4013      	ands	r3, r2
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013ac:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_GPIO_Init+0x2dc>)
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	40da      	lsrs	r2, r3
 80013c0:	1e13      	subs	r3, r2, #0
 80013c2:	d000      	beq.n	80013c6 <HAL_GPIO_Init+0x2be>
 80013c4:	e6a8      	b.n	8001118 <HAL_GPIO_Init+0x10>
  } 
}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	46c0      	nop			; (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b006      	add	sp, #24
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010000 	.word	0x40010000
 80013d8:	48000400 	.word	0x48000400
 80013dc:	48000800 	.word	0x48000800
 80013e0:	48000c00 	.word	0x48000c00
 80013e4:	40010400 	.word	0x40010400

080013e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	0008      	movs	r0, r1
 80013f2:	0011      	movs	r1, r2
 80013f4:	1cbb      	adds	r3, r7, #2
 80013f6:	1c02      	adds	r2, r0, #0
 80013f8:	801a      	strh	r2, [r3, #0]
 80013fa:	1c7b      	adds	r3, r7, #1
 80013fc:	1c0a      	adds	r2, r1, #0
 80013fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001400:	1c7b      	adds	r3, r7, #1
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d004      	beq.n	8001412 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001408:	1cbb      	adds	r3, r7, #2
 800140a:	881a      	ldrh	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001410:	e003      	b.n	800141a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001412:	1cbb      	adds	r3, r7, #2
 8001414:	881a      	ldrh	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	629a      	str	r2, [r3, #40]	; 0x28
}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	b002      	add	sp, #8
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	000a      	movs	r2, r1
 800142c:	1cbb      	adds	r3, r7, #2
 800142e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001436:	1cbb      	adds	r3, r7, #2
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	4013      	ands	r3, r2
 800143e:	041a      	lsls	r2, r3, #16
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	43db      	mvns	r3, r3
 8001444:	1cb9      	adds	r1, r7, #2
 8001446:	8809      	ldrh	r1, [r1, #0]
 8001448:	400b      	ands	r3, r1
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b004      	add	sp, #16
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e301      	b.n	8001a6e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2201      	movs	r2, #1
 8001470:	4013      	ands	r3, r2
 8001472:	d100      	bne.n	8001476 <HAL_RCC_OscConfig+0x1e>
 8001474:	e08d      	b.n	8001592 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001476:	4bc3      	ldr	r3, [pc, #780]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	220c      	movs	r2, #12
 800147c:	4013      	ands	r3, r2
 800147e:	2b04      	cmp	r3, #4
 8001480:	d00e      	beq.n	80014a0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001482:	4bc0      	ldr	r3, [pc, #768]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	220c      	movs	r2, #12
 8001488:	4013      	ands	r3, r2
 800148a:	2b08      	cmp	r3, #8
 800148c:	d116      	bne.n	80014bc <HAL_RCC_OscConfig+0x64>
 800148e:	4bbd      	ldr	r3, [pc, #756]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	025b      	lsls	r3, r3, #9
 8001496:	401a      	ands	r2, r3
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	025b      	lsls	r3, r3, #9
 800149c:	429a      	cmp	r2, r3
 800149e:	d10d      	bne.n	80014bc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a0:	4bb8      	ldr	r3, [pc, #736]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	029b      	lsls	r3, r3, #10
 80014a8:	4013      	ands	r3, r2
 80014aa:	d100      	bne.n	80014ae <HAL_RCC_OscConfig+0x56>
 80014ac:	e070      	b.n	8001590 <HAL_RCC_OscConfig+0x138>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d000      	beq.n	80014b8 <HAL_RCC_OscConfig+0x60>
 80014b6:	e06b      	b.n	8001590 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e2d8      	b.n	8001a6e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d107      	bne.n	80014d4 <HAL_RCC_OscConfig+0x7c>
 80014c4:	4baf      	ldr	r3, [pc, #700]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4bae      	ldr	r3, [pc, #696]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	0249      	lsls	r1, r1, #9
 80014ce:	430a      	orrs	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	e02f      	b.n	8001534 <HAL_RCC_OscConfig+0xdc>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10c      	bne.n	80014f6 <HAL_RCC_OscConfig+0x9e>
 80014dc:	4ba9      	ldr	r3, [pc, #676]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4ba8      	ldr	r3, [pc, #672]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 80014e2:	49a9      	ldr	r1, [pc, #676]	; (8001788 <HAL_RCC_OscConfig+0x330>)
 80014e4:	400a      	ands	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	4ba6      	ldr	r3, [pc, #664]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4ba5      	ldr	r3, [pc, #660]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 80014ee:	49a7      	ldr	r1, [pc, #668]	; (800178c <HAL_RCC_OscConfig+0x334>)
 80014f0:	400a      	ands	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	e01e      	b.n	8001534 <HAL_RCC_OscConfig+0xdc>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b05      	cmp	r3, #5
 80014fc:	d10e      	bne.n	800151c <HAL_RCC_OscConfig+0xc4>
 80014fe:	4ba1      	ldr	r3, [pc, #644]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4ba0      	ldr	r3, [pc, #640]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	02c9      	lsls	r1, r1, #11
 8001508:	430a      	orrs	r2, r1
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	4b9d      	ldr	r3, [pc, #628]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b9c      	ldr	r3, [pc, #624]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 8001512:	2180      	movs	r1, #128	; 0x80
 8001514:	0249      	lsls	r1, r1, #9
 8001516:	430a      	orrs	r2, r1
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	e00b      	b.n	8001534 <HAL_RCC_OscConfig+0xdc>
 800151c:	4b99      	ldr	r3, [pc, #612]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b98      	ldr	r3, [pc, #608]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 8001522:	4999      	ldr	r1, [pc, #612]	; (8001788 <HAL_RCC_OscConfig+0x330>)
 8001524:	400a      	ands	r2, r1
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	4b96      	ldr	r3, [pc, #600]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b95      	ldr	r3, [pc, #596]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 800152e:	4997      	ldr	r1, [pc, #604]	; (800178c <HAL_RCC_OscConfig+0x334>)
 8001530:	400a      	ands	r2, r1
 8001532:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d014      	beq.n	8001566 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fd02 	bl	8000f44 <HAL_GetTick>
 8001540:	0003      	movs	r3, r0
 8001542:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001546:	f7ff fcfd 	bl	8000f44 <HAL_GetTick>
 800154a:	0002      	movs	r2, r0
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b64      	cmp	r3, #100	; 0x64
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e28a      	b.n	8001a6e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001558:	4b8a      	ldr	r3, [pc, #552]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	029b      	lsls	r3, r3, #10
 8001560:	4013      	ands	r3, r2
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0xee>
 8001564:	e015      	b.n	8001592 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001566:	f7ff fced 	bl	8000f44 <HAL_GetTick>
 800156a:	0003      	movs	r3, r0
 800156c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff fce8 	bl	8000f44 <HAL_GetTick>
 8001574:	0002      	movs	r2, r0
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e275      	b.n	8001a6e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001582:	4b80      	ldr	r3, [pc, #512]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	029b      	lsls	r3, r3, #10
 800158a:	4013      	ands	r3, r2
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x118>
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001590:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2202      	movs	r2, #2
 8001598:	4013      	ands	r3, r2
 800159a:	d100      	bne.n	800159e <HAL_RCC_OscConfig+0x146>
 800159c:	e069      	b.n	8001672 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800159e:	4b79      	ldr	r3, [pc, #484]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	220c      	movs	r2, #12
 80015a4:	4013      	ands	r3, r2
 80015a6:	d00b      	beq.n	80015c0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015a8:	4b76      	ldr	r3, [pc, #472]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	220c      	movs	r2, #12
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d11c      	bne.n	80015ee <HAL_RCC_OscConfig+0x196>
 80015b4:	4b73      	ldr	r3, [pc, #460]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	025b      	lsls	r3, r3, #9
 80015bc:	4013      	ands	r3, r2
 80015be:	d116      	bne.n	80015ee <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c0:	4b70      	ldr	r3, [pc, #448]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2202      	movs	r2, #2
 80015c6:	4013      	ands	r3, r2
 80015c8:	d005      	beq.n	80015d6 <HAL_RCC_OscConfig+0x17e>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d001      	beq.n	80015d6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e24b      	b.n	8001a6e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d6:	4b6b      	ldr	r3, [pc, #428]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	22f8      	movs	r2, #248	; 0xf8
 80015dc:	4393      	bics	r3, r2
 80015de:	0019      	movs	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	00da      	lsls	r2, r3, #3
 80015e6:	4b67      	ldr	r3, [pc, #412]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 80015e8:	430a      	orrs	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ec:	e041      	b.n	8001672 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d024      	beq.n	8001640 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f6:	4b63      	ldr	r3, [pc, #396]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b62      	ldr	r3, [pc, #392]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 80015fc:	2101      	movs	r1, #1
 80015fe:	430a      	orrs	r2, r1
 8001600:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff fc9f 	bl	8000f44 <HAL_GetTick>
 8001606:	0003      	movs	r3, r0
 8001608:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800160c:	f7ff fc9a 	bl	8000f44 <HAL_GetTick>
 8001610:	0002      	movs	r2, r0
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e227      	b.n	8001a6e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161e:	4b59      	ldr	r3, [pc, #356]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2202      	movs	r2, #2
 8001624:	4013      	ands	r3, r2
 8001626:	d0f1      	beq.n	800160c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001628:	4b56      	ldr	r3, [pc, #344]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	22f8      	movs	r2, #248	; 0xf8
 800162e:	4393      	bics	r3, r2
 8001630:	0019      	movs	r1, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	00da      	lsls	r2, r3, #3
 8001638:	4b52      	ldr	r3, [pc, #328]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	e018      	b.n	8001672 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001640:	4b50      	ldr	r3, [pc, #320]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b4f      	ldr	r3, [pc, #316]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 8001646:	2101      	movs	r1, #1
 8001648:	438a      	bics	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fc7a 	bl	8000f44 <HAL_GetTick>
 8001650:	0003      	movs	r3, r0
 8001652:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001656:	f7ff fc75 	bl	8000f44 <HAL_GetTick>
 800165a:	0002      	movs	r2, r0
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e202      	b.n	8001a6e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001668:	4b46      	ldr	r3, [pc, #280]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2202      	movs	r2, #2
 800166e:	4013      	ands	r3, r2
 8001670:	d1f1      	bne.n	8001656 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2208      	movs	r2, #8
 8001678:	4013      	ands	r3, r2
 800167a:	d036      	beq.n	80016ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d019      	beq.n	80016b8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001684:	4b3f      	ldr	r3, [pc, #252]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 8001686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001688:	4b3e      	ldr	r3, [pc, #248]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 800168a:	2101      	movs	r1, #1
 800168c:	430a      	orrs	r2, r1
 800168e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001690:	f7ff fc58 	bl	8000f44 <HAL_GetTick>
 8001694:	0003      	movs	r3, r0
 8001696:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800169a:	f7ff fc53 	bl	8000f44 <HAL_GetTick>
 800169e:	0002      	movs	r2, r0
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e1e0      	b.n	8001a6e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ac:	4b35      	ldr	r3, [pc, #212]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	2202      	movs	r2, #2
 80016b2:	4013      	ands	r3, r2
 80016b4:	d0f1      	beq.n	800169a <HAL_RCC_OscConfig+0x242>
 80016b6:	e018      	b.n	80016ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b8:	4b32      	ldr	r3, [pc, #200]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 80016ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016bc:	4b31      	ldr	r3, [pc, #196]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 80016be:	2101      	movs	r1, #1
 80016c0:	438a      	bics	r2, r1
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c4:	f7ff fc3e 	bl	8000f44 <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ce:	f7ff fc39 	bl	8000f44 <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e1c6      	b.n	8001a6e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e0:	4b28      	ldr	r3, [pc, #160]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	2202      	movs	r2, #2
 80016e6:	4013      	ands	r3, r2
 80016e8:	d1f1      	bne.n	80016ce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2204      	movs	r2, #4
 80016f0:	4013      	ands	r3, r2
 80016f2:	d100      	bne.n	80016f6 <HAL_RCC_OscConfig+0x29e>
 80016f4:	e0b4      	b.n	8001860 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f6:	201f      	movs	r0, #31
 80016f8:	183b      	adds	r3, r7, r0
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fe:	4b21      	ldr	r3, [pc, #132]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 8001700:	69da      	ldr	r2, [r3, #28]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	055b      	lsls	r3, r3, #21
 8001706:	4013      	ands	r3, r2
 8001708:	d110      	bne.n	800172c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 800170c:	69da      	ldr	r2, [r3, #28]
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	0549      	lsls	r1, r1, #21
 8001714:	430a      	orrs	r2, r1
 8001716:	61da      	str	r2, [r3, #28]
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 800171a:	69da      	ldr	r2, [r3, #28]
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	055b      	lsls	r3, r3, #21
 8001720:	4013      	ands	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001726:	183b      	adds	r3, r7, r0
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_RCC_OscConfig+0x338>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4013      	ands	r3, r2
 8001736:	d11a      	bne.n	800176e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001738:	4b15      	ldr	r3, [pc, #84]	; (8001790 <HAL_RCC_OscConfig+0x338>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <HAL_RCC_OscConfig+0x338>)
 800173e:	2180      	movs	r1, #128	; 0x80
 8001740:	0049      	lsls	r1, r1, #1
 8001742:	430a      	orrs	r2, r1
 8001744:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001746:	f7ff fbfd 	bl	8000f44 <HAL_GetTick>
 800174a:	0003      	movs	r3, r0
 800174c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001750:	f7ff fbf8 	bl	8000f44 <HAL_GetTick>
 8001754:	0002      	movs	r2, r0
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	; 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e185      	b.n	8001a6e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_RCC_OscConfig+0x338>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4013      	ands	r3, r2
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d10e      	bne.n	8001794 <HAL_RCC_OscConfig+0x33c>
 8001776:	4b03      	ldr	r3, [pc, #12]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 8001778:	6a1a      	ldr	r2, [r3, #32]
 800177a:	4b02      	ldr	r3, [pc, #8]	; (8001784 <HAL_RCC_OscConfig+0x32c>)
 800177c:	2101      	movs	r1, #1
 800177e:	430a      	orrs	r2, r1
 8001780:	621a      	str	r2, [r3, #32]
 8001782:	e035      	b.n	80017f0 <HAL_RCC_OscConfig+0x398>
 8001784:	40021000 	.word	0x40021000
 8001788:	fffeffff 	.word	0xfffeffff
 800178c:	fffbffff 	.word	0xfffbffff
 8001790:	40007000 	.word	0x40007000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10c      	bne.n	80017b6 <HAL_RCC_OscConfig+0x35e>
 800179c:	4bb6      	ldr	r3, [pc, #728]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 800179e:	6a1a      	ldr	r2, [r3, #32]
 80017a0:	4bb5      	ldr	r3, [pc, #724]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80017a2:	2101      	movs	r1, #1
 80017a4:	438a      	bics	r2, r1
 80017a6:	621a      	str	r2, [r3, #32]
 80017a8:	4bb3      	ldr	r3, [pc, #716]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80017aa:	6a1a      	ldr	r2, [r3, #32]
 80017ac:	4bb2      	ldr	r3, [pc, #712]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80017ae:	2104      	movs	r1, #4
 80017b0:	438a      	bics	r2, r1
 80017b2:	621a      	str	r2, [r3, #32]
 80017b4:	e01c      	b.n	80017f0 <HAL_RCC_OscConfig+0x398>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b05      	cmp	r3, #5
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x380>
 80017be:	4bae      	ldr	r3, [pc, #696]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80017c0:	6a1a      	ldr	r2, [r3, #32]
 80017c2:	4bad      	ldr	r3, [pc, #692]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80017c4:	2104      	movs	r1, #4
 80017c6:	430a      	orrs	r2, r1
 80017c8:	621a      	str	r2, [r3, #32]
 80017ca:	4bab      	ldr	r3, [pc, #684]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80017cc:	6a1a      	ldr	r2, [r3, #32]
 80017ce:	4baa      	ldr	r3, [pc, #680]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80017d0:	2101      	movs	r1, #1
 80017d2:	430a      	orrs	r2, r1
 80017d4:	621a      	str	r2, [r3, #32]
 80017d6:	e00b      	b.n	80017f0 <HAL_RCC_OscConfig+0x398>
 80017d8:	4ba7      	ldr	r3, [pc, #668]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80017da:	6a1a      	ldr	r2, [r3, #32]
 80017dc:	4ba6      	ldr	r3, [pc, #664]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80017de:	2101      	movs	r1, #1
 80017e0:	438a      	bics	r2, r1
 80017e2:	621a      	str	r2, [r3, #32]
 80017e4:	4ba4      	ldr	r3, [pc, #656]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80017e6:	6a1a      	ldr	r2, [r3, #32]
 80017e8:	4ba3      	ldr	r3, [pc, #652]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80017ea:	2104      	movs	r1, #4
 80017ec:	438a      	bics	r2, r1
 80017ee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d014      	beq.n	8001822 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f8:	f7ff fba4 	bl	8000f44 <HAL_GetTick>
 80017fc:	0003      	movs	r3, r0
 80017fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001800:	e009      	b.n	8001816 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001802:	f7ff fb9f 	bl	8000f44 <HAL_GetTick>
 8001806:	0002      	movs	r2, r0
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	4a9b      	ldr	r2, [pc, #620]	; (8001a7c <HAL_RCC_OscConfig+0x624>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e12b      	b.n	8001a6e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001816:	4b98      	ldr	r3, [pc, #608]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	2202      	movs	r2, #2
 800181c:	4013      	ands	r3, r2
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x3aa>
 8001820:	e013      	b.n	800184a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001822:	f7ff fb8f 	bl	8000f44 <HAL_GetTick>
 8001826:	0003      	movs	r3, r0
 8001828:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182a:	e009      	b.n	8001840 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7ff fb8a 	bl	8000f44 <HAL_GetTick>
 8001830:	0002      	movs	r2, r0
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	4a91      	ldr	r2, [pc, #580]	; (8001a7c <HAL_RCC_OscConfig+0x624>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e116      	b.n	8001a6e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001840:	4b8d      	ldr	r3, [pc, #564]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	2202      	movs	r2, #2
 8001846:	4013      	ands	r3, r2
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800184a:	231f      	movs	r3, #31
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d105      	bne.n	8001860 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001854:	4b88      	ldr	r3, [pc, #544]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 8001856:	69da      	ldr	r2, [r3, #28]
 8001858:	4b87      	ldr	r3, [pc, #540]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 800185a:	4989      	ldr	r1, [pc, #548]	; (8001a80 <HAL_RCC_OscConfig+0x628>)
 800185c:	400a      	ands	r2, r1
 800185e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2210      	movs	r2, #16
 8001866:	4013      	ands	r3, r2
 8001868:	d063      	beq.n	8001932 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d12a      	bne.n	80018c8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001872:	4b81      	ldr	r3, [pc, #516]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 8001874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001876:	4b80      	ldr	r3, [pc, #512]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 8001878:	2104      	movs	r1, #4
 800187a:	430a      	orrs	r2, r1
 800187c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800187e:	4b7e      	ldr	r3, [pc, #504]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 8001880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001882:	4b7d      	ldr	r3, [pc, #500]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 8001884:	2101      	movs	r1, #1
 8001886:	430a      	orrs	r2, r1
 8001888:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188a:	f7ff fb5b 	bl	8000f44 <HAL_GetTick>
 800188e:	0003      	movs	r3, r0
 8001890:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001894:	f7ff fb56 	bl	8000f44 <HAL_GetTick>
 8001898:	0002      	movs	r2, r0
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e0e3      	b.n	8001a6e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018a6:	4b74      	ldr	r3, [pc, #464]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80018a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018aa:	2202      	movs	r2, #2
 80018ac:	4013      	ands	r3, r2
 80018ae:	d0f1      	beq.n	8001894 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018b0:	4b71      	ldr	r3, [pc, #452]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80018b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b4:	22f8      	movs	r2, #248	; 0xf8
 80018b6:	4393      	bics	r3, r2
 80018b8:	0019      	movs	r1, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	00da      	lsls	r2, r3, #3
 80018c0:	4b6d      	ldr	r3, [pc, #436]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80018c2:	430a      	orrs	r2, r1
 80018c4:	635a      	str	r2, [r3, #52]	; 0x34
 80018c6:	e034      	b.n	8001932 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	3305      	adds	r3, #5
 80018ce:	d111      	bne.n	80018f4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018d0:	4b69      	ldr	r3, [pc, #420]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80018d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018d4:	4b68      	ldr	r3, [pc, #416]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80018d6:	2104      	movs	r1, #4
 80018d8:	438a      	bics	r2, r1
 80018da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018dc:	4b66      	ldr	r3, [pc, #408]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80018de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e0:	22f8      	movs	r2, #248	; 0xf8
 80018e2:	4393      	bics	r3, r2
 80018e4:	0019      	movs	r1, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	00da      	lsls	r2, r3, #3
 80018ec:	4b62      	ldr	r3, [pc, #392]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80018ee:	430a      	orrs	r2, r1
 80018f0:	635a      	str	r2, [r3, #52]	; 0x34
 80018f2:	e01e      	b.n	8001932 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018f4:	4b60      	ldr	r3, [pc, #384]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80018f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f8:	4b5f      	ldr	r3, [pc, #380]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80018fa:	2104      	movs	r1, #4
 80018fc:	430a      	orrs	r2, r1
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001900:	4b5d      	ldr	r3, [pc, #372]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 8001902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001904:	4b5c      	ldr	r3, [pc, #368]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 8001906:	2101      	movs	r1, #1
 8001908:	438a      	bics	r2, r1
 800190a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190c:	f7ff fb1a 	bl	8000f44 <HAL_GetTick>
 8001910:	0003      	movs	r3, r0
 8001912:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001916:	f7ff fb15 	bl	8000f44 <HAL_GetTick>
 800191a:	0002      	movs	r2, r0
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e0a2      	b.n	8001a6e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001928:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 800192a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192c:	2202      	movs	r2, #2
 800192e:	4013      	ands	r3, r2
 8001930:	d1f1      	bne.n	8001916 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d100      	bne.n	800193c <HAL_RCC_OscConfig+0x4e4>
 800193a:	e097      	b.n	8001a6c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800193c:	4b4e      	ldr	r3, [pc, #312]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	220c      	movs	r2, #12
 8001942:	4013      	ands	r3, r2
 8001944:	2b08      	cmp	r3, #8
 8001946:	d100      	bne.n	800194a <HAL_RCC_OscConfig+0x4f2>
 8001948:	e06b      	b.n	8001a22 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d14c      	bne.n	80019ec <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001952:	4b49      	ldr	r3, [pc, #292]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	4b48      	ldr	r3, [pc, #288]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 8001958:	494a      	ldr	r1, [pc, #296]	; (8001a84 <HAL_RCC_OscConfig+0x62c>)
 800195a:	400a      	ands	r2, r1
 800195c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195e:	f7ff faf1 	bl	8000f44 <HAL_GetTick>
 8001962:	0003      	movs	r3, r0
 8001964:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff faec 	bl	8000f44 <HAL_GetTick>
 800196c:	0002      	movs	r2, r0
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e079      	b.n	8001a6e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197a:	4b3f      	ldr	r3, [pc, #252]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	049b      	lsls	r3, r3, #18
 8001982:	4013      	ands	r3, r2
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001986:	4b3c      	ldr	r3, [pc, #240]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	220f      	movs	r2, #15
 800198c:	4393      	bics	r3, r2
 800198e:	0019      	movs	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001994:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 8001996:	430a      	orrs	r2, r1
 8001998:	62da      	str	r2, [r3, #44]	; 0x2c
 800199a:	4b37      	ldr	r3, [pc, #220]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4a3a      	ldr	r2, [pc, #232]	; (8001a88 <HAL_RCC_OscConfig+0x630>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	0019      	movs	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	431a      	orrs	r2, r3
 80019ae:	4b32      	ldr	r3, [pc, #200]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80019b0:	430a      	orrs	r2, r1
 80019b2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b4:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b2f      	ldr	r3, [pc, #188]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80019ba:	2180      	movs	r1, #128	; 0x80
 80019bc:	0449      	lsls	r1, r1, #17
 80019be:	430a      	orrs	r2, r1
 80019c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7ff fabf 	bl	8000f44 <HAL_GetTick>
 80019c6:	0003      	movs	r3, r0
 80019c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff faba 	bl	8000f44 <HAL_GetTick>
 80019d0:	0002      	movs	r2, r0
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e047      	b.n	8001a6e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019de:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	049b      	lsls	r3, r3, #18
 80019e6:	4013      	ands	r3, r2
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x574>
 80019ea:	e03f      	b.n	8001a6c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ec:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 80019f2:	4924      	ldr	r1, [pc, #144]	; (8001a84 <HAL_RCC_OscConfig+0x62c>)
 80019f4:	400a      	ands	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f8:	f7ff faa4 	bl	8000f44 <HAL_GetTick>
 80019fc:	0003      	movs	r3, r0
 80019fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a02:	f7ff fa9f 	bl	8000f44 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e02c      	b.n	8001a6e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	049b      	lsls	r3, r3, #18
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d1f0      	bne.n	8001a02 <HAL_RCC_OscConfig+0x5aa>
 8001a20:	e024      	b.n	8001a6c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e01f      	b.n	8001a6e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_RCC_OscConfig+0x620>)
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	025b      	lsls	r3, r3, #9
 8001a40:	401a      	ands	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d10e      	bne.n	8001a68 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	220f      	movs	r2, #15
 8001a4e:	401a      	ands	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d107      	bne.n	8001a68 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	23f0      	movs	r3, #240	; 0xf0
 8001a5c:	039b      	lsls	r3, r3, #14
 8001a5e:	401a      	ands	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	0018      	movs	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b008      	add	sp, #32
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	00001388 	.word	0x00001388
 8001a80:	efffffff 	.word	0xefffffff
 8001a84:	feffffff 	.word	0xfeffffff
 8001a88:	ffc2ffff 	.word	0xffc2ffff

08001a8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0b3      	b.n	8001c08 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa0:	4b5b      	ldr	r3, [pc, #364]	; (8001c10 <HAL_RCC_ClockConfig+0x184>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d911      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	4b58      	ldr	r3, [pc, #352]	; (8001c10 <HAL_RCC_ClockConfig+0x184>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4393      	bics	r3, r2
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	4b55      	ldr	r3, [pc, #340]	; (8001c10 <HAL_RCC_ClockConfig+0x184>)
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac0:	4b53      	ldr	r3, [pc, #332]	; (8001c10 <HAL_RCC_ClockConfig+0x184>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d001      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e09a      	b.n	8001c08 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d015      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d006      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ae6:	4b4b      	ldr	r3, [pc, #300]	; (8001c14 <HAL_RCC_ClockConfig+0x188>)
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	4b4a      	ldr	r3, [pc, #296]	; (8001c14 <HAL_RCC_ClockConfig+0x188>)
 8001aec:	21e0      	movs	r1, #224	; 0xe0
 8001aee:	00c9      	lsls	r1, r1, #3
 8001af0:	430a      	orrs	r2, r1
 8001af2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af4:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <HAL_RCC_ClockConfig+0x188>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	22f0      	movs	r2, #240	; 0xf0
 8001afa:	4393      	bics	r3, r2
 8001afc:	0019      	movs	r1, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	4b44      	ldr	r3, [pc, #272]	; (8001c14 <HAL_RCC_ClockConfig+0x188>)
 8001b04:	430a      	orrs	r2, r1
 8001b06:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d040      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1a:	4b3e      	ldr	r3, [pc, #248]	; (8001c14 <HAL_RCC_ClockConfig+0x188>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	029b      	lsls	r3, r3, #10
 8001b22:	4013      	ands	r3, r2
 8001b24:	d114      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e06e      	b.n	8001c08 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d107      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b32:	4b38      	ldr	r3, [pc, #224]	; (8001c14 <HAL_RCC_ClockConfig+0x188>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	2380      	movs	r3, #128	; 0x80
 8001b38:	049b      	lsls	r3, r3, #18
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d108      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e062      	b.n	8001c08 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b42:	4b34      	ldr	r3, [pc, #208]	; (8001c14 <HAL_RCC_ClockConfig+0x188>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2202      	movs	r2, #2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e05b      	b.n	8001c08 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b50:	4b30      	ldr	r3, [pc, #192]	; (8001c14 <HAL_RCC_ClockConfig+0x188>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2203      	movs	r2, #3
 8001b56:	4393      	bics	r3, r2
 8001b58:	0019      	movs	r1, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_RCC_ClockConfig+0x188>)
 8001b60:	430a      	orrs	r2, r1
 8001b62:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b64:	f7ff f9ee 	bl	8000f44 <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6c:	e009      	b.n	8001b82 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6e:	f7ff f9e9 	bl	8000f44 <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	4a27      	ldr	r2, [pc, #156]	; (8001c18 <HAL_RCC_ClockConfig+0x18c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e042      	b.n	8001c08 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <HAL_RCC_ClockConfig+0x188>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	220c      	movs	r2, #12
 8001b88:	401a      	ands	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d1ec      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b94:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <HAL_RCC_ClockConfig+0x184>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d211      	bcs.n	8001bc6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_RCC_ClockConfig+0x184>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4393      	bics	r3, r2
 8001baa:	0019      	movs	r1, r3
 8001bac:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <HAL_RCC_ClockConfig+0x184>)
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <HAL_RCC_ClockConfig+0x184>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4013      	ands	r3, r2
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e020      	b.n	8001c08 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2204      	movs	r2, #4
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d009      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd0:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <HAL_RCC_ClockConfig+0x188>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a11      	ldr	r2, [pc, #68]	; (8001c1c <HAL_RCC_ClockConfig+0x190>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	0019      	movs	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_RCC_ClockConfig+0x188>)
 8001be0:	430a      	orrs	r2, r1
 8001be2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001be4:	f000 f820 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8001be8:	0001      	movs	r1, r0
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_RCC_ClockConfig+0x188>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	091b      	lsrs	r3, r3, #4
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <HAL_RCC_ClockConfig+0x194>)
 8001bf6:	5cd3      	ldrb	r3, [r2, r3]
 8001bf8:	000a      	movs	r2, r1
 8001bfa:	40da      	lsrs	r2, r3
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_RCC_ClockConfig+0x198>)
 8001bfe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c00:	2003      	movs	r0, #3
 8001c02:	f7ff f959 	bl	8000eb8 <HAL_InitTick>
  
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b004      	add	sp, #16
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40022000 	.word	0x40022000
 8001c14:	40021000 	.word	0x40021000
 8001c18:	00001388 	.word	0x00001388
 8001c1c:	fffff8ff 	.word	0xfffff8ff
 8001c20:	08002bac 	.word	0x08002bac
 8001c24:	20000020 	.word	0x20000020

08001c28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b08f      	sub	sp, #60	; 0x3c
 8001c2c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c2e:	2314      	movs	r3, #20
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	4a2b      	ldr	r2, [pc, #172]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c34:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c36:	c313      	stmia	r3!, {r0, r1, r4}
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	4a29      	ldr	r2, [pc, #164]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c40:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c42:	c313      	stmia	r3!, {r0, r1, r4}
 8001c44:	6812      	ldr	r2, [r2, #0]
 8001c46:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c50:	2300      	movs	r3, #0
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001c5c:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c64:	220c      	movs	r2, #12
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d002      	beq.n	8001c72 <HAL_RCC_GetSysClockFreq+0x4a>
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d003      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x50>
 8001c70:	e02d      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c72:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c76:	e02d      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7a:	0c9b      	lsrs	r3, r3, #18
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2214      	movs	r2, #20
 8001c82:	18ba      	adds	r2, r7, r2
 8001c84:	5cd3      	ldrb	r3, [r2, r3]
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	4013      	ands	r3, r2
 8001c90:	1d3a      	adds	r2, r7, #4
 8001c92:	5cd3      	ldrb	r3, [r2, r3]
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	025b      	lsls	r3, r3, #9
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d009      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ca0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ca2:	4812      	ldr	r0, [pc, #72]	; (8001cec <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ca4:	f7fe fa30 	bl	8000108 <__udivsi3>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	001a      	movs	r2, r3
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	4353      	muls	r3, r2
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8001cb2:	e009      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001cb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cb6:	000a      	movs	r2, r1
 8001cb8:	0152      	lsls	r2, r2, #5
 8001cba:	1a52      	subs	r2, r2, r1
 8001cbc:	0193      	lsls	r3, r2, #6
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	185b      	adds	r3, r3, r1
 8001cc4:	021b      	lsls	r3, r3, #8
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ccc:	e002      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cd2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b00f      	add	sp, #60	; 0x3c
 8001cdc:	bd90      	pop	{r4, r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	08002b8c 	.word	0x08002b8c
 8001ce4:	08002b9c 	.word	0x08002b9c
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	007a1200 	.word	0x007a1200

08001cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0a8      	b.n	8001e54 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d109      	bne.n	8001d1e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	2382      	movs	r3, #130	; 0x82
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d009      	beq.n	8001d2a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	61da      	str	r2, [r3, #28]
 8001d1c:	e005      	b.n	8001d2a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	225d      	movs	r2, #93	; 0x5d
 8001d34:	5c9b      	ldrb	r3, [r3, r2]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d107      	bne.n	8001d4c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	225c      	movs	r2, #92	; 0x5c
 8001d40:	2100      	movs	r1, #0
 8001d42:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	0018      	movs	r0, r3
 8001d48:	f7ff f80e 	bl	8000d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	225d      	movs	r2, #93	; 0x5d
 8001d50:	2102      	movs	r1, #2
 8001d52:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2140      	movs	r1, #64	; 0x40
 8001d60:	438a      	bics	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	23e0      	movs	r3, #224	; 0xe0
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d902      	bls.n	8001d76 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	e002      	b.n	8001d7c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	015b      	lsls	r3, r3, #5
 8001d7a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	23f0      	movs	r3, #240	; 0xf0
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d008      	beq.n	8001d9a <HAL_SPI_Init+0xaa>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	23e0      	movs	r3, #224	; 0xe0
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d002      	beq.n	8001d9a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	2382      	movs	r3, #130	; 0x82
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	401a      	ands	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6899      	ldr	r1, [r3, #8]
 8001da8:	2384      	movs	r3, #132	; 0x84
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	400b      	ands	r3, r1
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	2102      	movs	r1, #2
 8001db6:	400b      	ands	r3, r1
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	400b      	ands	r3, r1
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6999      	ldr	r1, [r3, #24]
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	400b      	ands	r3, r1
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	2138      	movs	r1, #56	; 0x38
 8001dd6:	400b      	ands	r3, r1
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	2180      	movs	r1, #128	; 0x80
 8001de0:	400b      	ands	r3, r1
 8001de2:	431a      	orrs	r2, r3
 8001de4:	0011      	movs	r1, r2
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	019b      	lsls	r3, r3, #6
 8001dee:	401a      	ands	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	0c1b      	lsrs	r3, r3, #16
 8001dfe:	2204      	movs	r2, #4
 8001e00:	401a      	ands	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	2110      	movs	r1, #16
 8001e08:	400b      	ands	r3, r1
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e10:	2108      	movs	r1, #8
 8001e12:	400b      	ands	r3, r1
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68d9      	ldr	r1, [r3, #12]
 8001e1a:	23f0      	movs	r3, #240	; 0xf0
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	400b      	ands	r3, r1
 8001e20:	431a      	orrs	r2, r3
 8001e22:	0011      	movs	r1, r2
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	015b      	lsls	r3, r3, #5
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	69da      	ldr	r2, [r3, #28]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4907      	ldr	r1, [pc, #28]	; (8001e5c <HAL_SPI_Init+0x16c>)
 8001e40:	400a      	ands	r2, r1
 8001e42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	225d      	movs	r2, #93	; 0x5d
 8001e4e:	2101      	movs	r1, #1
 8001e50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	0018      	movs	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b004      	add	sp, #16
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	fffff7ff 	.word	0xfffff7ff

08001e60 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	1dbb      	adds	r3, r7, #6
 8001e6e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e70:	231f      	movs	r3, #31
 8001e72:	18fb      	adds	r3, r7, r3
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	225c      	movs	r2, #92	; 0x5c
 8001e7c:	5c9b      	ldrb	r3, [r3, r2]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_SPI_Transmit+0x26>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e140      	b.n	8002108 <HAL_SPI_Transmit+0x2a8>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	225c      	movs	r2, #92	; 0x5c
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e8e:	f7ff f859 	bl	8000f44 <HAL_GetTick>
 8001e92:	0003      	movs	r3, r0
 8001e94:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001e96:	2316      	movs	r3, #22
 8001e98:	18fb      	adds	r3, r7, r3
 8001e9a:	1dba      	adds	r2, r7, #6
 8001e9c:	8812      	ldrh	r2, [r2, #0]
 8001e9e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	225d      	movs	r2, #93	; 0x5d
 8001ea4:	5c9b      	ldrb	r3, [r3, r2]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d004      	beq.n	8001eb6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001eac:	231f      	movs	r3, #31
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	701a      	strb	r2, [r3, #0]
    goto error;
 8001eb4:	e11d      	b.n	80020f2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_SPI_Transmit+0x64>
 8001ebc:	1dbb      	adds	r3, r7, #6
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d104      	bne.n	8001ece <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001ec4:	231f      	movs	r3, #31
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ecc:	e111      	b.n	80020f2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	225d      	movs	r2, #93	; 0x5d
 8001ed2:	2103      	movs	r1, #3
 8001ed4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1dba      	adds	r2, r7, #6
 8001ee6:	8812      	ldrh	r2, [r2, #0]
 8001ee8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1dba      	adds	r2, r7, #6
 8001eee:	8812      	ldrh	r2, [r2, #0]
 8001ef0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2244      	movs	r2, #68	; 0x44
 8001efc:	2100      	movs	r1, #0
 8001efe:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2246      	movs	r2, #70	; 0x46
 8001f04:	2100      	movs	r1, #0
 8001f06:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d110      	bne.n	8001f42 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2140      	movs	r1, #64	; 0x40
 8001f2c:	438a      	bics	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2180      	movs	r1, #128	; 0x80
 8001f3c:	01c9      	lsls	r1, r1, #7
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2240      	movs	r2, #64	; 0x40
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b40      	cmp	r3, #64	; 0x40
 8001f4e:	d007      	beq.n	8001f60 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2140      	movs	r1, #64	; 0x40
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	23e0      	movs	r3, #224	; 0xe0
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d94e      	bls.n	800200a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d004      	beq.n	8001f7e <HAL_SPI_Transmit+0x11e>
 8001f74:	2316      	movs	r3, #22
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d13f      	bne.n	8001ffe <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f82:	881a      	ldrh	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8e:	1c9a      	adds	r2, r3, #2
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001fa2:	e02c      	b.n	8001ffe <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2202      	movs	r2, #2
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d112      	bne.n	8001fd8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb6:	881a      	ldrh	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc2:	1c9a      	adds	r2, r3, #2
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001fd6:	e012      	b.n	8001ffe <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fd8:	f7fe ffb4 	bl	8000f44 <HAL_GetTick>
 8001fdc:	0002      	movs	r2, r0
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d802      	bhi.n	8001fee <HAL_SPI_Transmit+0x18e>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	3301      	adds	r3, #1
 8001fec:	d102      	bne.n	8001ff4 <HAL_SPI_Transmit+0x194>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d104      	bne.n	8001ffe <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8001ff4:	231f      	movs	r3, #31
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	701a      	strb	r2, [r3, #0]
          goto error;
 8001ffc:	e079      	b.n	80020f2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002002:	b29b      	uxth	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1cd      	bne.n	8001fa4 <HAL_SPI_Transmit+0x144>
 8002008:	e04f      	b.n	80020aa <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d004      	beq.n	800201c <HAL_SPI_Transmit+0x1bc>
 8002012:	2316      	movs	r3, #22
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d141      	bne.n	80020a0 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	330c      	adds	r3, #12
 8002026:	7812      	ldrb	r2, [r2, #0]
 8002028:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002038:	b29b      	uxth	r3, r3
 800203a:	3b01      	subs	r3, #1
 800203c:	b29a      	uxth	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002042:	e02d      	b.n	80020a0 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2202      	movs	r2, #2
 800204c:	4013      	ands	r3, r2
 800204e:	2b02      	cmp	r3, #2
 8002050:	d113      	bne.n	800207a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	330c      	adds	r3, #12
 800205c:	7812      	ldrb	r2, [r2, #0]
 800205e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800206e:	b29b      	uxth	r3, r3
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002078:	e012      	b.n	80020a0 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800207a:	f7fe ff63 	bl	8000f44 <HAL_GetTick>
 800207e:	0002      	movs	r2, r0
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d802      	bhi.n	8002090 <HAL_SPI_Transmit+0x230>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	3301      	adds	r3, #1
 800208e:	d102      	bne.n	8002096 <HAL_SPI_Transmit+0x236>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d104      	bne.n	80020a0 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8002096:	231f      	movs	r3, #31
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	2203      	movs	r2, #3
 800209c:	701a      	strb	r2, [r3, #0]
          goto error;
 800209e:	e028      	b.n	80020f2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1cc      	bne.n	8002044 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	6839      	ldr	r1, [r7, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f000 fce5 	bl	8002a80 <SPI_EndRxTxTransaction>
 80020b6:	1e03      	subs	r3, r0, #0
 80020b8:	d002      	beq.n	80020c0 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2220      	movs	r2, #32
 80020be:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10a      	bne.n	80020de <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d004      	beq.n	80020f0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80020e6:	231f      	movs	r3, #31
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
 80020ee:	e000      	b.n	80020f2 <HAL_SPI_Transmit+0x292>
  }

error:
 80020f0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	225d      	movs	r2, #93	; 0x5d
 80020f6:	2101      	movs	r1, #1
 80020f8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	225c      	movs	r2, #92	; 0x5c
 80020fe:	2100      	movs	r1, #0
 8002100:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002102:	231f      	movs	r3, #31
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	781b      	ldrb	r3, [r3, #0]
}
 8002108:	0018      	movs	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	b008      	add	sp, #32
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b089      	sub	sp, #36	; 0x24
 8002114:	af02      	add	r7, sp, #8
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	1dbb      	adds	r3, r7, #6
 800211e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002120:	2317      	movs	r3, #23
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	2382      	movs	r3, #130	; 0x82
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	429a      	cmp	r2, r3
 8002132:	d113      	bne.n	800215c <HAL_SPI_Receive+0x4c>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10f      	bne.n	800215c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	225d      	movs	r2, #93	; 0x5d
 8002140:	2104      	movs	r1, #4
 8002142:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002144:	1dbb      	adds	r3, r7, #6
 8002146:	881c      	ldrh	r4, [r3, #0]
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	0023      	movs	r3, r4
 8002154:	f000 f928 	bl	80023a8 <HAL_SPI_TransmitReceive>
 8002158:	0003      	movs	r3, r0
 800215a:	e11c      	b.n	8002396 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	225c      	movs	r2, #92	; 0x5c
 8002160:	5c9b      	ldrb	r3, [r3, r2]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_SPI_Receive+0x5a>
 8002166:	2302      	movs	r3, #2
 8002168:	e115      	b.n	8002396 <HAL_SPI_Receive+0x286>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	225c      	movs	r2, #92	; 0x5c
 800216e:	2101      	movs	r1, #1
 8002170:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002172:	f7fe fee7 	bl	8000f44 <HAL_GetTick>
 8002176:	0003      	movs	r3, r0
 8002178:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	225d      	movs	r2, #93	; 0x5d
 800217e:	5c9b      	ldrb	r3, [r3, r2]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b01      	cmp	r3, #1
 8002184:	d004      	beq.n	8002190 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002186:	2317      	movs	r3, #23
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	2202      	movs	r2, #2
 800218c:	701a      	strb	r2, [r3, #0]
    goto error;
 800218e:	e0f7      	b.n	8002380 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_SPI_Receive+0x8e>
 8002196:	1dbb      	adds	r3, r7, #6
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d104      	bne.n	80021a8 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800219e:	2317      	movs	r3, #23
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	2201      	movs	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]
    goto error;
 80021a6:	e0eb      	b.n	8002380 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	225d      	movs	r2, #93	; 0x5d
 80021ac:	2104      	movs	r1, #4
 80021ae:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1dba      	adds	r2, r7, #6
 80021c0:	2144      	movs	r1, #68	; 0x44
 80021c2:	8812      	ldrh	r2, [r2, #0]
 80021c4:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1dba      	adds	r2, r7, #6
 80021ca:	2146      	movs	r1, #70	; 0x46
 80021cc:	8812      	ldrh	r2, [r2, #0]
 80021ce:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	23e0      	movs	r3, #224	; 0xe0
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d908      	bls.n	800220c <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4966      	ldr	r1, [pc, #408]	; (80023a0 <HAL_SPI_Receive+0x290>)
 8002206:	400a      	ands	r2, r1
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	e008      	b.n	800221e <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2180      	movs	r1, #128	; 0x80
 8002218:	0149      	lsls	r1, r1, #5
 800221a:	430a      	orrs	r2, r1
 800221c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	429a      	cmp	r2, r3
 8002228:	d10f      	bne.n	800224a <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2140      	movs	r1, #64	; 0x40
 8002236:	438a      	bics	r2, r1
 8002238:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4957      	ldr	r1, [pc, #348]	; (80023a4 <HAL_SPI_Receive+0x294>)
 8002246:	400a      	ands	r2, r1
 8002248:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2240      	movs	r2, #64	; 0x40
 8002252:	4013      	ands	r3, r2
 8002254:	2b40      	cmp	r3, #64	; 0x40
 8002256:	d007      	beq.n	8002268 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2140      	movs	r1, #64	; 0x40
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	23e0      	movs	r3, #224	; 0xe0
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	429a      	cmp	r2, r3
 8002272:	d900      	bls.n	8002276 <HAL_SPI_Receive+0x166>
 8002274:	e069      	b.n	800234a <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002276:	e031      	b.n	80022dc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2201      	movs	r2, #1
 8002280:	4013      	ands	r3, r2
 8002282:	2b01      	cmp	r3, #1
 8002284:	d117      	bne.n	80022b6 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	330c      	adds	r3, #12
 800228c:	001a      	movs	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	7812      	ldrb	r2, [r2, #0]
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2246      	movs	r2, #70	; 0x46
 80022a6:	5a9b      	ldrh	r3, [r3, r2]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b299      	uxth	r1, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2246      	movs	r2, #70	; 0x46
 80022b2:	5299      	strh	r1, [r3, r2]
 80022b4:	e012      	b.n	80022dc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022b6:	f7fe fe45 	bl	8000f44 <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d802      	bhi.n	80022cc <HAL_SPI_Receive+0x1bc>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	3301      	adds	r3, #1
 80022ca:	d102      	bne.n	80022d2 <HAL_SPI_Receive+0x1c2>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d104      	bne.n	80022dc <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80022d2:	2317      	movs	r3, #23
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	2203      	movs	r2, #3
 80022d8:	701a      	strb	r2, [r3, #0]
          goto error;
 80022da:	e051      	b.n	8002380 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2246      	movs	r2, #70	; 0x46
 80022e0:	5a9b      	ldrh	r3, [r3, r2]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1c7      	bne.n	8002278 <HAL_SPI_Receive+0x168>
 80022e8:	e035      	b.n	8002356 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2201      	movs	r2, #1
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d115      	bne.n	8002324 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	b292      	uxth	r2, r2
 8002304:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	1c9a      	adds	r2, r3, #2
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2246      	movs	r2, #70	; 0x46
 8002314:	5a9b      	ldrh	r3, [r3, r2]
 8002316:	b29b      	uxth	r3, r3
 8002318:	3b01      	subs	r3, #1
 800231a:	b299      	uxth	r1, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2246      	movs	r2, #70	; 0x46
 8002320:	5299      	strh	r1, [r3, r2]
 8002322:	e012      	b.n	800234a <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002324:	f7fe fe0e 	bl	8000f44 <HAL_GetTick>
 8002328:	0002      	movs	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d802      	bhi.n	800233a <HAL_SPI_Receive+0x22a>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	3301      	adds	r3, #1
 8002338:	d102      	bne.n	8002340 <HAL_SPI_Receive+0x230>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d104      	bne.n	800234a <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002340:	2317      	movs	r3, #23
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	2203      	movs	r2, #3
 8002346:	701a      	strb	r2, [r3, #0]
          goto error;
 8002348:	e01a      	b.n	8002380 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2246      	movs	r2, #70	; 0x46
 800234e:	5a9b      	ldrh	r3, [r3, r2]
 8002350:	b29b      	uxth	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1c9      	bne.n	80022ea <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	6839      	ldr	r1, [r7, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	0018      	movs	r0, r3
 800235e:	f000 fb31 	bl	80029c4 <SPI_EndRxTransaction>
 8002362:	1e03      	subs	r3, r0, #0
 8002364:	d002      	beq.n	800236c <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2220      	movs	r2, #32
 800236a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002370:	2b00      	cmp	r3, #0
 8002372:	d004      	beq.n	800237e <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8002374:	2317      	movs	r3, #23
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	2201      	movs	r2, #1
 800237a:	701a      	strb	r2, [r3, #0]
 800237c:	e000      	b.n	8002380 <HAL_SPI_Receive+0x270>
  }

error :
 800237e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	225d      	movs	r2, #93	; 0x5d
 8002384:	2101      	movs	r1, #1
 8002386:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	225c      	movs	r2, #92	; 0x5c
 800238c:	2100      	movs	r1, #0
 800238e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002390:	2317      	movs	r3, #23
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	781b      	ldrb	r3, [r3, #0]
}
 8002396:	0018      	movs	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	b007      	add	sp, #28
 800239c:	bd90      	pop	{r4, r7, pc}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	ffffefff 	.word	0xffffefff
 80023a4:	ffffbfff 	.word	0xffffbfff

080023a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
 80023b4:	001a      	movs	r2, r3
 80023b6:	1cbb      	adds	r3, r7, #2
 80023b8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80023ba:	2301      	movs	r3, #1
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023be:	2323      	movs	r3, #35	; 0x23
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	225c      	movs	r2, #92	; 0x5c
 80023ca:	5c9b      	ldrb	r3, [r3, r2]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_SPI_TransmitReceive+0x2c>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e1b5      	b.n	8002740 <HAL_SPI_TransmitReceive+0x398>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	225c      	movs	r2, #92	; 0x5c
 80023d8:	2101      	movs	r1, #1
 80023da:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023dc:	f7fe fdb2 	bl	8000f44 <HAL_GetTick>
 80023e0:	0003      	movs	r3, r0
 80023e2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023e4:	201b      	movs	r0, #27
 80023e6:	183b      	adds	r3, r7, r0
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	215d      	movs	r1, #93	; 0x5d
 80023ec:	5c52      	ldrb	r2, [r2, r1]
 80023ee:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80023f6:	2312      	movs	r3, #18
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	1cba      	adds	r2, r7, #2
 80023fc:	8812      	ldrh	r2, [r2, #0]
 80023fe:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002400:	183b      	adds	r3, r7, r0
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d011      	beq.n	800242c <HAL_SPI_TransmitReceive+0x84>
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	2382      	movs	r3, #130	; 0x82
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	429a      	cmp	r2, r3
 8002410:	d107      	bne.n	8002422 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d103      	bne.n	8002422 <HAL_SPI_TransmitReceive+0x7a>
 800241a:	183b      	adds	r3, r7, r0
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b04      	cmp	r3, #4
 8002420:	d004      	beq.n	800242c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002422:	2323      	movs	r3, #35	; 0x23
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	2202      	movs	r2, #2
 8002428:	701a      	strb	r2, [r3, #0]
    goto error;
 800242a:	e17e      	b.n	800272a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d006      	beq.n	8002440 <HAL_SPI_TransmitReceive+0x98>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_SPI_TransmitReceive+0x98>
 8002438:	1cbb      	adds	r3, r7, #2
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d104      	bne.n	800244a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002440:	2323      	movs	r3, #35	; 0x23
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	2201      	movs	r2, #1
 8002446:	701a      	strb	r2, [r3, #0]
    goto error;
 8002448:	e16f      	b.n	800272a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	225d      	movs	r2, #93	; 0x5d
 800244e:	5c9b      	ldrb	r3, [r3, r2]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b04      	cmp	r3, #4
 8002454:	d003      	beq.n	800245e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	225d      	movs	r2, #93	; 0x5d
 800245a:	2105      	movs	r1, #5
 800245c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1cba      	adds	r2, r7, #2
 800246e:	2146      	movs	r1, #70	; 0x46
 8002470:	8812      	ldrh	r2, [r2, #0]
 8002472:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1cba      	adds	r2, r7, #2
 8002478:	2144      	movs	r1, #68	; 0x44
 800247a:	8812      	ldrh	r2, [r2, #0]
 800247c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1cba      	adds	r2, r7, #2
 8002488:	8812      	ldrh	r2, [r2, #0]
 800248a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1cba      	adds	r2, r7, #2
 8002490:	8812      	ldrh	r2, [r2, #0]
 8002492:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	23e0      	movs	r3, #224	; 0xe0
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d908      	bls.n	80024be <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	49a4      	ldr	r1, [pc, #656]	; (8002748 <HAL_SPI_TransmitReceive+0x3a0>)
 80024b8:	400a      	ands	r2, r1
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	e008      	b.n	80024d0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2180      	movs	r1, #128	; 0x80
 80024ca:	0149      	lsls	r1, r1, #5
 80024cc:	430a      	orrs	r2, r1
 80024ce:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2240      	movs	r2, #64	; 0x40
 80024d8:	4013      	ands	r3, r2
 80024da:	2b40      	cmp	r3, #64	; 0x40
 80024dc:	d007      	beq.n	80024ee <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2140      	movs	r1, #64	; 0x40
 80024ea:	430a      	orrs	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	23e0      	movs	r3, #224	; 0xe0
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d800      	bhi.n	80024fc <HAL_SPI_TransmitReceive+0x154>
 80024fa:	e07f      	b.n	80025fc <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_SPI_TransmitReceive+0x168>
 8002504:	2312      	movs	r3, #18
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d000      	beq.n	8002510 <HAL_SPI_TransmitReceive+0x168>
 800250e:	e069      	b.n	80025e4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	881a      	ldrh	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002520:	1c9a      	adds	r2, r3, #2
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002534:	e056      	b.n	80025e4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2202      	movs	r2, #2
 800253e:	4013      	ands	r3, r2
 8002540:	2b02      	cmp	r3, #2
 8002542:	d11b      	bne.n	800257c <HAL_SPI_TransmitReceive+0x1d4>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d016      	beq.n	800257c <HAL_SPI_TransmitReceive+0x1d4>
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	2b01      	cmp	r3, #1
 8002552:	d113      	bne.n	800257c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002558:	881a      	ldrh	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	1c9a      	adds	r2, r3, #2
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800256e:	b29b      	uxth	r3, r3
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2201      	movs	r2, #1
 8002584:	4013      	ands	r3, r2
 8002586:	2b01      	cmp	r3, #1
 8002588:	d11c      	bne.n	80025c4 <HAL_SPI_TransmitReceive+0x21c>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2246      	movs	r2, #70	; 0x46
 800258e:	5a9b      	ldrh	r3, [r3, r2]
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d016      	beq.n	80025c4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	b292      	uxth	r2, r2
 80025a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	1c9a      	adds	r2, r3, #2
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2246      	movs	r2, #70	; 0x46
 80025b2:	5a9b      	ldrh	r3, [r3, r2]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b299      	uxth	r1, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2246      	movs	r2, #70	; 0x46
 80025be:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025c0:	2301      	movs	r3, #1
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025c4:	f7fe fcbe 	bl	8000f44 <HAL_GetTick>
 80025c8:	0002      	movs	r2, r0
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d807      	bhi.n	80025e4 <HAL_SPI_TransmitReceive+0x23c>
 80025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d6:	3301      	adds	r3, #1
 80025d8:	d004      	beq.n	80025e4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80025da:	2323      	movs	r3, #35	; 0x23
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	2203      	movs	r2, #3
 80025e0:	701a      	strb	r2, [r3, #0]
        goto error;
 80025e2:	e0a2      	b.n	800272a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1a3      	bne.n	8002536 <HAL_SPI_TransmitReceive+0x18e>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2246      	movs	r2, #70	; 0x46
 80025f2:	5a9b      	ldrh	r3, [r3, r2]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d19d      	bne.n	8002536 <HAL_SPI_TransmitReceive+0x18e>
 80025fa:	e085      	b.n	8002708 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_SPI_TransmitReceive+0x268>
 8002604:	2312      	movs	r3, #18
 8002606:	18fb      	adds	r3, r7, r3
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d000      	beq.n	8002610 <HAL_SPI_TransmitReceive+0x268>
 800260e:	e070      	b.n	80026f2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	330c      	adds	r3, #12
 800261a:	7812      	ldrb	r2, [r2, #0]
 800261c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002636:	e05c      	b.n	80026f2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2202      	movs	r2, #2
 8002640:	4013      	ands	r3, r2
 8002642:	2b02      	cmp	r3, #2
 8002644:	d11c      	bne.n	8002680 <HAL_SPI_TransmitReceive+0x2d8>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800264a:	b29b      	uxth	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d017      	beq.n	8002680 <HAL_SPI_TransmitReceive+0x2d8>
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	2b01      	cmp	r3, #1
 8002654:	d114      	bne.n	8002680 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	330c      	adds	r3, #12
 8002660:	7812      	ldrb	r2, [r2, #0]
 8002662:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2201      	movs	r2, #1
 8002688:	4013      	ands	r3, r2
 800268a:	2b01      	cmp	r3, #1
 800268c:	d11e      	bne.n	80026cc <HAL_SPI_TransmitReceive+0x324>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2246      	movs	r2, #70	; 0x46
 8002692:	5a9b      	ldrh	r3, [r3, r2]
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d018      	beq.n	80026cc <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	330c      	adds	r3, #12
 80026a0:	001a      	movs	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	7812      	ldrb	r2, [r2, #0]
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2246      	movs	r2, #70	; 0x46
 80026ba:	5a9b      	ldrh	r3, [r3, r2]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b299      	uxth	r1, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2246      	movs	r2, #70	; 0x46
 80026c6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026c8:	2301      	movs	r3, #1
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026cc:	f7fe fc3a 	bl	8000f44 <HAL_GetTick>
 80026d0:	0002      	movs	r2, r0
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d8:	429a      	cmp	r2, r3
 80026da:	d802      	bhi.n	80026e2 <HAL_SPI_TransmitReceive+0x33a>
 80026dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026de:	3301      	adds	r3, #1
 80026e0:	d102      	bne.n	80026e8 <HAL_SPI_TransmitReceive+0x340>
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d104      	bne.n	80026f2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80026e8:	2323      	movs	r3, #35	; 0x23
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	2203      	movs	r2, #3
 80026ee:	701a      	strb	r2, [r3, #0]
        goto error;
 80026f0:	e01b      	b.n	800272a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d19d      	bne.n	8002638 <HAL_SPI_TransmitReceive+0x290>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2246      	movs	r2, #70	; 0x46
 8002700:	5a9b      	ldrh	r3, [r3, r2]
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d197      	bne.n	8002638 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002708:	69fa      	ldr	r2, [r7, #28]
 800270a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	0018      	movs	r0, r3
 8002710:	f000 f9b6 	bl	8002a80 <SPI_EndRxTxTransaction>
 8002714:	1e03      	subs	r3, r0, #0
 8002716:	d007      	beq.n	8002728 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002718:	2323      	movs	r3, #35	; 0x23
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	661a      	str	r2, [r3, #96]	; 0x60
 8002726:	e000      	b.n	800272a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002728:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	225d      	movs	r2, #93	; 0x5d
 800272e:	2101      	movs	r1, #1
 8002730:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	225c      	movs	r2, #92	; 0x5c
 8002736:	2100      	movs	r1, #0
 8002738:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800273a:	2323      	movs	r3, #35	; 0x23
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	781b      	ldrb	r3, [r3, #0]
}
 8002740:	0018      	movs	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	b00a      	add	sp, #40	; 0x28
 8002746:	bd80      	pop	{r7, pc}
 8002748:	ffffefff 	.word	0xffffefff

0800274c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	225d      	movs	r2, #93	; 0x5d
 8002758:	5c9b      	ldrb	r3, [r3, r2]
 800275a:	b2db      	uxtb	r3, r3
}
 800275c:	0018      	movs	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	b002      	add	sp, #8
 8002762:	bd80      	pop	{r7, pc}

08002764 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	1dfb      	adds	r3, r7, #7
 8002772:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002774:	f7fe fbe6 	bl	8000f44 <HAL_GetTick>
 8002778:	0002      	movs	r2, r0
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	18d3      	adds	r3, r2, r3
 8002782:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002784:	f7fe fbde 	bl	8000f44 <HAL_GetTick>
 8002788:	0003      	movs	r3, r0
 800278a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800278c:	4b3a      	ldr	r3, [pc, #232]	; (8002878 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	015b      	lsls	r3, r3, #5
 8002792:	0d1b      	lsrs	r3, r3, #20
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	4353      	muls	r3, r2
 8002798:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800279a:	e058      	b.n	800284e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	3301      	adds	r3, #1
 80027a0:	d055      	beq.n	800284e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027a2:	f7fe fbcf 	bl	8000f44 <HAL_GetTick>
 80027a6:	0002      	movs	r2, r0
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d902      	bls.n	80027b8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d142      	bne.n	800283e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	21e0      	movs	r1, #224	; 0xe0
 80027c4:	438a      	bics	r2, r1
 80027c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	2382      	movs	r3, #130	; 0x82
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d113      	bne.n	80027fc <SPI_WaitFlagStateUntilTimeout+0x98>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	429a      	cmp	r2, r3
 80027de:	d005      	beq.n	80027ec <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d107      	bne.n	80027fc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2140      	movs	r1, #64	; 0x40
 80027f8:	438a      	bics	r2, r1
 80027fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	019b      	lsls	r3, r3, #6
 8002804:	429a      	cmp	r2, r3
 8002806:	d110      	bne.n	800282a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	491a      	ldr	r1, [pc, #104]	; (800287c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002814:	400a      	ands	r2, r1
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2180      	movs	r1, #128	; 0x80
 8002824:	0189      	lsls	r1, r1, #6
 8002826:	430a      	orrs	r2, r1
 8002828:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	225d      	movs	r2, #93	; 0x5d
 800282e:	2101      	movs	r1, #1
 8002830:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	225c      	movs	r2, #92	; 0x5c
 8002836:	2100      	movs	r1, #0
 8002838:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e017      	b.n	800286e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	3b01      	subs	r3, #1
 800284c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	4013      	ands	r3, r2
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	425a      	negs	r2, r3
 800285e:	4153      	adcs	r3, r2
 8002860:	b2db      	uxtb	r3, r3
 8002862:	001a      	movs	r2, r3
 8002864:	1dfb      	adds	r3, r7, #7
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d197      	bne.n	800279c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	0018      	movs	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	b008      	add	sp, #32
 8002874:	bd80      	pop	{r7, pc}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	20000020 	.word	0x20000020
 800287c:	ffffdfff 	.word	0xffffdfff

08002880 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	; 0x28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800288e:	2317      	movs	r3, #23
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002896:	f7fe fb55 	bl	8000f44 <HAL_GetTick>
 800289a:	0002      	movs	r2, r0
 800289c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	18d3      	adds	r3, r2, r3
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80028a6:	f7fe fb4d 	bl	8000f44 <HAL_GetTick>
 80028aa:	0003      	movs	r3, r0
 80028ac:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	330c      	adds	r3, #12
 80028b4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80028b6:	4b41      	ldr	r3, [pc, #260]	; (80029bc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	0013      	movs	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	189b      	adds	r3, r3, r2
 80028c0:	00da      	lsls	r2, r3, #3
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	0d1b      	lsrs	r3, r3, #20
 80028c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c8:	4353      	muls	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80028cc:	e068      	b.n	80029a0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	23c0      	movs	r3, #192	; 0xc0
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d10a      	bne.n	80028ee <SPI_WaitFifoStateUntilTimeout+0x6e>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d107      	bne.n	80028ee <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	2117      	movs	r1, #23
 80028e6:	187b      	adds	r3, r7, r1
 80028e8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80028ea:	187b      	adds	r3, r7, r1
 80028ec:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	d055      	beq.n	80029a0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028f4:	f7fe fb26 	bl	8000f44 <HAL_GetTick>
 80028f8:	0002      	movs	r2, r0
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002900:	429a      	cmp	r2, r3
 8002902:	d902      	bls.n	800290a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	2b00      	cmp	r3, #0
 8002908:	d142      	bne.n	8002990 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	21e0      	movs	r1, #224	; 0xe0
 8002916:	438a      	bics	r2, r1
 8002918:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	2382      	movs	r3, #130	; 0x82
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	429a      	cmp	r2, r3
 8002924:	d113      	bne.n	800294e <SPI_WaitFifoStateUntilTimeout+0xce>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	2380      	movs	r3, #128	; 0x80
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	429a      	cmp	r2, r3
 8002930:	d005      	beq.n	800293e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	429a      	cmp	r2, r3
 800293c:	d107      	bne.n	800294e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2140      	movs	r1, #64	; 0x40
 800294a:	438a      	bics	r2, r1
 800294c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	019b      	lsls	r3, r3, #6
 8002956:	429a      	cmp	r2, r3
 8002958:	d110      	bne.n	800297c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4916      	ldr	r1, [pc, #88]	; (80029c0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002966:	400a      	ands	r2, r1
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2180      	movs	r1, #128	; 0x80
 8002976:	0189      	lsls	r1, r1, #6
 8002978:	430a      	orrs	r2, r1
 800297a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	225d      	movs	r2, #93	; 0x5d
 8002980:	2101      	movs	r1, #1
 8002982:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	225c      	movs	r2, #92	; 0x5c
 8002988:	2100      	movs	r1, #0
 800298a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e010      	b.n	80029b2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	3b01      	subs	r3, #1
 800299e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	4013      	ands	r3, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d18e      	bne.n	80028ce <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	0018      	movs	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b00a      	add	sp, #40	; 0x28
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	20000020 	.word	0x20000020
 80029c0:	ffffdfff 	.word	0xffffdfff

080029c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	2382      	movs	r3, #130	; 0x82
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	429a      	cmp	r2, r3
 80029da:	d113      	bne.n	8002a04 <SPI_EndRxTransaction+0x40>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d005      	beq.n	80029f4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d107      	bne.n	8002a04 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2140      	movs	r1, #64	; 0x40
 8002a00:	438a      	bics	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	0013      	movs	r3, r2
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2180      	movs	r1, #128	; 0x80
 8002a12:	f7ff fea7 	bl	8002764 <SPI_WaitFlagStateUntilTimeout>
 8002a16:	1e03      	subs	r3, r0, #0
 8002a18:	d007      	beq.n	8002a2a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1e:	2220      	movs	r2, #32
 8002a20:	431a      	orrs	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e026      	b.n	8002a78 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	2382      	movs	r3, #130	; 0x82
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d11f      	bne.n	8002a76 <SPI_EndRxTransaction+0xb2>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	021b      	lsls	r3, r3, #8
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d005      	beq.n	8002a4e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d113      	bne.n	8002a76 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	23c0      	movs	r3, #192	; 0xc0
 8002a52:	00d9      	lsls	r1, r3, #3
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	0013      	movs	r3, r2
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f7ff ff0f 	bl	8002880 <SPI_WaitFifoStateUntilTimeout>
 8002a62:	1e03      	subs	r3, r0, #0
 8002a64:	d007      	beq.n	8002a76 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e000      	b.n	8002a78 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b004      	add	sp, #16
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	23c0      	movs	r3, #192	; 0xc0
 8002a90:	0159      	lsls	r1, r3, #5
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	0013      	movs	r3, r2
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f7ff fef0 	bl	8002880 <SPI_WaitFifoStateUntilTimeout>
 8002aa0:	1e03      	subs	r3, r0, #0
 8002aa2:	d007      	beq.n	8002ab4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e027      	b.n	8002b04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	0013      	movs	r3, r2
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2180      	movs	r1, #128	; 0x80
 8002ac2:	f7ff fe4f 	bl	8002764 <SPI_WaitFlagStateUntilTimeout>
 8002ac6:	1e03      	subs	r3, r0, #0
 8002ac8:	d007      	beq.n	8002ada <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ace:	2220      	movs	r2, #32
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e014      	b.n	8002b04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	23c0      	movs	r3, #192	; 0xc0
 8002ade:	00d9      	lsls	r1, r3, #3
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	0013      	movs	r3, r2
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f7ff fec9 	bl	8002880 <SPI_WaitFifoStateUntilTimeout>
 8002aee:	1e03      	subs	r3, r0, #0
 8002af0:	d007      	beq.n	8002b02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af6:	2220      	movs	r2, #32
 8002af8:	431a      	orrs	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e000      	b.n	8002b04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	0018      	movs	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b004      	add	sp, #16
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <__libc_init_array>:
 8002b0c:	b570      	push	{r4, r5, r6, lr}
 8002b0e:	2600      	movs	r6, #0
 8002b10:	4d0c      	ldr	r5, [pc, #48]	; (8002b44 <__libc_init_array+0x38>)
 8002b12:	4c0d      	ldr	r4, [pc, #52]	; (8002b48 <__libc_init_array+0x3c>)
 8002b14:	1b64      	subs	r4, r4, r5
 8002b16:	10a4      	asrs	r4, r4, #2
 8002b18:	42a6      	cmp	r6, r4
 8002b1a:	d109      	bne.n	8002b30 <__libc_init_array+0x24>
 8002b1c:	2600      	movs	r6, #0
 8002b1e:	f000 f821 	bl	8002b64 <_init>
 8002b22:	4d0a      	ldr	r5, [pc, #40]	; (8002b4c <__libc_init_array+0x40>)
 8002b24:	4c0a      	ldr	r4, [pc, #40]	; (8002b50 <__libc_init_array+0x44>)
 8002b26:	1b64      	subs	r4, r4, r5
 8002b28:	10a4      	asrs	r4, r4, #2
 8002b2a:	42a6      	cmp	r6, r4
 8002b2c:	d105      	bne.n	8002b3a <__libc_init_array+0x2e>
 8002b2e:	bd70      	pop	{r4, r5, r6, pc}
 8002b30:	00b3      	lsls	r3, r6, #2
 8002b32:	58eb      	ldr	r3, [r5, r3]
 8002b34:	4798      	blx	r3
 8002b36:	3601      	adds	r6, #1
 8002b38:	e7ee      	b.n	8002b18 <__libc_init_array+0xc>
 8002b3a:	00b3      	lsls	r3, r6, #2
 8002b3c:	58eb      	ldr	r3, [r5, r3]
 8002b3e:	4798      	blx	r3
 8002b40:	3601      	adds	r6, #1
 8002b42:	e7f2      	b.n	8002b2a <__libc_init_array+0x1e>
 8002b44:	08002bbc 	.word	0x08002bbc
 8002b48:	08002bbc 	.word	0x08002bbc
 8002b4c:	08002bbc 	.word	0x08002bbc
 8002b50:	08002bc0 	.word	0x08002bc0

08002b54 <memset>:
 8002b54:	0003      	movs	r3, r0
 8002b56:	1882      	adds	r2, r0, r2
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d100      	bne.n	8002b5e <memset+0xa>
 8002b5c:	4770      	bx	lr
 8002b5e:	7019      	strb	r1, [r3, #0]
 8002b60:	3301      	adds	r3, #1
 8002b62:	e7f9      	b.n	8002b58 <memset+0x4>

08002b64 <_init>:
 8002b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b6a:	bc08      	pop	{r3}
 8002b6c:	469e      	mov	lr, r3
 8002b6e:	4770      	bx	lr

08002b70 <_fini>:
 8002b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b76:	bc08      	pop	{r3}
 8002b78:	469e      	mov	lr, r3
 8002b7a:	4770      	bx	lr
