
NRF24_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000373c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080037fc  080037fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800385c  0800385c  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  0800385c  0800385c  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800385c  0800385c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000002c  08003890  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003890  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a329  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f2  00000000  00000000  0002a37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  0002bb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d8  00000000  00000000  0002c3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f8d6  00000000  00000000  0002cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa85  00000000  00000000  0003c48e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005cf2f  00000000  00000000  00046f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a3e42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d3c  00000000  00000000  000a3e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000002c 	.word	0x2000002c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080037e4 	.word	0x080037e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000030 	.word	0x20000030
 8000104:	080037e4 	.word	0x080037e4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000226:	f000 ff9d 	bl	8001164 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800022a:	f000 f86f 	bl	800030c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800022e:	f000 f933 	bl	8000498 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000232:	f000 f8c3 	bl	80003bc <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8000236:	f000 f8ff 	bl	8000438 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	// MODULE SETTINGS ----------------------------------------------
	nrfRx.CE_port = CE_GPIO_Port;
 800023a:	4b2d      	ldr	r3, [pc, #180]	; (80002f0 <main+0xd0>)
 800023c:	2290      	movs	r2, #144	; 0x90
 800023e:	05d2      	lsls	r2, r2, #23
 8000240:	609a      	str	r2, [r3, #8]
	nrfRx.CE_pin = CE_Pin;
 8000242:	4b2b      	ldr	r3, [pc, #172]	; (80002f0 <main+0xd0>)
 8000244:	2280      	movs	r2, #128	; 0x80
 8000246:	0152      	lsls	r2, r2, #5
 8000248:	819a      	strh	r2, [r3, #12]
	nrfRx.CSN_port = CSN_GPIO_Port;
 800024a:	4b29      	ldr	r3, [pc, #164]	; (80002f0 <main+0xd0>)
 800024c:	2290      	movs	r2, #144	; 0x90
 800024e:	05d2      	lsls	r2, r2, #23
 8000250:	601a      	str	r2, [r3, #0]
	nrfRx.CSN_pin = CSN_Pin;
 8000252:	4b27      	ldr	r3, [pc, #156]	; (80002f0 <main+0xd0>)
 8000254:	4a27      	ldr	r2, [pc, #156]	; (80002f4 <main+0xd4>)
 8000256:	809a      	strh	r2, [r3, #4]
	nrfRx.IRQ_port = IRQ_GPIO_Port;
 8000258:	4b25      	ldr	r3, [pc, #148]	; (80002f0 <main+0xd0>)
 800025a:	2290      	movs	r2, #144	; 0x90
 800025c:	05d2      	lsls	r2, r2, #23
 800025e:	611a      	str	r2, [r3, #16]
	nrfRx.IRQ_pin = IRQ_Pin;
 8000260:	4b23      	ldr	r3, [pc, #140]	; (80002f0 <main+0xd0>)
 8000262:	2280      	movs	r2, #128	; 0x80
 8000264:	0052      	lsls	r2, r2, #1
 8000266:	829a      	strh	r2, [r3, #20]
	nrfRx.hSPIx = &hspi1;
 8000268:	4b21      	ldr	r3, [pc, #132]	; (80002f0 <main+0xd0>)
 800026a:	4a23      	ldr	r2, [pc, #140]	; (80002f8 <main+0xd8>)
 800026c:	619a      	str	r2, [r3, #24]

	nrf24_init(&nrfRx);
 800026e:	4b20      	ldr	r3, [pc, #128]	; (80002f0 <main+0xd0>)
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f9ca 	bl	800060a <nrf24_init>
	nrf24_setDataRate(&nrfRx, _250kbs);
 8000276:	4b1e      	ldr	r3, [pc, #120]	; (80002f0 <main+0xd0>)
 8000278:	2100      	movs	r1, #0
 800027a:	0018      	movs	r0, r3
 800027c:	f000 fa0a 	bl	8000694 <nrf24_setDataRate>
	nrf24_setPALevel(&nrfRx, high);
 8000280:	4b1b      	ldr	r3, [pc, #108]	; (80002f0 <main+0xd0>)
 8000282:	2103      	movs	r1, #3
 8000284:	0018      	movs	r0, r3
 8000286:	f000 fa67 	bl	8000758 <nrf24_setPALevel>

	nrf24_setRxPipe(&nrfRx, rxAddr1, 0, PAYLOAD);
 800028a:	491c      	ldr	r1, [pc, #112]	; (80002fc <main+0xdc>)
 800028c:	4818      	ldr	r0, [pc, #96]	; (80002f0 <main+0xd0>)
 800028e:	2316      	movs	r3, #22
 8000290:	2200      	movs	r2, #0
 8000292:	f000 fb53 	bl	800093c <nrf24_setRxPipe>
	nrf24_setRxPipe(&nrfRx, rxAddr2, 1, PAYLOAD);
 8000296:	491a      	ldr	r1, [pc, #104]	; (8000300 <main+0xe0>)
 8000298:	4815      	ldr	r0, [pc, #84]	; (80002f0 <main+0xd0>)
 800029a:	2316      	movs	r3, #22
 800029c:	2201      	movs	r2, #1
 800029e:	f000 fb4d 	bl	800093c <nrf24_setRxPipe>
	nrf24_setRxPipe(&nrfRx, rxAddr4, 2, PAYLOAD);
 80002a2:	4918      	ldr	r1, [pc, #96]	; (8000304 <main+0xe4>)
 80002a4:	4812      	ldr	r0, [pc, #72]	; (80002f0 <main+0xd0>)
 80002a6:	2316      	movs	r3, #22
 80002a8:	2202      	movs	r2, #2
 80002aa:	f000 fb47 	bl	800093c <nrf24_setRxPipe>
	nrf24_setRxPipe(&nrfRx, rxAddr3, 3, PAYLOAD);
 80002ae:	4916      	ldr	r1, [pc, #88]	; (8000308 <main+0xe8>)
 80002b0:	480f      	ldr	r0, [pc, #60]	; (80002f0 <main+0xd0>)
 80002b2:	2316      	movs	r3, #22
 80002b4:	2203      	movs	r2, #3
 80002b6:	f000 fb41 	bl	800093c <nrf24_setRxPipe>
	nrf24_setMode(&nrfRx, rxMode);
 80002ba:	4b0d      	ldr	r3, [pc, #52]	; (80002f0 <main+0xd0>)
 80002bc:	2103      	movs	r1, #3
 80002be:	0018      	movs	r0, r3
 80002c0:	f000 fad4 	bl	800086c <nrf24_setMode>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		for (int i = 0; i < 4; i++) {
 80002c4:	2300      	movs	r3, #0
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	e00e      	b.n	80002e8 <main+0xc8>
			if (isDataAvailable(&nrfRx, i) == 1) readData();
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	b2da      	uxtb	r2, r3
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <main+0xd0>)
 80002d0:	0011      	movs	r1, r2
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 fbd0 	bl	8000a78 <isDataAvailable>
 80002d8:	0003      	movs	r3, r0
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d101      	bne.n	80002e2 <main+0xc2>
 80002de:	f000 f96f 	bl	80005c0 <readData>
		for (int i = 0; i < 4; i++) {
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	3301      	adds	r3, #1
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2b03      	cmp	r3, #3
 80002ec:	dded      	ble.n	80002ca <main+0xaa>
 80002ee:	e7e9      	b.n	80002c4 <main+0xa4>
 80002f0:	20000130 	.word	0x20000130
 80002f4:	ffff8000 	.word	0xffff8000
 80002f8:	20000048 	.word	0x20000048
 80002fc:	20000000 	.word	0x20000000
 8000300:	20000008 	.word	0x20000008
 8000304:	20000018 	.word	0x20000018
 8000308:	20000010 	.word	0x20000010

0800030c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800030c:	b590      	push	{r4, r7, lr}
 800030e:	b095      	sub	sp, #84	; 0x54
 8000310:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000312:	2420      	movs	r4, #32
 8000314:	193b      	adds	r3, r7, r4
 8000316:	0018      	movs	r0, r3
 8000318:	2330      	movs	r3, #48	; 0x30
 800031a:	001a      	movs	r2, r3
 800031c:	2100      	movs	r1, #0
 800031e:	f003 fa59 	bl	80037d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000322:	2310      	movs	r3, #16
 8000324:	18fb      	adds	r3, r7, r3
 8000326:	0018      	movs	r0, r3
 8000328:	2310      	movs	r3, #16
 800032a:	001a      	movs	r2, r3
 800032c:	2100      	movs	r1, #0
 800032e:	f003 fa51 	bl	80037d4 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000332:	003b      	movs	r3, r7
 8000334:	0018      	movs	r0, r3
 8000336:	2310      	movs	r3, #16
 8000338:	001a      	movs	r2, r3
 800033a:	2100      	movs	r1, #0
 800033c:	f003 fa4a 	bl	80037d4 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000340:	0021      	movs	r1, r4
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2202      	movs	r2, #2
 8000346:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2201      	movs	r2, #1
 800034c:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2210      	movs	r2, #16
 8000352:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2200      	movs	r2, #0
 8000358:	621a      	str	r2, [r3, #32]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800035a:	187b      	adds	r3, r7, r1
 800035c:	0018      	movs	r0, r3
 800035e:	f001 f9e5 	bl	800172c <HAL_RCC_OscConfig>
 8000362:	1e03      	subs	r3, r0, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x5e>
		Error_Handler();
 8000366:	f000 f94b 	bl	8000600 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800036a:	2110      	movs	r1, #16
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2207      	movs	r2, #7
 8000370:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2200      	movs	r2, #0
 8000376:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037e:	187b      	adds	r3, r7, r1
 8000380:	2200      	movs	r2, #0
 8000382:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000384:	187b      	adds	r3, r7, r1
 8000386:	2100      	movs	r1, #0
 8000388:	0018      	movs	r0, r3
 800038a:	f001 fce9 	bl	8001d60 <HAL_RCC_ClockConfig>
 800038e:	1e03      	subs	r3, r0, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x8a>
		Error_Handler();
 8000392:	f000 f935 	bl	8000600 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000396:	003b      	movs	r3, r7
 8000398:	2201      	movs	r2, #1
 800039a:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800039c:	003b      	movs	r3, r7
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80003a2:	003b      	movs	r3, r7
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 fe2d 	bl	8002004 <HAL_RCCEx_PeriphCLKConfig>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0xa6>
		Error_Handler();
 80003ae:	f000 f927 	bl	8000600 <Error_Handler>
	}
}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b015      	add	sp, #84	; 0x54
 80003b8:	bd90      	pop	{r4, r7, pc}
	...

080003bc <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80003c0:	4b1b      	ldr	r3, [pc, #108]	; (8000430 <MX_SPI1_Init+0x74>)
 80003c2:	4a1c      	ldr	r2, [pc, #112]	; (8000434 <MX_SPI1_Init+0x78>)
 80003c4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80003c6:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <MX_SPI1_Init+0x74>)
 80003c8:	2282      	movs	r2, #130	; 0x82
 80003ca:	0052      	lsls	r2, r2, #1
 80003cc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003ce:	4b18      	ldr	r3, [pc, #96]	; (8000430 <MX_SPI1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003d4:	4b16      	ldr	r3, [pc, #88]	; (8000430 <MX_SPI1_Init+0x74>)
 80003d6:	22e0      	movs	r2, #224	; 0xe0
 80003d8:	00d2      	lsls	r2, r2, #3
 80003da:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <MX_SPI1_Init+0x74>)
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003e2:	4b13      	ldr	r3, [pc, #76]	; (8000430 <MX_SPI1_Init+0x74>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <MX_SPI1_Init+0x74>)
 80003ea:	2280      	movs	r2, #128	; 0x80
 80003ec:	0092      	lsls	r2, r2, #2
 80003ee:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <MX_SPI1_Init+0x74>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <MX_SPI1_Init+0x74>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <MX_SPI1_Init+0x74>)
 80003fe:	2200      	movs	r2, #0
 8000400:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <MX_SPI1_Init+0x74>)
 8000404:	2200      	movs	r2, #0
 8000406:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <MX_SPI1_Init+0x74>)
 800040a:	2207      	movs	r2, #7
 800040c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <MX_SPI1_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <MX_SPI1_Init+0x74>)
 8000416:	2208      	movs	r2, #8
 8000418:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <MX_SPI1_Init+0x74>)
 800041c:	0018      	movs	r0, r3
 800041e:	f001 febf 	bl	80021a0 <HAL_SPI_Init>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_SPI1_Init+0x6e>
		Error_Handler();
 8000426:	f000 f8eb 	bl	8000600 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20000048 	.word	0x20000048
 8000434:	40013000 	.word	0x40013000

08000438 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <MX_USART1_UART_Init+0x58>)
 800043e:	4a15      	ldr	r2, [pc, #84]	; (8000494 <MX_USART1_UART_Init+0x5c>)
 8000440:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000442:	4b13      	ldr	r3, [pc, #76]	; (8000490 <MX_USART1_UART_Init+0x58>)
 8000444:	2296      	movs	r2, #150	; 0x96
 8000446:	0192      	lsls	r2, r2, #6
 8000448:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <MX_USART1_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <MX_USART1_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000456:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <MX_USART1_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <MX_USART1_UART_Init+0x58>)
 800045e:	220c      	movs	r2, #12
 8000460:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000462:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <MX_USART1_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000468:	4b09      	ldr	r3, [pc, #36]	; (8000490 <MX_USART1_UART_Init+0x58>)
 800046a:	2200      	movs	r2, #0
 800046c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800046e:	4b08      	ldr	r3, [pc, #32]	; (8000490 <MX_USART1_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <MX_USART1_UART_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800047a:	4b05      	ldr	r3, [pc, #20]	; (8000490 <MX_USART1_UART_Init+0x58>)
 800047c:	0018      	movs	r0, r3
 800047e:	f002 fd9d 	bl	8002fbc <HAL_UART_Init>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000486:	f000 f8bb 	bl	8000600 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	200000ac 	.word	0x200000ac
 8000494:	40013800 	.word	0x40013800

08000498 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b089      	sub	sp, #36	; 0x24
 800049c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800049e:	240c      	movs	r4, #12
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	0018      	movs	r0, r3
 80004a4:	2314      	movs	r3, #20
 80004a6:	001a      	movs	r2, r3
 80004a8:	2100      	movs	r1, #0
 80004aa:	f003 f993 	bl	80037d4 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004ae:	4b42      	ldr	r3, [pc, #264]	; (80005b8 <MX_GPIO_Init+0x120>)
 80004b0:	695a      	ldr	r2, [r3, #20]
 80004b2:	4b41      	ldr	r3, [pc, #260]	; (80005b8 <MX_GPIO_Init+0x120>)
 80004b4:	2180      	movs	r1, #128	; 0x80
 80004b6:	02c9      	lsls	r1, r1, #11
 80004b8:	430a      	orrs	r2, r1
 80004ba:	615a      	str	r2, [r3, #20]
 80004bc:	4b3e      	ldr	r3, [pc, #248]	; (80005b8 <MX_GPIO_Init+0x120>)
 80004be:	695a      	ldr	r2, [r3, #20]
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	02db      	lsls	r3, r3, #11
 80004c4:	4013      	ands	r3, r2
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b3b      	ldr	r3, [pc, #236]	; (80005b8 <MX_GPIO_Init+0x120>)
 80004cc:	695a      	ldr	r2, [r3, #20]
 80004ce:	4b3a      	ldr	r3, [pc, #232]	; (80005b8 <MX_GPIO_Init+0x120>)
 80004d0:	2180      	movs	r1, #128	; 0x80
 80004d2:	0289      	lsls	r1, r1, #10
 80004d4:	430a      	orrs	r2, r1
 80004d6:	615a      	str	r2, [r3, #20]
 80004d8:	4b37      	ldr	r3, [pc, #220]	; (80005b8 <MX_GPIO_Init+0x120>)
 80004da:	695a      	ldr	r2, [r3, #20]
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	029b      	lsls	r3, r3, #10
 80004e0:	4013      	ands	r3, r2
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004e6:	4b35      	ldr	r3, [pc, #212]	; (80005bc <MX_GPIO_Init+0x124>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	2102      	movs	r1, #2
 80004ec:	0018      	movs	r0, r3
 80004ee:	f001 f8e5 	bl	80016bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	0159      	lsls	r1, r3, #5
 80004f6:	2390      	movs	r3, #144	; 0x90
 80004f8:	05db      	lsls	r3, r3, #23
 80004fa:	2200      	movs	r2, #0
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 f8dd 	bl	80016bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 8000502:	2380      	movs	r3, #128	; 0x80
 8000504:	0219      	lsls	r1, r3, #8
 8000506:	2390      	movs	r3, #144	; 0x90
 8000508:	05db      	lsls	r3, r3, #23
 800050a:	2201      	movs	r2, #1
 800050c:	0018      	movs	r0, r3
 800050e:	f001 f8d5 	bl	80016bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2202      	movs	r2, #2
 8000516:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	2201      	movs	r2, #1
 800051c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800052a:	193b      	adds	r3, r7, r4
 800052c:	4a23      	ldr	r2, [pc, #140]	; (80005bc <MX_GPIO_Init+0x124>)
 800052e:	0019      	movs	r1, r3
 8000530:	0010      	movs	r0, r2
 8000532:	f000 ff53 	bl	80013dc <HAL_GPIO_Init>

	/*Configure GPIO pin : IRQ_Pin */
	GPIO_InitStruct.Pin = IRQ_Pin;
 8000536:	193b      	adds	r3, r7, r4
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	0052      	lsls	r2, r2, #1
 800053c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2288      	movs	r2, #136	; 0x88
 8000542:	0352      	lsls	r2, r2, #13
 8000544:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000546:	193b      	adds	r3, r7, r4
 8000548:	2201      	movs	r2, #1
 800054a:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 800054c:	193a      	adds	r2, r7, r4
 800054e:	2390      	movs	r3, #144	; 0x90
 8000550:	05db      	lsls	r3, r3, #23
 8000552:	0011      	movs	r1, r2
 8000554:	0018      	movs	r0, r3
 8000556:	f000 ff41 	bl	80013dc <HAL_GPIO_Init>

	/*Configure GPIO pin : CE_Pin */
	GPIO_InitStruct.Pin = CE_Pin;
 800055a:	0021      	movs	r1, r4
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	0152      	lsls	r2, r2, #5
 8000562:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000564:	000c      	movs	r4, r1
 8000566:	193b      	adds	r3, r7, r4
 8000568:	2201      	movs	r2, #1
 800056a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2202      	movs	r2, #2
 8000570:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000578:	193a      	adds	r2, r7, r4
 800057a:	2390      	movs	r3, #144	; 0x90
 800057c:	05db      	lsls	r3, r3, #23
 800057e:	0011      	movs	r1, r2
 8000580:	0018      	movs	r0, r3
 8000582:	f000 ff2b 	bl	80013dc <HAL_GPIO_Init>

	/*Configure GPIO pin : CSN_Pin */
	GPIO_InitStruct.Pin = CSN_Pin;
 8000586:	0021      	movs	r1, r4
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	0212      	lsls	r2, r2, #8
 800058e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2201      	movs	r2, #1
 8000594:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2201      	movs	r2, #1
 800059a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 80005a2:	187a      	adds	r2, r7, r1
 80005a4:	2390      	movs	r3, #144	; 0x90
 80005a6:	05db      	lsls	r3, r3, #23
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 ff16 	bl	80013dc <HAL_GPIO_Init>

}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b009      	add	sp, #36	; 0x24
 80005b6:	bd90      	pop	{r4, r7, pc}
 80005b8:	40021000 	.word	0x40021000
 80005bc:	48000400 	.word	0x48000400

080005c0 <readData>:

/* USER CODE BEGIN 4 */
void readData(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	nrf24_Receive(&nrfRx, rxData, PAYLOAD);
 80005c4:	490a      	ldr	r1, [pc, #40]	; (80005f0 <readData+0x30>)
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <readData+0x34>)
 80005c8:	2216      	movs	r2, #22
 80005ca:	0018      	movs	r0, r3
 80005cc:	f000 fa8e 	bl	8000aec <nrf24_Receive>
	HAL_UART_Transmit(&huart1, rxData, sizeof(rxData), 1000);
 80005d0:	23fa      	movs	r3, #250	; 0xfa
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	4906      	ldr	r1, [pc, #24]	; (80005f0 <readData+0x30>)
 80005d6:	4808      	ldr	r0, [pc, #32]	; (80005f8 <readData+0x38>)
 80005d8:	2216      	movs	r2, #22
 80005da:	f002 fd43 	bl	8003064 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <readData+0x3c>)
 80005e0:	2102      	movs	r1, #2
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 f887 	bl	80016f6 <HAL_GPIO_TogglePin>
}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	20000150 	.word	0x20000150
 80005f4:	20000130 	.word	0x20000130
 80005f8:	200000ac 	.word	0x200000ac
 80005fc:	48000400 	.word	0x48000400

08000600 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000604:	b672      	cpsid	i
}
 8000606:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000608:	e7fe      	b.n	8000608 <Error_Handler+0x8>

0800060a <nrf24_init>:
		uint16_t len);
static void nrf_sendCmd(nrf24 *node, uint8_t cmd);
static void nrf24_reset(nrf24 *node, uint8_t reg);

/* Exported functions --------------------------------------------------------*/
void nrf24_init(nrf24 *node) {
 800060a:	b580      	push	{r7, lr}
 800060c:	b082      	sub	sp, #8
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	0018      	movs	r0, r3
 8000616:	f000 fac5 	bl	8000ba4 <nrf24_CE_disable>

	nrf24_writeReg(node, CONFIG, 0);  			//No IRQ, no CRC
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	2100      	movs	r1, #0
 8000620:	0018      	movs	r0, r3
 8000622:	f000 faef 	bl	8000c04 <nrf24_writeReg>
	node->crc = no_CRC;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2200      	movs	r2, #0
 800062a:	77da      	strb	r2, [r3, #31]
	nrf24_writeReg(node, EN_AA, 0x00); 			//No auto ACK
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2200      	movs	r2, #0
 8000630:	2101      	movs	r1, #1
 8000632:	0018      	movs	r0, r3
 8000634:	f000 fae6 	bl	8000c04 <nrf24_writeReg>
	nrf24_writeReg(node, EN_RXADDR, 0x00);	//Not enabling any data pipe
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	2102      	movs	r1, #2
 800063e:	0018      	movs	r0, r3
 8000640:	f000 fae0 	bl	8000c04 <nrf24_writeReg>
	nrf24_writeReg(node, SETUP_AW, 0x03);  	//5 Bytes for the TX/RX address
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2203      	movs	r2, #3
 8000648:	2103      	movs	r1, #3
 800064a:	0018      	movs	r0, r3
 800064c:	f000 fada 	bl	8000c04 <nrf24_writeReg>
	nrf24_writeReg(node, SETUP_RETR, 0);   	//No retransmission
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2200      	movs	r2, #0
 8000654:	2104      	movs	r1, #4
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fad4 	bl	8000c04 <nrf24_writeReg>

	nrf24_setDataRate(node, _250kbs);		//set minimum dataRate
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2100      	movs	r1, #0
 8000660:	0018      	movs	r0, r3
 8000662:	f000 f817 	bl	8000694 <nrf24_setDataRate>
	nrf24_setPALevel(node, high);				//set maximum PALevel 0dBm
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2103      	movs	r1, #3
 800066a:	0018      	movs	r0, r3
 800066c:	f000 f874 	bl	8000758 <nrf24_setPALevel>
	nrf24_setChannel(node, DEFAULT_CHANNEL);	//default channel 100
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2164      	movs	r1, #100	; 0x64
 8000674:	0018      	movs	r0, r3
 8000676:	f000 f8df 	bl	8000838 <nrf24_setChannel>
	nrf24_setMode(node, standby);		//set STANDBY mode
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2101      	movs	r1, #1
 800067e:	0018      	movs	r0, r3
 8000680:	f000 f8f4 	bl	800086c <nrf24_setMode>

	nrf24_CE_enable(node);	// Enable the chip after configuring the device
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	0018      	movs	r0, r3
 8000688:	f000 fa7c 	bl	8000b84 <nrf24_CE_enable>
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b002      	add	sp, #8
 8000692:	bd80      	pop	{r7, pc}

08000694 <nrf24_setDataRate>:
// -----------------------------------------------------------------------------

//set module bitrate
void nrf24_setDataRate(nrf24 *node, DataRate _bitRate) {
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	000a      	movs	r2, r1
 800069e:	1cfb      	adds	r3, r7, #3
 80006a0:	701a      	strb	r2, [r3, #0]
	nrf24_CE_disable(node);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 fa7d 	bl	8000ba4 <nrf24_CE_disable>
	uint8_t config = nrf24_readReg(node, RF_SETUP);
 80006aa:	230f      	movs	r3, #15
 80006ac:	18fc      	adds	r4, r7, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2106      	movs	r1, #6
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 fb23 	bl	8000cfe <nrf24_readReg>
 80006b8:	0003      	movs	r3, r0
 80006ba:	7023      	strb	r3, [r4, #0]

	switch (_bitRate) {
 80006bc:	1cfb      	adds	r3, r7, #3
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	d027      	beq.n	8000714 <nrf24_setDataRate+0x80>
 80006c4:	dc37      	bgt.n	8000736 <nrf24_setDataRate+0xa2>
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d002      	beq.n	80006d0 <nrf24_setDataRate+0x3c>
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d011      	beq.n	80006f2 <nrf24_setDataRate+0x5e>
			config |= (1 << 3);
			node->bitRate = _2mbs;
			break;

		default:
			break;
 80006ce:	e032      	b.n	8000736 <nrf24_setDataRate+0xa2>
			config |= (1 << 5);		//write 1 in the RF_DR_LOW and 0 in RF_DR_HIGH bits
 80006d0:	200f      	movs	r0, #15
 80006d2:	183b      	adds	r3, r7, r0
 80006d4:	183a      	adds	r2, r7, r0
 80006d6:	7812      	ldrb	r2, [r2, #0]
 80006d8:	2120      	movs	r1, #32
 80006da:	430a      	orrs	r2, r1
 80006dc:	701a      	strb	r2, [r3, #0]
			config &= ~(1 << 3);
 80006de:	183b      	adds	r3, r7, r0
 80006e0:	183a      	adds	r2, r7, r0
 80006e2:	7812      	ldrb	r2, [r2, #0]
 80006e4:	2108      	movs	r1, #8
 80006e6:	438a      	bics	r2, r1
 80006e8:	701a      	strb	r2, [r3, #0]
			node->bitRate = _250kbs;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	775a      	strb	r2, [r3, #29]
			break;
 80006f0:	e022      	b.n	8000738 <nrf24_setDataRate+0xa4>
			config &= ~(1 << 5);	//write 0 in the RF_DR_LOW and 0 in RF_DR_HIGH bits
 80006f2:	200f      	movs	r0, #15
 80006f4:	183b      	adds	r3, r7, r0
 80006f6:	183a      	adds	r2, r7, r0
 80006f8:	7812      	ldrb	r2, [r2, #0]
 80006fa:	2120      	movs	r1, #32
 80006fc:	438a      	bics	r2, r1
 80006fe:	701a      	strb	r2, [r3, #0]
			config &= ~(1 << 3);
 8000700:	183b      	adds	r3, r7, r0
 8000702:	183a      	adds	r2, r7, r0
 8000704:	7812      	ldrb	r2, [r2, #0]
 8000706:	2108      	movs	r1, #8
 8000708:	438a      	bics	r2, r1
 800070a:	701a      	strb	r2, [r3, #0]
			node->bitRate = _1mbs;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2201      	movs	r2, #1
 8000710:	775a      	strb	r2, [r3, #29]
			break;
 8000712:	e011      	b.n	8000738 <nrf24_setDataRate+0xa4>
			config &= ~(1 << 5);	//write 0 in the RF_DR_LOW and 1 in RF_DR_HIGH bits
 8000714:	200f      	movs	r0, #15
 8000716:	183b      	adds	r3, r7, r0
 8000718:	183a      	adds	r2, r7, r0
 800071a:	7812      	ldrb	r2, [r2, #0]
 800071c:	2120      	movs	r1, #32
 800071e:	438a      	bics	r2, r1
 8000720:	701a      	strb	r2, [r3, #0]
			config |= (1 << 3);
 8000722:	183b      	adds	r3, r7, r0
 8000724:	183a      	adds	r2, r7, r0
 8000726:	7812      	ldrb	r2, [r2, #0]
 8000728:	2108      	movs	r1, #8
 800072a:	430a      	orrs	r2, r1
 800072c:	701a      	strb	r2, [r3, #0]
			node->bitRate = _2mbs;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2202      	movs	r2, #2
 8000732:	775a      	strb	r2, [r3, #29]
			break;
 8000734:	e000      	b.n	8000738 <nrf24_setDataRate+0xa4>
			break;
 8000736:	46c0      	nop			; (mov r8, r8)
	}
	nrf24_writeReg(node, RF_SETUP, config);
 8000738:	230f      	movs	r3, #15
 800073a:	18fb      	adds	r3, r7, r3
 800073c:	781a      	ldrb	r2, [r3, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2106      	movs	r1, #6
 8000742:	0018      	movs	r0, r3
 8000744:	f000 fa5e 	bl	8000c04 <nrf24_writeReg>
	nrf24_CE_enable(node);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	0018      	movs	r0, r3
 800074c:	f000 fa1a 	bl	8000b84 <nrf24_CE_enable>
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b005      	add	sp, #20
 8000756:	bd90      	pop	{r4, r7, pc}

08000758 <nrf24_setPALevel>:
// -----------------------------------------------------------------------------

//set PAlevel module in TX mode
void nrf24_setPALevel(nrf24 *node, PaLevel pwr) {
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	000a      	movs	r2, r1
 8000762:	1cfb      	adds	r3, r7, #3
 8000764:	701a      	strb	r2, [r3, #0]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	0018      	movs	r0, r3
 800076a:	f000 fa1b 	bl	8000ba4 <nrf24_CE_disable>
	uint8_t config = nrf24_readReg(node, RF_SETUP);
 800076e:	230f      	movs	r3, #15
 8000770:	18fc      	adds	r4, r7, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2106      	movs	r1, #6
 8000776:	0018      	movs	r0, r3
 8000778:	f000 fac1 	bl	8000cfe <nrf24_readReg>
 800077c:	0003      	movs	r3, r0
 800077e:	7023      	strb	r3, [r4, #0]

	switch (pwr) {
 8000780:	1cfb      	adds	r3, r7, #3
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b03      	cmp	r3, #3
 8000786:	d03b      	beq.n	8000800 <nrf24_setPALevel+0xa8>
 8000788:	dc45      	bgt.n	8000816 <nrf24_setPALevel+0xbe>
 800078a:	2b02      	cmp	r3, #2
 800078c:	d027      	beq.n	80007de <nrf24_setPALevel+0x86>
 800078e:	dc42      	bgt.n	8000816 <nrf24_setPALevel+0xbe>
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <nrf24_setPALevel+0x42>
 8000794:	2b01      	cmp	r3, #1
 8000796:	d011      	beq.n	80007bc <nrf24_setPALevel+0x64>
			config |= (1 << 2) | (1 << 1);	//write 3 in the RF_PWR bits
			node->pa = high;
			break;

		default:
			break;
 8000798:	e03d      	b.n	8000816 <nrf24_setPALevel+0xbe>
			config &= ~(1 << 2);	//write 0 in the RF_PWR bits
 800079a:	200f      	movs	r0, #15
 800079c:	183b      	adds	r3, r7, r0
 800079e:	183a      	adds	r2, r7, r0
 80007a0:	7812      	ldrb	r2, [r2, #0]
 80007a2:	2104      	movs	r1, #4
 80007a4:	438a      	bics	r2, r1
 80007a6:	701a      	strb	r2, [r3, #0]
			config &= ~(1 << 1);
 80007a8:	183b      	adds	r3, r7, r0
 80007aa:	183a      	adds	r2, r7, r0
 80007ac:	7812      	ldrb	r2, [r2, #0]
 80007ae:	2102      	movs	r1, #2
 80007b0:	438a      	bics	r2, r1
 80007b2:	701a      	strb	r2, [r3, #0]
			node->pa = veryLow;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2200      	movs	r2, #0
 80007b8:	771a      	strb	r2, [r3, #28]
			break;
 80007ba:	e02d      	b.n	8000818 <nrf24_setPALevel+0xc0>
			config &= ~(1 << 2);	//write 1 in the RF_PWR bits
 80007bc:	200f      	movs	r0, #15
 80007be:	183b      	adds	r3, r7, r0
 80007c0:	183a      	adds	r2, r7, r0
 80007c2:	7812      	ldrb	r2, [r2, #0]
 80007c4:	2104      	movs	r1, #4
 80007c6:	438a      	bics	r2, r1
 80007c8:	701a      	strb	r2, [r3, #0]
			config |= (1 << 1);
 80007ca:	183b      	adds	r3, r7, r0
 80007cc:	183a      	adds	r2, r7, r0
 80007ce:	7812      	ldrb	r2, [r2, #0]
 80007d0:	2102      	movs	r1, #2
 80007d2:	430a      	orrs	r2, r1
 80007d4:	701a      	strb	r2, [r3, #0]
			node->pa = low;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2201      	movs	r2, #1
 80007da:	771a      	strb	r2, [r3, #28]
			break;
 80007dc:	e01c      	b.n	8000818 <nrf24_setPALevel+0xc0>
			config |= (1 << 2);		//write 2 in the RF_PWR bits
 80007de:	200f      	movs	r0, #15
 80007e0:	183b      	adds	r3, r7, r0
 80007e2:	183a      	adds	r2, r7, r0
 80007e4:	7812      	ldrb	r2, [r2, #0]
 80007e6:	2104      	movs	r1, #4
 80007e8:	430a      	orrs	r2, r1
 80007ea:	701a      	strb	r2, [r3, #0]
			config &= ~(1 << 1);
 80007ec:	183b      	adds	r3, r7, r0
 80007ee:	183a      	adds	r2, r7, r0
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	2102      	movs	r1, #2
 80007f4:	438a      	bics	r2, r1
 80007f6:	701a      	strb	r2, [r3, #0]
			node->pa = mid;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2202      	movs	r2, #2
 80007fc:	771a      	strb	r2, [r3, #28]
			break;
 80007fe:	e00b      	b.n	8000818 <nrf24_setPALevel+0xc0>
			config |= (1 << 2) | (1 << 1);	//write 3 in the RF_PWR bits
 8000800:	220f      	movs	r2, #15
 8000802:	18bb      	adds	r3, r7, r2
 8000804:	18ba      	adds	r2, r7, r2
 8000806:	7812      	ldrb	r2, [r2, #0]
 8000808:	2106      	movs	r1, #6
 800080a:	430a      	orrs	r2, r1
 800080c:	701a      	strb	r2, [r3, #0]
			node->pa = high;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2203      	movs	r2, #3
 8000812:	771a      	strb	r2, [r3, #28]
			break;
 8000814:	e000      	b.n	8000818 <nrf24_setPALevel+0xc0>
			break;
 8000816:	46c0      	nop			; (mov r8, r8)
	}
	nrf24_writeReg(node, RF_SETUP, config);
 8000818:	230f      	movs	r3, #15
 800081a:	18fb      	adds	r3, r7, r3
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2106      	movs	r1, #6
 8000822:	0018      	movs	r0, r3
 8000824:	f000 f9ee 	bl	8000c04 <nrf24_writeReg>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	0018      	movs	r0, r3
 800082c:	f000 f9aa 	bl	8000b84 <nrf24_CE_enable>
}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	b005      	add	sp, #20
 8000836:	bd90      	pop	{r4, r7, pc}

08000838 <nrf24_setChannel>:
// -----------------------------------------------------------------------------

//Set the channel device
void nrf24_setChannel(nrf24 *node, uint8_t channel) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	000a      	movs	r2, r1
 8000842:	1cfb      	adds	r3, r7, #3
 8000844:	701a      	strb	r2, [r3, #0]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	0018      	movs	r0, r3
 800084a:	f000 f9ab 	bl	8000ba4 <nrf24_CE_disable>
	nrf24_writeReg(node, RF_CH, channel);  // select the channel
 800084e:	1cfb      	adds	r3, r7, #3
 8000850:	781a      	ldrb	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2105      	movs	r1, #5
 8000856:	0018      	movs	r0, r3
 8000858:	f000 f9d4 	bl	8000c04 <nrf24_writeReg>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	0018      	movs	r0, r3
 8000860:	f000 f990 	bl	8000b84 <nrf24_CE_enable>
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b002      	add	sp, #8
 800086a:	bd80      	pop	{r7, pc}

0800086c <nrf24_setMode>:
// -----------------------------------------------------------------------------

//Set the module operation mode
void nrf24_setMode(nrf24 *node, Mode _mode) {
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	000a      	movs	r2, r1
 8000876:	1cfb      	adds	r3, r7, #3
 8000878:	701a      	strb	r2, [r3, #0]
	uint8_t config = nrf24_readReg(node, CONFIG);
 800087a:	230f      	movs	r3, #15
 800087c:	18fc      	adds	r4, r7, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2100      	movs	r1, #0
 8000882:	0018      	movs	r0, r3
 8000884:	f000 fa3b 	bl	8000cfe <nrf24_readReg>
 8000888:	0003      	movs	r3, r0
 800088a:	7023      	strb	r3, [r4, #0]

	switch (_mode) {
 800088c:	1cfb      	adds	r3, r7, #3
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b03      	cmp	r3, #3
 8000892:	d037      	beq.n	8000904 <nrf24_setMode+0x98>
 8000894:	dc45      	bgt.n	8000922 <nrf24_setMode+0xb6>
 8000896:	2b02      	cmp	r3, #2
 8000898:	d01f      	beq.n	80008da <nrf24_setMode+0x6e>
 800089a:	dc42      	bgt.n	8000922 <nrf24_setMode+0xb6>
 800089c:	2b00      	cmp	r3, #0
 800089e:	d002      	beq.n	80008a6 <nrf24_setMode+0x3a>
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d00b      	beq.n	80008bc <nrf24_setMode+0x50>
			config |= (1 << 1) | (1 << 0); //write 1 in the PWR_UP and PRIM_RX bits
			node->mode = rxMode;
			break;

		default:
			break;
 80008a4:	e03d      	b.n	8000922 <nrf24_setMode+0xb6>
			config &= ~(1 << 1);	//write 0 in the PWR_UP bit
 80008a6:	220f      	movs	r2, #15
 80008a8:	18bb      	adds	r3, r7, r2
 80008aa:	18ba      	adds	r2, r7, r2
 80008ac:	7812      	ldrb	r2, [r2, #0]
 80008ae:	2102      	movs	r1, #2
 80008b0:	438a      	bics	r2, r1
 80008b2:	701a      	strb	r2, [r3, #0]
			node->mode = pwrDown;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2200      	movs	r2, #0
 80008b8:	779a      	strb	r2, [r3, #30]
			break;
 80008ba:	e033      	b.n	8000924 <nrf24_setMode+0xb8>
			nrf24_CE_disable(node);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 f970 	bl	8000ba4 <nrf24_CE_disable>
			config |= (1 << 1);		//write 1 in the PWR_UP bit
 80008c4:	220f      	movs	r2, #15
 80008c6:	18bb      	adds	r3, r7, r2
 80008c8:	18ba      	adds	r2, r7, r2
 80008ca:	7812      	ldrb	r2, [r2, #0]
 80008cc:	2102      	movs	r1, #2
 80008ce:	430a      	orrs	r2, r1
 80008d0:	701a      	strb	r2, [r3, #0]
			node->mode = standby;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2201      	movs	r2, #1
 80008d6:	779a      	strb	r2, [r3, #30]
			break;
 80008d8:	e024      	b.n	8000924 <nrf24_setMode+0xb8>
			nrf24_CE_enable(node);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	0018      	movs	r0, r3
 80008de:	f000 f951 	bl	8000b84 <nrf24_CE_enable>
			config |= (1 << 1);		//write 1 in the PWR_UP bit
 80008e2:	200f      	movs	r0, #15
 80008e4:	183b      	adds	r3, r7, r0
 80008e6:	183a      	adds	r2, r7, r0
 80008e8:	7812      	ldrb	r2, [r2, #0]
 80008ea:	2102      	movs	r1, #2
 80008ec:	430a      	orrs	r2, r1
 80008ee:	701a      	strb	r2, [r3, #0]
			config &= ~(1 << 0);	//write 0 in the PRIM_RX bit
 80008f0:	183b      	adds	r3, r7, r0
 80008f2:	183a      	adds	r2, r7, r0
 80008f4:	7812      	ldrb	r2, [r2, #0]
 80008f6:	2101      	movs	r1, #1
 80008f8:	438a      	bics	r2, r1
 80008fa:	701a      	strb	r2, [r3, #0]
			node->mode = txMode;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2202      	movs	r2, #2
 8000900:	779a      	strb	r2, [r3, #30]
			break;
 8000902:	e00f      	b.n	8000924 <nrf24_setMode+0xb8>
			nrf24_CE_enable(node);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	0018      	movs	r0, r3
 8000908:	f000 f93c 	bl	8000b84 <nrf24_CE_enable>
			config |= (1 << 1) | (1 << 0); //write 1 in the PWR_UP and PRIM_RX bits
 800090c:	220f      	movs	r2, #15
 800090e:	18bb      	adds	r3, r7, r2
 8000910:	18ba      	adds	r2, r7, r2
 8000912:	7812      	ldrb	r2, [r2, #0]
 8000914:	2103      	movs	r1, #3
 8000916:	430a      	orrs	r2, r1
 8000918:	701a      	strb	r2, [r3, #0]
			node->mode = rxMode;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2203      	movs	r2, #3
 800091e:	779a      	strb	r2, [r3, #30]
			break;
 8000920:	e000      	b.n	8000924 <nrf24_setMode+0xb8>
			break;
 8000922:	46c0      	nop			; (mov r8, r8)
	}
	nrf24_writeReg(node, CONFIG, config);
 8000924:	230f      	movs	r3, #15
 8000926:	18fb      	adds	r3, r7, r3
 8000928:	781a      	ldrb	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2100      	movs	r1, #0
 800092e:	0018      	movs	r0, r3
 8000930:	f000 f968 	bl	8000c04 <nrf24_writeReg>
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b005      	add	sp, #20
 800093a:	bd90      	pop	{r4, r7, pc}

0800093c <nrf24_setRxPipe>:
	}
	return (0);
}
// -----------------------------------------------------------------------------

void nrf24_setRxPipe(nrf24 *node, uint8_t *addr, uint8_t pipe, uint8_t payload) {
 800093c:	b5b0      	push	{r4, r5, r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	0019      	movs	r1, r3
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	701a      	strb	r2, [r3, #0]
 800094c:	1dbb      	adds	r3, r7, #6
 800094e:	1c0a      	adds	r2, r1, #0
 8000950:	701a      	strb	r2, [r3, #0]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	0018      	movs	r0, r3
 8000956:	f000 f925 	bl	8000ba4 <nrf24_CE_disable>

	nrf24_reset(node, STATUS);
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	2107      	movs	r1, #7
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fa24 	bl	8000dac <nrf24_reset>
	uint8_t en_rxaddr = nrf24_readReg(node, EN_RXADDR);	//select data pipe
 8000964:	2517      	movs	r5, #23
 8000966:	197c      	adds	r4, r7, r5
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2102      	movs	r1, #2
 800096c:	0018      	movs	r0, r3
 800096e:	f000 f9c6 	bl	8000cfe <nrf24_readReg>
 8000972:	0003      	movs	r3, r0
 8000974:	7023      	strb	r3, [r4, #0]
	en_rxaddr |= (1 << pipe);
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2201      	movs	r2, #1
 800097c:	409a      	lsls	r2, r3
 800097e:	0013      	movs	r3, r2
 8000980:	b25a      	sxtb	r2, r3
 8000982:	197b      	adds	r3, r7, r5
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b25b      	sxtb	r3, r3
 8000988:	4313      	orrs	r3, r2
 800098a:	b25a      	sxtb	r2, r3
 800098c:	197b      	adds	r3, r7, r5
 800098e:	701a      	strb	r2, [r3, #0]
	nrf24_writeReg(node, EN_RXADDR, en_rxaddr);
 8000990:	197b      	adds	r3, r7, r5
 8000992:	781a      	ldrb	r2, [r3, #0]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2102      	movs	r1, #2
 8000998:	0018      	movs	r0, r3
 800099a:	f000 f933 	bl	8000c04 <nrf24_writeReg>
	 The Address from DATA Pipe 2 to Data Pipe 5 differs only in the LSB
	 Their 4 MSB Bytes will still be same as Data Pipe 1

	 For Example:
	 Pipe 1 ADDR = 0xAABBCCDD11, Pipe 2 ADDR = 0xAABBCCDD22 Pipe 3 ADDR = 0xAABBCCDD33*/
	switch (pipe) {
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b05      	cmp	r3, #5
 80009a4:	d85c      	bhi.n	8000a60 <nrf24_setRxPipe+0x124>
 80009a6:	009a      	lsls	r2, r3, #2
 80009a8:	4b32      	ldr	r3, [pc, #200]	; (8000a74 <nrf24_setRxPipe+0x138>)
 80009aa:	18d3      	adds	r3, r2, r3
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	469f      	mov	pc, r3
		case 0:
			nrf24_writeRegMulti(node, RX_ADDR_P0, addr, 5); //Write the Pipe0 address
 80009b0:	68ba      	ldr	r2, [r7, #8]
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	2305      	movs	r3, #5
 80009b6:	210a      	movs	r1, #10
 80009b8:	f000 f959 	bl	8000c6e <nrf24_writeRegMulti>
			nrf24_writeReg(node, RX_PW_P0, payload); //payload size for pipe 0
 80009bc:	1dbb      	adds	r3, r7, #6
 80009be:	781a      	ldrb	r2, [r3, #0]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2111      	movs	r1, #17
 80009c4:	0018      	movs	r0, r3
 80009c6:	f000 f91d 	bl	8000c04 <nrf24_writeReg>
			break;
 80009ca:	e04a      	b.n	8000a62 <nrf24_setRxPipe+0x126>

		case 1:
			nrf24_writeRegMulti(node, RX_ADDR_P1, addr, 5); //Write the Pipe1 address
 80009cc:	68ba      	ldr	r2, [r7, #8]
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	2305      	movs	r3, #5
 80009d2:	210b      	movs	r1, #11
 80009d4:	f000 f94b 	bl	8000c6e <nrf24_writeRegMulti>
			nrf24_writeReg(node, RX_PW_P1, payload); 	//payload size for pipe 1
 80009d8:	1dbb      	adds	r3, r7, #6
 80009da:	781a      	ldrb	r2, [r3, #0]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2112      	movs	r1, #18
 80009e0:	0018      	movs	r0, r3
 80009e2:	f000 f90f 	bl	8000c04 <nrf24_writeReg>
			break;
 80009e6:	e03c      	b.n	8000a62 <nrf24_setRxPipe+0x126>

		case 2:
			nrf24_writeReg(node, RX_ADDR_P2, addr[0]);	//Write the Pipe2 address
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	781a      	ldrb	r2, [r3, #0]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	210c      	movs	r1, #12
 80009f0:	0018      	movs	r0, r3
 80009f2:	f000 f907 	bl	8000c04 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P2, payload); 		//payload size for pipe 2
 80009f6:	1dbb      	adds	r3, r7, #6
 80009f8:	781a      	ldrb	r2, [r3, #0]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2113      	movs	r1, #19
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 f900 	bl	8000c04 <nrf24_writeReg>
			break;
 8000a04:	e02d      	b.n	8000a62 <nrf24_setRxPipe+0x126>

		case 3:
			nrf24_writeReg(node, RX_ADDR_P3, addr[0]);	// Write the Pipe3 address
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	781a      	ldrb	r2, [r3, #0]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	210d      	movs	r1, #13
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f000 f8f8 	bl	8000c04 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P3, payload); 		//payload size for pipe 3
 8000a14:	1dbb      	adds	r3, r7, #6
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2114      	movs	r1, #20
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 f8f1 	bl	8000c04 <nrf24_writeReg>
			break;
 8000a22:	e01e      	b.n	8000a62 <nrf24_setRxPipe+0x126>

		case 4:
			nrf24_writeReg(node, RX_ADDR_P4, addr[0]); 	//Write the Pipe4 address
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	781a      	ldrb	r2, [r3, #0]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	210e      	movs	r1, #14
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f000 f8e9 	bl	8000c04 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P4, payload); 		//payload size for pipe 4
 8000a32:	1dbb      	adds	r3, r7, #6
 8000a34:	781a      	ldrb	r2, [r3, #0]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2115      	movs	r1, #21
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 f8e2 	bl	8000c04 <nrf24_writeReg>
			break;
 8000a40:	e00f      	b.n	8000a62 <nrf24_setRxPipe+0x126>

		case 5:
			nrf24_writeReg(node, RX_ADDR_P5, addr[0]); 	// Write the Pipe5 address
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	781a      	ldrb	r2, [r3, #0]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	210f      	movs	r1, #15
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 f8da 	bl	8000c04 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P5, payload); 		//payload size for pipe 5
 8000a50:	1dbb      	adds	r3, r7, #6
 8000a52:	781a      	ldrb	r2, [r3, #0]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2116      	movs	r1, #22
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f000 f8d3 	bl	8000c04 <nrf24_writeReg>
			break;
 8000a5e:	e000      	b.n	8000a62 <nrf24_setRxPipe+0x126>

		default:
			break;
 8000a60:	46c0      	nop			; (mov r8, r8)
	}
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	0018      	movs	r0, r3
 8000a66:	f000 f88d 	bl	8000b84 <nrf24_CE_enable>
}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b006      	add	sp, #24
 8000a70:	bdb0      	pop	{r4, r5, r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	0800382c 	.word	0x0800382c

08000a78 <isDataAvailable>:
// -----------------------------------------------------------------------------

uint8_t isDataAvailable(nrf24 *node, uint8_t pipenum) {
 8000a78:	b5b0      	push	{r4, r5, r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	000a      	movs	r2, r1
 8000a82:	1cfb      	adds	r3, r7, #3
 8000a84:	701a      	strb	r2, [r3, #0]
	uint8_t status = nrf24_readReg(node, STATUS);
 8000a86:	250f      	movs	r5, #15
 8000a88:	197c      	adds	r4, r7, r5
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2107      	movs	r1, #7
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 f935 	bl	8000cfe <nrf24_readReg>
 8000a94:	0003      	movs	r3, r0
 8000a96:	7023      	strb	r3, [r4, #0]
	if ((status - 64 == 0) && pipenum == 0) {
 8000a98:	197b      	adds	r3, r7, r5
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b40      	cmp	r3, #64	; 0x40
 8000a9e:	d10b      	bne.n	8000ab8 <isDataAvailable+0x40>
 8000aa0:	1cfb      	adds	r3, r7, #3
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d107      	bne.n	8000ab8 <isDataAvailable+0x40>
		nrf24_writeReg(node, STATUS, (1 << 6));
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2240      	movs	r2, #64	; 0x40
 8000aac:	2107      	movs	r1, #7
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 f8a8 	bl	8000c04 <nrf24_writeReg>
		return 1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e015      	b.n	8000ae4 <isDataAvailable+0x6c>
	}
	else if ((status & (1 << 6)) && (status & (pipenum << 1))) {
 8000ab8:	210f      	movs	r1, #15
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2240      	movs	r2, #64	; 0x40
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	d00e      	beq.n	8000ae2 <isDataAvailable+0x6a>
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	1cfa      	adds	r2, r7, #3
 8000aca:	7812      	ldrb	r2, [r2, #0]
 8000acc:	0052      	lsls	r2, r2, #1
 8000ace:	4013      	ands	r3, r2
 8000ad0:	d007      	beq.n	8000ae2 <isDataAvailable+0x6a>
		nrf24_writeReg(node, STATUS, (1 << 6));
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2240      	movs	r2, #64	; 0x40
 8000ad6:	2107      	movs	r1, #7
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f000 f893 	bl	8000c04 <nrf24_writeReg>
		return 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e000      	b.n	8000ae4 <isDataAvailable+0x6c>
	}
	return 0;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b004      	add	sp, #16
 8000aea:	bdb0      	pop	{r4, r5, r7, pc}

08000aec <nrf24_Receive>:
// -----------------------------------------------------------------------------

void nrf24_Receive(nrf24 *node, uint8_t *data, uint8_t len) {
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b087      	sub	sp, #28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	701a      	strb	r2, [r3, #0]
	uint8_t cmdtosend = 0;
 8000afa:	2417      	movs	r4, #23
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]

	nrf24_CSN_enable(node);		//select the device
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 f85d 	bl	8000bc4 <nrf24_CSN_enable>
	cmdtosend = R_RX_PAYLOAD;	//payload command
 8000b0a:	0021      	movs	r1, r4
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2261      	movs	r2, #97	; 0x61
 8000b10:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(node->hSPIx, &cmdtosend, 1, 100);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	6998      	ldr	r0, [r3, #24]
 8000b16:	1879      	adds	r1, r7, r1
 8000b18:	2364      	movs	r3, #100	; 0x64
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f001 fbf8 	bl	8002310 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	0018      	movs	r0, r3
 8000b28:	f002 f868 	bl	8002bfc <HAL_SPI_GetState>
 8000b2c:	0003      	movs	r3, r0
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d1f7      	bne.n	8000b22 <nrf24_Receive+0x36>
	//Receive the payload
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	6998      	ldr	r0, [r3, #24]
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	23fa      	movs	r3, #250	; 0xfa
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	68b9      	ldr	r1, [r7, #8]
 8000b42:	f001 fd3d 	bl	80025c0 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f002 f855 	bl	8002bfc <HAL_SPI_GetState>
 8000b52:	0003      	movs	r3, r0
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d1f7      	bne.n	8000b48 <nrf24_Receive+0x5c>
	nrf24_CSN_disable(node);	//Unselect the device
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f000 f842 	bl	8000be4 <nrf24_CSN_disable>
	HAL_Delay(1);
 8000b60:	2001      	movs	r0, #1
 8000b62:	f000 fb63 	bl	800122c <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8000b66:	2117      	movs	r1, #23
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	22e2      	movs	r2, #226	; 0xe2
 8000b6c:	701a      	strb	r2, [r3, #0]
	nrf_sendCmd(node, cmdtosend);
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	0011      	movs	r1, r2
 8000b76:	0018      	movs	r0, r3
 8000b78:	f000 f8f4 	bl	8000d64 <nrf_sendCmd>
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b007      	add	sp, #28
 8000b82:	bd90      	pop	{r4, r7, pc}

08000b84 <nrf24_CE_enable>:
		*(data + i) = nrf24_readReg(node, i - 12);
}
// -----------------------------------------------------------------------------

/* privated functions --------------------------------------------------------*/
static void nrf24_CE_enable(nrf24 *node) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_SET);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6898      	ldr	r0, [r3, #8]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	899b      	ldrh	r3, [r3, #12]
 8000b94:	2201      	movs	r2, #1
 8000b96:	0019      	movs	r1, r3
 8000b98:	f000 fd90 	bl	80016bc <HAL_GPIO_WritePin>
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b002      	add	sp, #8
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <nrf24_CE_disable>:
// -----------------------------------------------------------------------------

static void nrf24_CE_disable(nrf24 *node) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_RESET);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6898      	ldr	r0, [r3, #8]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	899b      	ldrh	r3, [r3, #12]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	0019      	movs	r1, r3
 8000bb8:	f000 fd80 	bl	80016bc <HAL_GPIO_WritePin>
}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b002      	add	sp, #8
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <nrf24_CSN_enable>:
// -----------------------------------------------------------------------------

static void nrf24_CSN_enable(nrf24 *node) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_RESET);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6818      	ldr	r0, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	889b      	ldrh	r3, [r3, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	0019      	movs	r1, r3
 8000bd8:	f000 fd70 	bl	80016bc <HAL_GPIO_WritePin>
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b002      	add	sp, #8
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <nrf24_CSN_disable>:
// -----------------------------------------------------------------------------

static void nrf24_CSN_disable(nrf24 *node) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_SET);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6818      	ldr	r0, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	889b      	ldrh	r3, [r3, #4]
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	0019      	movs	r1, r3
 8000bf8:	f000 fd60 	bl	80016bc <HAL_GPIO_WritePin>
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b002      	add	sp, #8
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <nrf24_writeReg>:
// -----------------------------------------------------------------------------

//write a value(s) in a register(s) by an address
static void nrf24_writeReg(nrf24 *node, uint8_t reg, uint8_t data) {
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	0008      	movs	r0, r1
 8000c0e:	0011      	movs	r1, r2
 8000c10:	1cfb      	adds	r3, r7, #3
 8000c12:	1c02      	adds	r2, r0, #0
 8000c14:	701a      	strb	r2, [r3, #0]
 8000c16:	1cbb      	adds	r3, r7, #2
 8000c18:	1c0a      	adds	r2, r1, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8000c1c:	1cfb      	adds	r3, r7, #3
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2220      	movs	r2, #32
 8000c22:	4313      	orrs	r3, r2
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	240c      	movs	r4, #12
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	701a      	strb	r2, [r3, #0]
	buf[1] = data;
 8000c2c:	193b      	adds	r3, r7, r4
 8000c2e:	1cba      	adds	r2, r7, #2
 8000c30:	7812      	ldrb	r2, [r2, #0]
 8000c32:	705a      	strb	r2, [r3, #1]
	nrf24_CSN_enable(node);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	0018      	movs	r0, r3
 8000c38:	f7ff ffc4 	bl	8000bc4 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 2, NRF_TX_TIMEOUT);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6998      	ldr	r0, [r3, #24]
 8000c40:	23fa      	movs	r3, #250	; 0xfa
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	1939      	adds	r1, r7, r4
 8000c46:	2202      	movs	r2, #2
 8000c48:	f001 fb62 	bl	8002310 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	0018      	movs	r0, r3
 8000c54:	f001 ffd2 	bl	8002bfc <HAL_SPI_GetState>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d1f7      	bne.n	8000c4e <nrf24_writeReg+0x4a>
	nrf24_CSN_disable(node);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	0018      	movs	r0, r3
 8000c62:	f7ff ffbf 	bl	8000be4 <nrf24_CSN_disable>
}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b005      	add	sp, #20
 8000c6c:	bd90      	pop	{r4, r7, pc}

08000c6e <nrf24_writeRegMulti>:
// -----------------------------------------------------------------------------

//write multiple values in a registers by an address
static void nrf24_writeRegMulti(nrf24 *node, uint8_t reg, uint8_t *data,
		uint16_t len) {
 8000c6e:	b590      	push	{r4, r7, lr}
 8000c70:	b087      	sub	sp, #28
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	0008      	movs	r0, r1
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	0019      	movs	r1, r3
 8000c7c:	240b      	movs	r4, #11
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	1c02      	adds	r2, r0, #0
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	2308      	movs	r3, #8
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	1c0a      	adds	r2, r1, #0
 8000c8a:	801a      	strh	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8000c8c:	193b      	adds	r3, r7, r4
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2220      	movs	r2, #32
 8000c92:	4313      	orrs	r3, r2
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	2414      	movs	r4, #20
 8000c98:	193b      	adds	r3, r7, r4
 8000c9a:	701a      	strb	r2, [r3, #0]
	nrf24_CSN_enable(node);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f7ff ff90 	bl	8000bc4 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 1, NRF_TX_TIMEOUT);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	6998      	ldr	r0, [r3, #24]
 8000ca8:	23fa      	movs	r3, #250	; 0xfa
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	1939      	adds	r1, r7, r4
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f001 fb2e 	bl	8002310 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f001 ff9e 	bl	8002bfc <HAL_SPI_GetState>
 8000cc0:	0003      	movs	r3, r0
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d1f7      	bne.n	8000cb6 <nrf24_writeRegMulti+0x48>
	HAL_SPI_Transmit(node->hSPIx, data, len, NRF_TX_TIMEOUT);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	6998      	ldr	r0, [r3, #24]
 8000cca:	23fa      	movs	r3, #250	; 0xfa
 8000ccc:	00dc      	lsls	r4, r3, #3
 8000cce:	2308      	movs	r3, #8
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	881a      	ldrh	r2, [r3, #0]
 8000cd4:	6879      	ldr	r1, [r7, #4]
 8000cd6:	0023      	movs	r3, r4
 8000cd8:	f001 fb1a 	bl	8002310 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f001 ff8a 	bl	8002bfc <HAL_SPI_GetState>
 8000ce8:	0003      	movs	r3, r0
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d1f7      	bne.n	8000cde <nrf24_writeRegMulti+0x70>
	nrf24_CSN_disable(node);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff ff77 	bl	8000be4 <nrf24_CSN_disable>
}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b007      	add	sp, #28
 8000cfc:	bd90      	pop	{r4, r7, pc}

08000cfe <nrf24_readReg>:
// -----------------------------------------------------------------------------

//read a value from a register by an address
static uint8_t nrf24_readReg(nrf24 *node, uint8_t reg) {
 8000cfe:	b590      	push	{r4, r7, lr}
 8000d00:	b085      	sub	sp, #20
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	000a      	movs	r2, r1
 8000d08:	1cfb      	adds	r3, r7, #3
 8000d0a:	701a      	strb	r2, [r3, #0]
	uint8_t data = 0;
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	18fb      	adds	r3, r7, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
	nrf24_CSN_enable(node);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff ff54 	bl	8000bc4 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, &reg, 1, NRF_TX_TIMEOUT);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6998      	ldr	r0, [r3, #24]
 8000d20:	23fa      	movs	r3, #250	; 0xfa
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	1cf9      	adds	r1, r7, #3
 8000d26:	2201      	movs	r2, #1
 8000d28:	f001 faf2 	bl	8002310 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	0018      	movs	r0, r3
 8000d34:	f001 ff62 	bl	8002bfc <HAL_SPI_GetState>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d1f7      	bne.n	8000d2e <nrf24_readReg+0x30>
	HAL_SPI_Receive(node->hSPIx, &data, 1, NRF_RX_TIMEOUT);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6998      	ldr	r0, [r3, #24]
 8000d42:	23fa      	movs	r3, #250	; 0xfa
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	240f      	movs	r4, #15
 8000d48:	1939      	adds	r1, r7, r4
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f001 fc38 	bl	80025c0 <HAL_SPI_Receive>
	nrf24_CSN_disable(node);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	0018      	movs	r0, r3
 8000d54:	f7ff ff46 	bl	8000be4 <nrf24_CSN_disable>
	return data;
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	781b      	ldrb	r3, [r3, #0]
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b005      	add	sp, #20
 8000d62:	bd90      	pop	{r4, r7, pc}

08000d64 <nrf_sendCmd>:
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
	nrf24_CSN_disable(node);
}
// -----------------------------------------------------------------------------

static void nrf_sendCmd(nrf24 *node, uint8_t cmd) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	000a      	movs	r2, r1
 8000d6e:	1cfb      	adds	r3, r7, #3
 8000d70:	701a      	strb	r2, [r3, #0]
	nrf24_CSN_enable(node);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff ff25 	bl	8000bc4 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, &cmd, 1, NRF_TX_TIMEOUT);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6998      	ldr	r0, [r3, #24]
 8000d7e:	23fa      	movs	r3, #250	; 0xfa
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	1cf9      	adds	r1, r7, #3
 8000d84:	2201      	movs	r2, #1
 8000d86:	f001 fac3 	bl	8002310 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	0018      	movs	r0, r3
 8000d92:	f001 ff33 	bl	8002bfc <HAL_SPI_GetState>
 8000d96:	0003      	movs	r3, r0
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d1f7      	bne.n	8000d8c <nrf_sendCmd+0x28>
	nrf24_CSN_disable(node);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f7ff ff20 	bl	8000be4 <nrf24_CSN_disable>
}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b002      	add	sp, #8
 8000daa:	bd80      	pop	{r7, pc}

08000dac <nrf24_reset>:
// -----------------------------------------------------------------------------

static void nrf24_reset(nrf24 *node, uint8_t reg) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	000a      	movs	r2, r1
 8000db6:	1cfb      	adds	r3, r7, #3
 8000db8:	701a      	strb	r2, [r3, #0]
	if (reg == STATUS)
 8000dba:	1cfb      	adds	r3, r7, #3
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b07      	cmp	r3, #7
 8000dc0:	d106      	bne.n	8000dd0 <nrf24_reset+0x24>
		nrf24_writeReg(node, STATUS, 0x00);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2107      	movs	r1, #7
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f7ff ff1b 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P5, 0);
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
		nrf24_writeReg(node, DYNPD, 0);
		nrf24_writeReg(node, FEATURE, 0);
	}
}
 8000dce:	e0bb      	b.n	8000f48 <nrf24_reset+0x19c>
	else if (reg == FIFO_STATUS)
 8000dd0:	1cfb      	adds	r3, r7, #3
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b17      	cmp	r3, #23
 8000dd6:	d106      	bne.n	8000de6 <nrf24_reset+0x3a>
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2211      	movs	r2, #17
 8000ddc:	2117      	movs	r1, #23
 8000dde:	0018      	movs	r0, r3
 8000de0:	f7ff ff10 	bl	8000c04 <nrf24_writeReg>
}
 8000de4:	e0b0      	b.n	8000f48 <nrf24_reset+0x19c>
		nrf24_writeReg(node, CONFIG, 0x08);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2208      	movs	r2, #8
 8000dea:	2100      	movs	r1, #0
 8000dec:	0018      	movs	r0, r3
 8000dee:	f7ff ff09 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, EN_AA, 0x3F);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	223f      	movs	r2, #63	; 0x3f
 8000df6:	2101      	movs	r1, #1
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f7ff ff03 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, EN_RXADDR, 0x03);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2203      	movs	r2, #3
 8000e02:	2102      	movs	r1, #2
 8000e04:	0018      	movs	r0, r3
 8000e06:	f7ff fefd 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, SETUP_AW, 0x03);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	2103      	movs	r1, #3
 8000e10:	0018      	movs	r0, r3
 8000e12:	f7ff fef7 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, SETUP_RETR, 0x03);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2203      	movs	r2, #3
 8000e1a:	2104      	movs	r1, #4
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff fef1 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, RF_CH, 0x02);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2202      	movs	r2, #2
 8000e26:	2105      	movs	r1, #5
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f7ff feeb 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, RF_SETUP, 0x0E);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	220e      	movs	r2, #14
 8000e32:	2106      	movs	r1, #6
 8000e34:	0018      	movs	r0, r3
 8000e36:	f7ff fee5 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, STATUS, 0x00);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2107      	movs	r1, #7
 8000e40:	0018      	movs	r0, r3
 8000e42:	f7ff fedf 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, OBSERVE_TX, 0x00);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2108      	movs	r1, #8
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff fed9 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, RPD, 0x00);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	2109      	movs	r1, #9
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff fed3 	bl	8000c04 <nrf24_writeReg>
		uint8_t rx_addr_p0_def[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };
 8000e5e:	2018      	movs	r0, #24
 8000e60:	183b      	adds	r3, r7, r0
 8000e62:	4a3b      	ldr	r2, [pc, #236]	; (8000f50 <nrf24_reset+0x1a4>)
 8000e64:	6811      	ldr	r1, [r2, #0]
 8000e66:	6019      	str	r1, [r3, #0]
 8000e68:	7912      	ldrb	r2, [r2, #4]
 8000e6a:	711a      	strb	r2, [r3, #4]
		nrf24_writeRegMulti(node, RX_ADDR_P0, rx_addr_p0_def, 5);
 8000e6c:	183a      	adds	r2, r7, r0
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	2305      	movs	r3, #5
 8000e72:	210a      	movs	r1, #10
 8000e74:	f7ff fefb 	bl	8000c6e <nrf24_writeRegMulti>
		uint8_t rx_addr_p1_def[5] = { 0xC2, 0xC2, 0xC2, 0xC2, 0xC2 };
 8000e78:	2010      	movs	r0, #16
 8000e7a:	183b      	adds	r3, r7, r0
 8000e7c:	4a35      	ldr	r2, [pc, #212]	; (8000f54 <nrf24_reset+0x1a8>)
 8000e7e:	6811      	ldr	r1, [r2, #0]
 8000e80:	6019      	str	r1, [r3, #0]
 8000e82:	7912      	ldrb	r2, [r2, #4]
 8000e84:	711a      	strb	r2, [r3, #4]
		nrf24_writeRegMulti(node, RX_ADDR_P1, rx_addr_p1_def, 5);
 8000e86:	183a      	adds	r2, r7, r0
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	210b      	movs	r1, #11
 8000e8e:	f7ff feee 	bl	8000c6e <nrf24_writeRegMulti>
		nrf24_writeReg(node, RX_ADDR_P2, 0xC3);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	22c3      	movs	r2, #195	; 0xc3
 8000e96:	210c      	movs	r1, #12
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f7ff feb3 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P3, 0xC4);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	22c4      	movs	r2, #196	; 0xc4
 8000ea2:	210d      	movs	r1, #13
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f7ff fead 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P4, 0xC5);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	22c5      	movs	r2, #197	; 0xc5
 8000eae:	210e      	movs	r1, #14
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f7ff fea7 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P5, 0xC6);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	22c6      	movs	r2, #198	; 0xc6
 8000eba:	210f      	movs	r1, #15
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f7ff fea1 	bl	8000c04 <nrf24_writeReg>
		uint8_t tx_addr_def[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };
 8000ec2:	2008      	movs	r0, #8
 8000ec4:	183b      	adds	r3, r7, r0
 8000ec6:	4a22      	ldr	r2, [pc, #136]	; (8000f50 <nrf24_reset+0x1a4>)
 8000ec8:	6811      	ldr	r1, [r2, #0]
 8000eca:	6019      	str	r1, [r3, #0]
 8000ecc:	7912      	ldrb	r2, [r2, #4]
 8000ece:	711a      	strb	r2, [r3, #4]
		nrf24_writeRegMulti(node, TX_ADDR, tx_addr_def, 5);
 8000ed0:	183a      	adds	r2, r7, r0
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	2305      	movs	r3, #5
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	f7ff fec9 	bl	8000c6e <nrf24_writeRegMulti>
		nrf24_writeReg(node, RX_PW_P0, 0);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2111      	movs	r1, #17
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff fe8e 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P1, 0);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	2112      	movs	r1, #18
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f7ff fe88 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P2, 0);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2113      	movs	r1, #19
 8000efa:	0018      	movs	r0, r3
 8000efc:	f7ff fe82 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P3, 0);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	2114      	movs	r1, #20
 8000f06:	0018      	movs	r0, r3
 8000f08:	f7ff fe7c 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P4, 0);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2115      	movs	r1, #21
 8000f12:	0018      	movs	r0, r3
 8000f14:	f7ff fe76 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P5, 0);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2116      	movs	r1, #22
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f7ff fe70 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2211      	movs	r2, #17
 8000f28:	2117      	movs	r1, #23
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f7ff fe6a 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, DYNPD, 0);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	211c      	movs	r1, #28
 8000f36:	0018      	movs	r0, r3
 8000f38:	f7ff fe64 	bl	8000c04 <nrf24_writeReg>
		nrf24_writeReg(node, FEATURE, 0);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	211d      	movs	r1, #29
 8000f42:	0018      	movs	r0, r3
 8000f44:	f7ff fe5e 	bl	8000c04 <nrf24_writeReg>
}
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b008      	add	sp, #32
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	080037fc 	.word	0x080037fc
 8000f54:	08003804 	.word	0x08003804

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <HAL_MspInit+0x44>)
 8000f60:	699a      	ldr	r2, [r3, #24]
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_MspInit+0x44>)
 8000f64:	2101      	movs	r1, #1
 8000f66:	430a      	orrs	r2, r1
 8000f68:	619a      	str	r2, [r3, #24]
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <HAL_MspInit+0x44>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4013      	ands	r3, r2
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_MspInit+0x44>)
 8000f78:	69da      	ldr	r2, [r3, #28]
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_MspInit+0x44>)
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	0549      	lsls	r1, r1, #21
 8000f80:	430a      	orrs	r2, r1
 8000f82:	61da      	str	r2, [r3, #28]
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_MspInit+0x44>)
 8000f86:	69da      	ldr	r2, [r3, #28]
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	055b      	lsls	r3, r3, #21
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b08b      	sub	sp, #44	; 0x2c
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	2414      	movs	r4, #20
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	0018      	movs	r0, r3
 8000fae:	2314      	movs	r3, #20
 8000fb0:	001a      	movs	r2, r3
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	f002 fc0e 	bl	80037d4 <memset>
  if(hspi->Instance==SPI1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a1c      	ldr	r2, [pc, #112]	; (8001030 <HAL_SPI_MspInit+0x90>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d131      	bne.n	8001026 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <HAL_SPI_MspInit+0x94>)
 8000fc4:	699a      	ldr	r2, [r3, #24]
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <HAL_SPI_MspInit+0x94>)
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	0149      	lsls	r1, r1, #5
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	619a      	str	r2, [r3, #24]
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <HAL_SPI_MspInit+0x94>)
 8000fd2:	699a      	ldr	r2, [r3, #24]
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	015b      	lsls	r3, r3, #5
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_SPI_MspInit+0x94>)
 8000fe0:	695a      	ldr	r2, [r3, #20]
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <HAL_SPI_MspInit+0x94>)
 8000fe4:	2180      	movs	r1, #128	; 0x80
 8000fe6:	02c9      	lsls	r1, r1, #11
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	615a      	str	r2, [r3, #20]
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <HAL_SPI_MspInit+0x94>)
 8000fee:	695a      	ldr	r2, [r3, #20]
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	02db      	lsls	r3, r3, #11
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ffa:	0021      	movs	r1, r4
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	2238      	movs	r2, #56	; 0x38
 8001000:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	187b      	adds	r3, r7, r1
 8001004:	2202      	movs	r2, #2
 8001006:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001008:	187b      	adds	r3, r7, r1
 800100a:	2201      	movs	r2, #1
 800100c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2203      	movs	r2, #3
 8001012:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101a:	187b      	adds	r3, r7, r1
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_SPI_MspInit+0x98>)
 800101e:	0019      	movs	r1, r3
 8001020:	0010      	movs	r0, r2
 8001022:	f000 f9db 	bl	80013dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b00b      	add	sp, #44	; 0x2c
 800102c:	bd90      	pop	{r4, r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	40013000 	.word	0x40013000
 8001034:	40021000 	.word	0x40021000
 8001038:	48000400 	.word	0x48000400

0800103c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b08b      	sub	sp, #44	; 0x2c
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	2414      	movs	r4, #20
 8001046:	193b      	adds	r3, r7, r4
 8001048:	0018      	movs	r0, r3
 800104a:	2314      	movs	r3, #20
 800104c:	001a      	movs	r2, r3
 800104e:	2100      	movs	r1, #0
 8001050:	f002 fbc0 	bl	80037d4 <memset>
  if(huart->Instance==USART1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a1d      	ldr	r2, [pc, #116]	; (80010d0 <HAL_UART_MspInit+0x94>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d133      	bne.n	80010c6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800105e:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <HAL_UART_MspInit+0x98>)
 8001060:	699a      	ldr	r2, [r3, #24]
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <HAL_UART_MspInit+0x98>)
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	01c9      	lsls	r1, r1, #7
 8001068:	430a      	orrs	r2, r1
 800106a:	619a      	str	r2, [r3, #24]
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_UART_MspInit+0x98>)
 800106e:	699a      	ldr	r2, [r3, #24]
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	01db      	lsls	r3, r3, #7
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_UART_MspInit+0x98>)
 800107c:	695a      	ldr	r2, [r3, #20]
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_UART_MspInit+0x98>)
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	0289      	lsls	r1, r1, #10
 8001084:	430a      	orrs	r2, r1
 8001086:	615a      	str	r2, [r3, #20]
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_UART_MspInit+0x98>)
 800108a:	695a      	ldr	r2, [r3, #20]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	029b      	lsls	r3, r3, #10
 8001090:	4013      	ands	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001096:	193b      	adds	r3, r7, r4
 8001098:	22c0      	movs	r2, #192	; 0xc0
 800109a:	00d2      	lsls	r2, r2, #3
 800109c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	0021      	movs	r1, r4
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2202      	movs	r2, #2
 80010a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2203      	movs	r2, #3
 80010b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	2201      	movs	r2, #1
 80010b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	187a      	adds	r2, r7, r1
 80010ba:	2390      	movs	r3, #144	; 0x90
 80010bc:	05db      	lsls	r3, r3, #23
 80010be:	0011      	movs	r1, r2
 80010c0:	0018      	movs	r0, r3
 80010c2:	f000 f98b 	bl	80013dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b00b      	add	sp, #44	; 0x2c
 80010cc:	bd90      	pop	{r4, r7, pc}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	40013800 	.word	0x40013800
 80010d4:	40021000 	.word	0x40021000

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <NMI_Handler+0x4>

080010de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <HardFault_Handler+0x4>

080010e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010e8:	46c0      	nop			; (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fc:	f000 f87a 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001112:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <LoopForever+0x6>)
  ldr r1, =_edata
 8001116:	490e      	ldr	r1, [pc, #56]	; (8001150 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001118:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <LoopForever+0xe>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <LoopForever+0x12>)
  ldr r4, =_ebss
 800112c:	4c0b      	ldr	r4, [pc, #44]	; (800115c <LoopForever+0x16>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800113a:	f7ff ffe4 	bl	8001106 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800113e:	f002 fb25 	bl	800378c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001142:	f7ff f86d 	bl	8000220 <main>

08001146 <LoopForever>:

LoopForever:
    b LoopForever
 8001146:	e7fe      	b.n	8001146 <LoopForever>
  ldr   r0, =_estack
 8001148:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001154:	08003864 	.word	0x08003864
  ldr r2, =_sbss
 8001158:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800115c:	2000016c 	.word	0x2000016c

08001160 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC1_IRQHandler>
	...

08001164 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <HAL_Init+0x24>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_Init+0x24>)
 800116e:	2110      	movs	r1, #16
 8001170:	430a      	orrs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001174:	2003      	movs	r0, #3
 8001176:	f000 f809 	bl	800118c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800117a:	f7ff feed 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	0018      	movs	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	40022000 	.word	0x40022000

0800118c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <HAL_InitTick+0x5c>)
 8001196:	681c      	ldr	r4, [r3, #0]
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <HAL_InitTick+0x60>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	0019      	movs	r1, r3
 800119e:	23fa      	movs	r3, #250	; 0xfa
 80011a0:	0098      	lsls	r0, r3, #2
 80011a2:	f7fe ffb1 	bl	8000108 <__udivsi3>
 80011a6:	0003      	movs	r3, r0
 80011a8:	0019      	movs	r1, r3
 80011aa:	0020      	movs	r0, r4
 80011ac:	f7fe ffac 	bl	8000108 <__udivsi3>
 80011b0:	0003      	movs	r3, r0
 80011b2:	0018      	movs	r0, r3
 80011b4:	f000 f905 	bl	80013c2 <HAL_SYSTICK_Config>
 80011b8:	1e03      	subs	r3, r0, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e00f      	b.n	80011e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d80b      	bhi.n	80011de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	2301      	movs	r3, #1
 80011ca:	425b      	negs	r3, r3
 80011cc:	2200      	movs	r2, #0
 80011ce:	0018      	movs	r0, r3
 80011d0:	f000 f8e2 	bl	8001398 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_InitTick+0x64>)
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b003      	add	sp, #12
 80011e6:	bd90      	pop	{r4, r7, pc}
 80011e8:	20000020 	.word	0x20000020
 80011ec:	20000028 	.word	0x20000028
 80011f0:	20000024 	.word	0x20000024

080011f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_IncTick+0x1c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	001a      	movs	r2, r3
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_IncTick+0x20>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	18d2      	adds	r2, r2, r3
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <HAL_IncTick+0x20>)
 8001206:	601a      	str	r2, [r3, #0]
}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	20000028 	.word	0x20000028
 8001214:	20000168 	.word	0x20000168

08001218 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b02      	ldr	r3, [pc, #8]	; (8001228 <HAL_GetTick+0x10>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	20000168 	.word	0x20000168

0800122c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff fff0 	bl	8001218 <HAL_GetTick>
 8001238:	0003      	movs	r3, r0
 800123a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	3301      	adds	r3, #1
 8001244:	d005      	beq.n	8001252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_Delay+0x44>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	001a      	movs	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	189b      	adds	r3, r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	f7ff ffe0 	bl	8001218 <HAL_GetTick>
 8001258:	0002      	movs	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d8f7      	bhi.n	8001254 <HAL_Delay+0x28>
  {
  }
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b004      	add	sp, #16
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	20000028 	.word	0x20000028

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	0002      	movs	r2, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b7f      	cmp	r3, #127	; 0x7f
 8001288:	d828      	bhi.n	80012dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800128a:	4a2f      	ldr	r2, [pc, #188]	; (8001348 <__NVIC_SetPriority+0xd4>)
 800128c:	1dfb      	adds	r3, r7, #7
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b25b      	sxtb	r3, r3
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	33c0      	adds	r3, #192	; 0xc0
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	589b      	ldr	r3, [r3, r2]
 800129a:	1dfa      	adds	r2, r7, #7
 800129c:	7812      	ldrb	r2, [r2, #0]
 800129e:	0011      	movs	r1, r2
 80012a0:	2203      	movs	r2, #3
 80012a2:	400a      	ands	r2, r1
 80012a4:	00d2      	lsls	r2, r2, #3
 80012a6:	21ff      	movs	r1, #255	; 0xff
 80012a8:	4091      	lsls	r1, r2
 80012aa:	000a      	movs	r2, r1
 80012ac:	43d2      	mvns	r2, r2
 80012ae:	401a      	ands	r2, r3
 80012b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	019b      	lsls	r3, r3, #6
 80012b6:	22ff      	movs	r2, #255	; 0xff
 80012b8:	401a      	ands	r2, r3
 80012ba:	1dfb      	adds	r3, r7, #7
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	0018      	movs	r0, r3
 80012c0:	2303      	movs	r3, #3
 80012c2:	4003      	ands	r3, r0
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c8:	481f      	ldr	r0, [pc, #124]	; (8001348 <__NVIC_SetPriority+0xd4>)
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	430a      	orrs	r2, r1
 80012d4:	33c0      	adds	r3, #192	; 0xc0
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012da:	e031      	b.n	8001340 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012dc:	4a1b      	ldr	r2, [pc, #108]	; (800134c <__NVIC_SetPriority+0xd8>)
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	0019      	movs	r1, r3
 80012e4:	230f      	movs	r3, #15
 80012e6:	400b      	ands	r3, r1
 80012e8:	3b08      	subs	r3, #8
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	3306      	adds	r3, #6
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	18d3      	adds	r3, r2, r3
 80012f2:	3304      	adds	r3, #4
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	1dfa      	adds	r2, r7, #7
 80012f8:	7812      	ldrb	r2, [r2, #0]
 80012fa:	0011      	movs	r1, r2
 80012fc:	2203      	movs	r2, #3
 80012fe:	400a      	ands	r2, r1
 8001300:	00d2      	lsls	r2, r2, #3
 8001302:	21ff      	movs	r1, #255	; 0xff
 8001304:	4091      	lsls	r1, r2
 8001306:	000a      	movs	r2, r1
 8001308:	43d2      	mvns	r2, r2
 800130a:	401a      	ands	r2, r3
 800130c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	019b      	lsls	r3, r3, #6
 8001312:	22ff      	movs	r2, #255	; 0xff
 8001314:	401a      	ands	r2, r3
 8001316:	1dfb      	adds	r3, r7, #7
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	0018      	movs	r0, r3
 800131c:	2303      	movs	r3, #3
 800131e:	4003      	ands	r3, r0
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001324:	4809      	ldr	r0, [pc, #36]	; (800134c <__NVIC_SetPriority+0xd8>)
 8001326:	1dfb      	adds	r3, r7, #7
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	001c      	movs	r4, r3
 800132c:	230f      	movs	r3, #15
 800132e:	4023      	ands	r3, r4
 8001330:	3b08      	subs	r3, #8
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	430a      	orrs	r2, r1
 8001336:	3306      	adds	r3, #6
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	18c3      	adds	r3, r0, r3
 800133c:	3304      	adds	r3, #4
 800133e:	601a      	str	r2, [r3, #0]
}
 8001340:	46c0      	nop			; (mov r8, r8)
 8001342:	46bd      	mov	sp, r7
 8001344:	b003      	add	sp, #12
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	1e5a      	subs	r2, r3, #1
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	045b      	lsls	r3, r3, #17
 8001360:	429a      	cmp	r2, r3
 8001362:	d301      	bcc.n	8001368 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001364:	2301      	movs	r3, #1
 8001366:	e010      	b.n	800138a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <SysTick_Config+0x44>)
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	3a01      	subs	r2, #1
 800136e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001370:	2301      	movs	r3, #1
 8001372:	425b      	negs	r3, r3
 8001374:	2103      	movs	r1, #3
 8001376:	0018      	movs	r0, r3
 8001378:	f7ff ff7c 	bl	8001274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <SysTick_Config+0x44>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <SysTick_Config+0x44>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001388:	2300      	movs	r3, #0
}
 800138a:	0018      	movs	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	b002      	add	sp, #8
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	e000e010 	.word	0xe000e010

08001398 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	210f      	movs	r1, #15
 80013a4:	187b      	adds	r3, r7, r1
 80013a6:	1c02      	adds	r2, r0, #0
 80013a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	0011      	movs	r1, r2
 80013b4:	0018      	movs	r0, r3
 80013b6:	f7ff ff5d 	bl	8001274 <__NVIC_SetPriority>
}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	b004      	add	sp, #16
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	0018      	movs	r0, r3
 80013ce:	f7ff ffbf 	bl	8001350 <SysTick_Config>
 80013d2:	0003      	movs	r3, r0
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b002      	add	sp, #8
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ea:	e14f      	b.n	800168c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2101      	movs	r1, #1
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4091      	lsls	r1, r2
 80013f6:	000a      	movs	r2, r1
 80013f8:	4013      	ands	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d100      	bne.n	8001404 <HAL_GPIO_Init+0x28>
 8001402:	e140      	b.n	8001686 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2203      	movs	r2, #3
 800140a:	4013      	ands	r3, r2
 800140c:	2b01      	cmp	r3, #1
 800140e:	d005      	beq.n	800141c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2203      	movs	r2, #3
 8001416:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001418:	2b02      	cmp	r3, #2
 800141a:	d130      	bne.n	800147e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	409a      	lsls	r2, r3
 800142a:	0013      	movs	r3, r2
 800142c:	43da      	mvns	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	409a      	lsls	r2, r3
 800143e:	0013      	movs	r3, r2
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001452:	2201      	movs	r2, #1
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
 8001458:	0013      	movs	r3, r2
 800145a:	43da      	mvns	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	2201      	movs	r2, #1
 800146a:	401a      	ands	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	409a      	lsls	r2, r3
 8001470:	0013      	movs	r3, r2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2203      	movs	r2, #3
 8001484:	4013      	ands	r3, r2
 8001486:	2b03      	cmp	r3, #3
 8001488:	d017      	beq.n	80014ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	409a      	lsls	r2, r3
 8001498:	0013      	movs	r3, r2
 800149a:	43da      	mvns	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	409a      	lsls	r2, r3
 80014ac:	0013      	movs	r3, r2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2203      	movs	r2, #3
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d123      	bne.n	800150e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	08da      	lsrs	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3208      	adds	r2, #8
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	58d3      	ldr	r3, [r2, r3]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2207      	movs	r2, #7
 80014d8:	4013      	ands	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	220f      	movs	r2, #15
 80014de:	409a      	lsls	r2, r3
 80014e0:	0013      	movs	r3, r2
 80014e2:	43da      	mvns	r2, r3
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	2107      	movs	r1, #7
 80014f2:	400b      	ands	r3, r1
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	409a      	lsls	r2, r3
 80014f8:	0013      	movs	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	08da      	lsrs	r2, r3, #3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3208      	adds	r2, #8
 8001508:	0092      	lsls	r2, r2, #2
 800150a:	6939      	ldr	r1, [r7, #16]
 800150c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	2203      	movs	r2, #3
 800151a:	409a      	lsls	r2, r3
 800151c:	0013      	movs	r3, r2
 800151e:	43da      	mvns	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2203      	movs	r2, #3
 800152c:	401a      	ands	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	409a      	lsls	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	23c0      	movs	r3, #192	; 0xc0
 8001548:	029b      	lsls	r3, r3, #10
 800154a:	4013      	ands	r3, r2
 800154c:	d100      	bne.n	8001550 <HAL_GPIO_Init+0x174>
 800154e:	e09a      	b.n	8001686 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001550:	4b54      	ldr	r3, [pc, #336]	; (80016a4 <HAL_GPIO_Init+0x2c8>)
 8001552:	699a      	ldr	r2, [r3, #24]
 8001554:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <HAL_GPIO_Init+0x2c8>)
 8001556:	2101      	movs	r1, #1
 8001558:	430a      	orrs	r2, r1
 800155a:	619a      	str	r2, [r3, #24]
 800155c:	4b51      	ldr	r3, [pc, #324]	; (80016a4 <HAL_GPIO_Init+0x2c8>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	2201      	movs	r2, #1
 8001562:	4013      	ands	r3, r2
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001568:	4a4f      	ldr	r2, [pc, #316]	; (80016a8 <HAL_GPIO_Init+0x2cc>)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	589b      	ldr	r3, [r3, r2]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	2203      	movs	r2, #3
 800157a:	4013      	ands	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	220f      	movs	r2, #15
 8001580:	409a      	lsls	r2, r3
 8001582:	0013      	movs	r3, r2
 8001584:	43da      	mvns	r2, r3
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	2390      	movs	r3, #144	; 0x90
 8001590:	05db      	lsls	r3, r3, #23
 8001592:	429a      	cmp	r2, r3
 8001594:	d013      	beq.n	80015be <HAL_GPIO_Init+0x1e2>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a44      	ldr	r2, [pc, #272]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d00d      	beq.n	80015ba <HAL_GPIO_Init+0x1de>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a43      	ldr	r2, [pc, #268]	; (80016b0 <HAL_GPIO_Init+0x2d4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d007      	beq.n	80015b6 <HAL_GPIO_Init+0x1da>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a42      	ldr	r2, [pc, #264]	; (80016b4 <HAL_GPIO_Init+0x2d8>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d101      	bne.n	80015b2 <HAL_GPIO_Init+0x1d6>
 80015ae:	2303      	movs	r3, #3
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x1e4>
 80015b2:	2305      	movs	r3, #5
 80015b4:	e004      	b.n	80015c0 <HAL_GPIO_Init+0x1e4>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e002      	b.n	80015c0 <HAL_GPIO_Init+0x1e4>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <HAL_GPIO_Init+0x1e4>
 80015be:	2300      	movs	r3, #0
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	2103      	movs	r1, #3
 80015c4:	400a      	ands	r2, r1
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	4093      	lsls	r3, r2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015d0:	4935      	ldr	r1, [pc, #212]	; (80016a8 <HAL_GPIO_Init+0x2cc>)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015de:	4b36      	ldr	r3, [pc, #216]	; (80016b8 <HAL_GPIO_Init+0x2dc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	43da      	mvns	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	025b      	lsls	r3, r3, #9
 80015f6:	4013      	ands	r3, r2
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001602:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <HAL_GPIO_Init+0x2dc>)
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001608:	4b2b      	ldr	r3, [pc, #172]	; (80016b8 <HAL_GPIO_Init+0x2dc>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	43da      	mvns	r2, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	029b      	lsls	r3, r3, #10
 8001620:	4013      	ands	r3, r2
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800162c:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <HAL_GPIO_Init+0x2dc>)
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001632:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HAL_GPIO_Init+0x2dc>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	43da      	mvns	r2, r3
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	035b      	lsls	r3, r3, #13
 800164a:	4013      	ands	r3, r2
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_GPIO_Init+0x2dc>)
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800165c:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <HAL_GPIO_Init+0x2dc>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	43da      	mvns	r2, r3
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	039b      	lsls	r3, r3, #14
 8001674:	4013      	ands	r3, r2
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <HAL_GPIO_Init+0x2dc>)
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	3301      	adds	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	40da      	lsrs	r2, r3
 8001694:	1e13      	subs	r3, r2, #0
 8001696:	d000      	beq.n	800169a <HAL_GPIO_Init+0x2be>
 8001698:	e6a8      	b.n	80013ec <HAL_GPIO_Init+0x10>
  } 
}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	46c0      	nop			; (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	b006      	add	sp, #24
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010000 	.word	0x40010000
 80016ac:	48000400 	.word	0x48000400
 80016b0:	48000800 	.word	0x48000800
 80016b4:	48000c00 	.word	0x48000c00
 80016b8:	40010400 	.word	0x40010400

080016bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	0008      	movs	r0, r1
 80016c6:	0011      	movs	r1, r2
 80016c8:	1cbb      	adds	r3, r7, #2
 80016ca:	1c02      	adds	r2, r0, #0
 80016cc:	801a      	strh	r2, [r3, #0]
 80016ce:	1c7b      	adds	r3, r7, #1
 80016d0:	1c0a      	adds	r2, r1, #0
 80016d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016d4:	1c7b      	adds	r3, r7, #1
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d004      	beq.n	80016e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016dc:	1cbb      	adds	r3, r7, #2
 80016de:	881a      	ldrh	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016e4:	e003      	b.n	80016ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016e6:	1cbb      	adds	r3, r7, #2
 80016e8:	881a      	ldrh	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b002      	add	sp, #8
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	000a      	movs	r2, r1
 8001700:	1cbb      	adds	r3, r7, #2
 8001702:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800170a:	1cbb      	adds	r3, r7, #2
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4013      	ands	r3, r2
 8001712:	041a      	lsls	r2, r3, #16
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	43db      	mvns	r3, r3
 8001718:	1cb9      	adds	r1, r7, #2
 800171a:	8809      	ldrh	r1, [r1, #0]
 800171c:	400b      	ands	r3, r1
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	619a      	str	r2, [r3, #24]
}
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	b004      	add	sp, #16
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e301      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2201      	movs	r2, #1
 8001744:	4013      	ands	r3, r2
 8001746:	d100      	bne.n	800174a <HAL_RCC_OscConfig+0x1e>
 8001748:	e08d      	b.n	8001866 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800174a:	4bc3      	ldr	r3, [pc, #780]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	220c      	movs	r2, #12
 8001750:	4013      	ands	r3, r2
 8001752:	2b04      	cmp	r3, #4
 8001754:	d00e      	beq.n	8001774 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001756:	4bc0      	ldr	r3, [pc, #768]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	220c      	movs	r2, #12
 800175c:	4013      	ands	r3, r2
 800175e:	2b08      	cmp	r3, #8
 8001760:	d116      	bne.n	8001790 <HAL_RCC_OscConfig+0x64>
 8001762:	4bbd      	ldr	r3, [pc, #756]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	025b      	lsls	r3, r3, #9
 800176a:	401a      	ands	r2, r3
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	025b      	lsls	r3, r3, #9
 8001770:	429a      	cmp	r2, r3
 8001772:	d10d      	bne.n	8001790 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001774:	4bb8      	ldr	r3, [pc, #736]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	029b      	lsls	r3, r3, #10
 800177c:	4013      	ands	r3, r2
 800177e:	d100      	bne.n	8001782 <HAL_RCC_OscConfig+0x56>
 8001780:	e070      	b.n	8001864 <HAL_RCC_OscConfig+0x138>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d000      	beq.n	800178c <HAL_RCC_OscConfig+0x60>
 800178a:	e06b      	b.n	8001864 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e2d8      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d107      	bne.n	80017a8 <HAL_RCC_OscConfig+0x7c>
 8001798:	4baf      	ldr	r3, [pc, #700]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4bae      	ldr	r3, [pc, #696]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800179e:	2180      	movs	r1, #128	; 0x80
 80017a0:	0249      	lsls	r1, r1, #9
 80017a2:	430a      	orrs	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e02f      	b.n	8001808 <HAL_RCC_OscConfig+0xdc>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10c      	bne.n	80017ca <HAL_RCC_OscConfig+0x9e>
 80017b0:	4ba9      	ldr	r3, [pc, #676]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4ba8      	ldr	r3, [pc, #672]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017b6:	49a9      	ldr	r1, [pc, #676]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80017b8:	400a      	ands	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	4ba6      	ldr	r3, [pc, #664]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4ba5      	ldr	r3, [pc, #660]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017c2:	49a7      	ldr	r1, [pc, #668]	; (8001a60 <HAL_RCC_OscConfig+0x334>)
 80017c4:	400a      	ands	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	e01e      	b.n	8001808 <HAL_RCC_OscConfig+0xdc>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b05      	cmp	r3, #5
 80017d0:	d10e      	bne.n	80017f0 <HAL_RCC_OscConfig+0xc4>
 80017d2:	4ba1      	ldr	r3, [pc, #644]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4ba0      	ldr	r3, [pc, #640]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017d8:	2180      	movs	r1, #128	; 0x80
 80017da:	02c9      	lsls	r1, r1, #11
 80017dc:	430a      	orrs	r2, r1
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	4b9d      	ldr	r3, [pc, #628]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b9c      	ldr	r3, [pc, #624]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	0249      	lsls	r1, r1, #9
 80017ea:	430a      	orrs	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	e00b      	b.n	8001808 <HAL_RCC_OscConfig+0xdc>
 80017f0:	4b99      	ldr	r3, [pc, #612]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b98      	ldr	r3, [pc, #608]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017f6:	4999      	ldr	r1, [pc, #612]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80017f8:	400a      	ands	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	4b96      	ldr	r3, [pc, #600]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b95      	ldr	r3, [pc, #596]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001802:	4997      	ldr	r1, [pc, #604]	; (8001a60 <HAL_RCC_OscConfig+0x334>)
 8001804:	400a      	ands	r2, r1
 8001806:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d014      	beq.n	800183a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff fd02 	bl	8001218 <HAL_GetTick>
 8001814:	0003      	movs	r3, r0
 8001816:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800181a:	f7ff fcfd 	bl	8001218 <HAL_GetTick>
 800181e:	0002      	movs	r2, r0
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b64      	cmp	r3, #100	; 0x64
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e28a      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182c:	4b8a      	ldr	r3, [pc, #552]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	029b      	lsls	r3, r3, #10
 8001834:	4013      	ands	r3, r2
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0xee>
 8001838:	e015      	b.n	8001866 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff fced 	bl	8001218 <HAL_GetTick>
 800183e:	0003      	movs	r3, r0
 8001840:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001844:	f7ff fce8 	bl	8001218 <HAL_GetTick>
 8001848:	0002      	movs	r2, r0
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b64      	cmp	r3, #100	; 0x64
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e275      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001856:	4b80      	ldr	r3, [pc, #512]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	029b      	lsls	r3, r3, #10
 800185e:	4013      	ands	r3, r2
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x118>
 8001862:	e000      	b.n	8001866 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001864:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2202      	movs	r2, #2
 800186c:	4013      	ands	r3, r2
 800186e:	d100      	bne.n	8001872 <HAL_RCC_OscConfig+0x146>
 8001870:	e069      	b.n	8001946 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001872:	4b79      	ldr	r3, [pc, #484]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	220c      	movs	r2, #12
 8001878:	4013      	ands	r3, r2
 800187a:	d00b      	beq.n	8001894 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800187c:	4b76      	ldr	r3, [pc, #472]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	220c      	movs	r2, #12
 8001882:	4013      	ands	r3, r2
 8001884:	2b08      	cmp	r3, #8
 8001886:	d11c      	bne.n	80018c2 <HAL_RCC_OscConfig+0x196>
 8001888:	4b73      	ldr	r3, [pc, #460]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	025b      	lsls	r3, r3, #9
 8001890:	4013      	ands	r3, r2
 8001892:	d116      	bne.n	80018c2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001894:	4b70      	ldr	r3, [pc, #448]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2202      	movs	r2, #2
 800189a:	4013      	ands	r3, r2
 800189c:	d005      	beq.n	80018aa <HAL_RCC_OscConfig+0x17e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e24b      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018aa:	4b6b      	ldr	r3, [pc, #428]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	22f8      	movs	r2, #248	; 0xf8
 80018b0:	4393      	bics	r3, r2
 80018b2:	0019      	movs	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	00da      	lsls	r2, r3, #3
 80018ba:	4b67      	ldr	r3, [pc, #412]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c0:	e041      	b.n	8001946 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d024      	beq.n	8001914 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ca:	4b63      	ldr	r3, [pc, #396]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4b62      	ldr	r3, [pc, #392]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80018d0:	2101      	movs	r1, #1
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff fc9f 	bl	8001218 <HAL_GetTick>
 80018da:	0003      	movs	r3, r0
 80018dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e0:	f7ff fc9a 	bl	8001218 <HAL_GetTick>
 80018e4:	0002      	movs	r2, r0
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e227      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f2:	4b59      	ldr	r3, [pc, #356]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2202      	movs	r2, #2
 80018f8:	4013      	ands	r3, r2
 80018fa:	d0f1      	beq.n	80018e0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fc:	4b56      	ldr	r3, [pc, #344]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	22f8      	movs	r2, #248	; 0xf8
 8001902:	4393      	bics	r3, r2
 8001904:	0019      	movs	r1, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00da      	lsls	r2, r3, #3
 800190c:	4b52      	ldr	r3, [pc, #328]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800190e:	430a      	orrs	r2, r1
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	e018      	b.n	8001946 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001914:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b4f      	ldr	r3, [pc, #316]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800191a:	2101      	movs	r1, #1
 800191c:	438a      	bics	r2, r1
 800191e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fc7a 	bl	8001218 <HAL_GetTick>
 8001924:	0003      	movs	r3, r0
 8001926:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800192a:	f7ff fc75 	bl	8001218 <HAL_GetTick>
 800192e:	0002      	movs	r2, r0
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e202      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193c:	4b46      	ldr	r3, [pc, #280]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2202      	movs	r2, #2
 8001942:	4013      	ands	r3, r2
 8001944:	d1f1      	bne.n	800192a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2208      	movs	r2, #8
 800194c:	4013      	ands	r3, r2
 800194e:	d036      	beq.n	80019be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d019      	beq.n	800198c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001958:	4b3f      	ldr	r3, [pc, #252]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800195a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800195c:	4b3e      	ldr	r3, [pc, #248]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800195e:	2101      	movs	r1, #1
 8001960:	430a      	orrs	r2, r1
 8001962:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001964:	f7ff fc58 	bl	8001218 <HAL_GetTick>
 8001968:	0003      	movs	r3, r0
 800196a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800196e:	f7ff fc53 	bl	8001218 <HAL_GetTick>
 8001972:	0002      	movs	r2, r0
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e1e0      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001980:	4b35      	ldr	r3, [pc, #212]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	2202      	movs	r2, #2
 8001986:	4013      	ands	r3, r2
 8001988:	d0f1      	beq.n	800196e <HAL_RCC_OscConfig+0x242>
 800198a:	e018      	b.n	80019be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198c:	4b32      	ldr	r3, [pc, #200]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800198e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001990:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001992:	2101      	movs	r1, #1
 8001994:	438a      	bics	r2, r1
 8001996:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001998:	f7ff fc3e 	bl	8001218 <HAL_GetTick>
 800199c:	0003      	movs	r3, r0
 800199e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a2:	f7ff fc39 	bl	8001218 <HAL_GetTick>
 80019a6:	0002      	movs	r2, r0
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e1c6      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b4:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	2202      	movs	r2, #2
 80019ba:	4013      	ands	r3, r2
 80019bc:	d1f1      	bne.n	80019a2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2204      	movs	r2, #4
 80019c4:	4013      	ands	r3, r2
 80019c6:	d100      	bne.n	80019ca <HAL_RCC_OscConfig+0x29e>
 80019c8:	e0b4      	b.n	8001b34 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ca:	201f      	movs	r0, #31
 80019cc:	183b      	adds	r3, r7, r0
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d2:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80019d4:	69da      	ldr	r2, [r3, #28]
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	055b      	lsls	r3, r3, #21
 80019da:	4013      	ands	r3, r2
 80019dc:	d110      	bne.n	8001a00 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80019e4:	2180      	movs	r1, #128	; 0x80
 80019e6:	0549      	lsls	r1, r1, #21
 80019e8:	430a      	orrs	r2, r1
 80019ea:	61da      	str	r2, [r3, #28]
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80019ee:	69da      	ldr	r2, [r3, #28]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	055b      	lsls	r3, r3, #21
 80019f4:	4013      	ands	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019fa:	183b      	adds	r3, r7, r0
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <HAL_RCC_OscConfig+0x338>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d11a      	bne.n	8001a42 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_RCC_OscConfig+0x338>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <HAL_RCC_OscConfig+0x338>)
 8001a12:	2180      	movs	r1, #128	; 0x80
 8001a14:	0049      	lsls	r1, r1, #1
 8001a16:	430a      	orrs	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1a:	f7ff fbfd 	bl	8001218 <HAL_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a24:	f7ff fbf8 	bl	8001218 <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	; 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e185      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_RCC_OscConfig+0x338>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d10e      	bne.n	8001a68 <HAL_RCC_OscConfig+0x33c>
 8001a4a:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001a4c:	6a1a      	ldr	r2, [r3, #32]
 8001a4e:	4b02      	ldr	r3, [pc, #8]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001a50:	2101      	movs	r1, #1
 8001a52:	430a      	orrs	r2, r1
 8001a54:	621a      	str	r2, [r3, #32]
 8001a56:	e035      	b.n	8001ac4 <HAL_RCC_OscConfig+0x398>
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	fffeffff 	.word	0xfffeffff
 8001a60:	fffbffff 	.word	0xfffbffff
 8001a64:	40007000 	.word	0x40007000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10c      	bne.n	8001a8a <HAL_RCC_OscConfig+0x35e>
 8001a70:	4bb6      	ldr	r3, [pc, #728]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001a72:	6a1a      	ldr	r2, [r3, #32]
 8001a74:	4bb5      	ldr	r3, [pc, #724]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001a76:	2101      	movs	r1, #1
 8001a78:	438a      	bics	r2, r1
 8001a7a:	621a      	str	r2, [r3, #32]
 8001a7c:	4bb3      	ldr	r3, [pc, #716]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001a7e:	6a1a      	ldr	r2, [r3, #32]
 8001a80:	4bb2      	ldr	r3, [pc, #712]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001a82:	2104      	movs	r1, #4
 8001a84:	438a      	bics	r2, r1
 8001a86:	621a      	str	r2, [r3, #32]
 8001a88:	e01c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x398>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b05      	cmp	r3, #5
 8001a90:	d10c      	bne.n	8001aac <HAL_RCC_OscConfig+0x380>
 8001a92:	4bae      	ldr	r3, [pc, #696]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001a94:	6a1a      	ldr	r2, [r3, #32]
 8001a96:	4bad      	ldr	r3, [pc, #692]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001a98:	2104      	movs	r1, #4
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	621a      	str	r2, [r3, #32]
 8001a9e:	4bab      	ldr	r3, [pc, #684]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001aa0:	6a1a      	ldr	r2, [r3, #32]
 8001aa2:	4baa      	ldr	r3, [pc, #680]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	621a      	str	r2, [r3, #32]
 8001aaa:	e00b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x398>
 8001aac:	4ba7      	ldr	r3, [pc, #668]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001aae:	6a1a      	ldr	r2, [r3, #32]
 8001ab0:	4ba6      	ldr	r3, [pc, #664]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	438a      	bics	r2, r1
 8001ab6:	621a      	str	r2, [r3, #32]
 8001ab8:	4ba4      	ldr	r3, [pc, #656]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001aba:	6a1a      	ldr	r2, [r3, #32]
 8001abc:	4ba3      	ldr	r3, [pc, #652]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001abe:	2104      	movs	r1, #4
 8001ac0:	438a      	bics	r2, r1
 8001ac2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d014      	beq.n	8001af6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001acc:	f7ff fba4 	bl	8001218 <HAL_GetTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad4:	e009      	b.n	8001aea <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad6:	f7ff fb9f 	bl	8001218 <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	4a9b      	ldr	r2, [pc, #620]	; (8001d50 <HAL_RCC_OscConfig+0x624>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e12b      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aea:	4b98      	ldr	r3, [pc, #608]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	2202      	movs	r2, #2
 8001af0:	4013      	ands	r3, r2
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x3aa>
 8001af4:	e013      	b.n	8001b1e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af6:	f7ff fb8f 	bl	8001218 <HAL_GetTick>
 8001afa:	0003      	movs	r3, r0
 8001afc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afe:	e009      	b.n	8001b14 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b00:	f7ff fb8a 	bl	8001218 <HAL_GetTick>
 8001b04:	0002      	movs	r2, r0
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	4a91      	ldr	r2, [pc, #580]	; (8001d50 <HAL_RCC_OscConfig+0x624>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e116      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b14:	4b8d      	ldr	r3, [pc, #564]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	2202      	movs	r2, #2
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b1e:	231f      	movs	r3, #31
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d105      	bne.n	8001b34 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b28:	4b88      	ldr	r3, [pc, #544]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001b2a:	69da      	ldr	r2, [r3, #28]
 8001b2c:	4b87      	ldr	r3, [pc, #540]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001b2e:	4989      	ldr	r1, [pc, #548]	; (8001d54 <HAL_RCC_OscConfig+0x628>)
 8001b30:	400a      	ands	r2, r1
 8001b32:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2210      	movs	r2, #16
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d063      	beq.n	8001c06 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d12a      	bne.n	8001b9c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b46:	4b81      	ldr	r3, [pc, #516]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001b48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b4a:	4b80      	ldr	r3, [pc, #512]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001b4c:	2104      	movs	r1, #4
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b52:	4b7e      	ldr	r3, [pc, #504]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b56:	4b7d      	ldr	r3, [pc, #500]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001b58:	2101      	movs	r1, #1
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5e:	f7ff fb5b 	bl	8001218 <HAL_GetTick>
 8001b62:	0003      	movs	r3, r0
 8001b64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b68:	f7ff fb56 	bl	8001218 <HAL_GetTick>
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e0e3      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b7a:	4b74      	ldr	r3, [pc, #464]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d0f1      	beq.n	8001b68 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b84:	4b71      	ldr	r3, [pc, #452]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b88:	22f8      	movs	r2, #248	; 0xf8
 8001b8a:	4393      	bics	r3, r2
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	00da      	lsls	r2, r3, #3
 8001b94:	4b6d      	ldr	r3, [pc, #436]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001b96:	430a      	orrs	r2, r1
 8001b98:	635a      	str	r2, [r3, #52]	; 0x34
 8001b9a:	e034      	b.n	8001c06 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	3305      	adds	r3, #5
 8001ba2:	d111      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ba4:	4b69      	ldr	r3, [pc, #420]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ba8:	4b68      	ldr	r3, [pc, #416]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001baa:	2104      	movs	r1, #4
 8001bac:	438a      	bics	r2, r1
 8001bae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bb0:	4b66      	ldr	r3, [pc, #408]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb4:	22f8      	movs	r2, #248	; 0xf8
 8001bb6:	4393      	bics	r3, r2
 8001bb8:	0019      	movs	r1, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	00da      	lsls	r2, r3, #3
 8001bc0:	4b62      	ldr	r3, [pc, #392]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc6:	e01e      	b.n	8001c06 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bc8:	4b60      	ldr	r3, [pc, #384]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bcc:	4b5f      	ldr	r3, [pc, #380]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001bce:	2104      	movs	r1, #4
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001bd4:	4b5d      	ldr	r3, [pc, #372]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd8:	4b5c      	ldr	r3, [pc, #368]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001bda:	2101      	movs	r1, #1
 8001bdc:	438a      	bics	r2, r1
 8001bde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be0:	f7ff fb1a 	bl	8001218 <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bea:	f7ff fb15 	bl	8001218 <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e0a2      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c00:	2202      	movs	r2, #2
 8001c02:	4013      	ands	r3, r2
 8001c04:	d1f1      	bne.n	8001bea <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d100      	bne.n	8001c10 <HAL_RCC_OscConfig+0x4e4>
 8001c0e:	e097      	b.n	8001d40 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c10:	4b4e      	ldr	r3, [pc, #312]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	220c      	movs	r2, #12
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d100      	bne.n	8001c1e <HAL_RCC_OscConfig+0x4f2>
 8001c1c:	e06b      	b.n	8001cf6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d14c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c26:	4b49      	ldr	r3, [pc, #292]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b48      	ldr	r3, [pc, #288]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001c2c:	494a      	ldr	r1, [pc, #296]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001c2e:	400a      	ands	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7ff faf1 	bl	8001218 <HAL_GetTick>
 8001c36:	0003      	movs	r3, r0
 8001c38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff faec 	bl	8001218 <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e079      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4e:	4b3f      	ldr	r3, [pc, #252]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	049b      	lsls	r3, r3, #18
 8001c56:	4013      	ands	r3, r2
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c5a:	4b3c      	ldr	r3, [pc, #240]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	220f      	movs	r2, #15
 8001c60:	4393      	bics	r3, r2
 8001c62:	0019      	movs	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c68:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c6e:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4a3a      	ldr	r2, [pc, #232]	; (8001d5c <HAL_RCC_OscConfig+0x630>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	0019      	movs	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	431a      	orrs	r2, r3
 8001c82:	4b32      	ldr	r3, [pc, #200]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001c84:	430a      	orrs	r2, r1
 8001c86:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c88:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b2f      	ldr	r3, [pc, #188]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001c8e:	2180      	movs	r1, #128	; 0x80
 8001c90:	0449      	lsls	r1, r1, #17
 8001c92:	430a      	orrs	r2, r1
 8001c94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7ff fabf 	bl	8001218 <HAL_GetTick>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7ff faba 	bl	8001218 <HAL_GetTick>
 8001ca4:	0002      	movs	r2, r0
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e047      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb2:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	049b      	lsls	r3, r3, #18
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x574>
 8001cbe:	e03f      	b.n	8001d40 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc0:	4b22      	ldr	r3, [pc, #136]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001cc6:	4924      	ldr	r1, [pc, #144]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001cc8:	400a      	ands	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff faa4 	bl	8001218 <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7ff fa9f 	bl	8001218 <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e02c      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce8:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	049b      	lsls	r3, r3, #18
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d1f0      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x5aa>
 8001cf4:	e024      	b.n	8001d40 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e01f      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001d08:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	025b      	lsls	r3, r3, #9
 8001d14:	401a      	ands	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d10e      	bne.n	8001d3c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	220f      	movs	r2, #15
 8001d22:	401a      	ands	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d107      	bne.n	8001d3c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	23f0      	movs	r3, #240	; 0xf0
 8001d30:	039b      	lsls	r3, r3, #14
 8001d32:	401a      	ands	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	0018      	movs	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b008      	add	sp, #32
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	00001388 	.word	0x00001388
 8001d54:	efffffff 	.word	0xefffffff
 8001d58:	feffffff 	.word	0xfeffffff
 8001d5c:	ffc2ffff 	.word	0xffc2ffff

08001d60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0b3      	b.n	8001edc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d74:	4b5b      	ldr	r3, [pc, #364]	; (8001ee4 <HAL_RCC_ClockConfig+0x184>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d911      	bls.n	8001da6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d82:	4b58      	ldr	r3, [pc, #352]	; (8001ee4 <HAL_RCC_ClockConfig+0x184>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2201      	movs	r2, #1
 8001d88:	4393      	bics	r3, r2
 8001d8a:	0019      	movs	r1, r3
 8001d8c:	4b55      	ldr	r3, [pc, #340]	; (8001ee4 <HAL_RCC_ClockConfig+0x184>)
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d94:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <HAL_RCC_ClockConfig+0x184>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d001      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e09a      	b.n	8001edc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2202      	movs	r2, #2
 8001dac:	4013      	ands	r3, r2
 8001dae:	d015      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2204      	movs	r2, #4
 8001db6:	4013      	ands	r3, r2
 8001db8:	d006      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001dba:	4b4b      	ldr	r3, [pc, #300]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	4b4a      	ldr	r3, [pc, #296]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001dc0:	21e0      	movs	r1, #224	; 0xe0
 8001dc2:	00c9      	lsls	r1, r1, #3
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc8:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	22f0      	movs	r2, #240	; 0xf0
 8001dce:	4393      	bics	r3, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2201      	movs	r2, #1
 8001de2:	4013      	ands	r3, r2
 8001de4:	d040      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d107      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dee:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	029b      	lsls	r3, r3, #10
 8001df6:	4013      	ands	r3, r2
 8001df8:	d114      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e06e      	b.n	8001edc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d107      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e06:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	049b      	lsls	r3, r3, #18
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d108      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e062      	b.n	8001edc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e16:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e05b      	b.n	8001edc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e24:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2203      	movs	r2, #3
 8001e2a:	4393      	bics	r3, r2
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001e34:	430a      	orrs	r2, r1
 8001e36:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e38:	f7ff f9ee 	bl	8001218 <HAL_GetTick>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e40:	e009      	b.n	8001e56 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e42:	f7ff f9e9 	bl	8001218 <HAL_GetTick>
 8001e46:	0002      	movs	r2, r0
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	4a27      	ldr	r2, [pc, #156]	; (8001eec <HAL_RCC_ClockConfig+0x18c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e042      	b.n	8001edc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e56:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	401a      	ands	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d1ec      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e68:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <HAL_RCC_ClockConfig+0x184>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4013      	ands	r3, r2
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d211      	bcs.n	8001e9a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <HAL_RCC_ClockConfig+0x184>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4393      	bics	r3, r2
 8001e7e:	0019      	movs	r1, r3
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <HAL_RCC_ClockConfig+0x184>)
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e88:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <HAL_RCC_ClockConfig+0x184>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d001      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e020      	b.n	8001edc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d009      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4a11      	ldr	r2, [pc, #68]	; (8001ef0 <HAL_RCC_ClockConfig+0x190>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	0019      	movs	r1, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001eb8:	f000 f820 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 8001ebc:	0001      	movs	r1, r0
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	091b      	lsrs	r3, r3, #4
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <HAL_RCC_ClockConfig+0x194>)
 8001eca:	5cd3      	ldrb	r3, [r2, r3]
 8001ecc:	000a      	movs	r2, r1
 8001ece:	40da      	lsrs	r2, r3
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_RCC_ClockConfig+0x198>)
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ed4:	2003      	movs	r0, #3
 8001ed6:	f7ff f959 	bl	800118c <HAL_InitTick>
  
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b004      	add	sp, #16
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40022000 	.word	0x40022000
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	00001388 	.word	0x00001388
 8001ef0:	fffff8ff 	.word	0xfffff8ff
 8001ef4:	08003844 	.word	0x08003844
 8001ef8:	20000020 	.word	0x20000020

08001efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b08f      	sub	sp, #60	; 0x3c
 8001f00:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001f02:	2314      	movs	r3, #20
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	4a2b      	ldr	r2, [pc, #172]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f08:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001f0a:	c313      	stmia	r3!, {r0, r1, r4}
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	4a29      	ldr	r2, [pc, #164]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f14:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001f16:	c313      	stmia	r3!, {r0, r1, r4}
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f20:	2300      	movs	r3, #0
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f24:	2300      	movs	r3, #0
 8001f26:	637b      	str	r3, [r7, #52]	; 0x34
 8001f28:	2300      	movs	r3, #0
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001f30:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f38:	220c      	movs	r2, #12
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d002      	beq.n	8001f46 <HAL_RCC_GetSysClockFreq+0x4a>
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d003      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0x50>
 8001f44:	e02d      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f46:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f4a:	e02d      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4e:	0c9b      	lsrs	r3, r3, #18
 8001f50:	220f      	movs	r2, #15
 8001f52:	4013      	ands	r3, r2
 8001f54:	2214      	movs	r2, #20
 8001f56:	18ba      	adds	r2, r7, r2
 8001f58:	5cd3      	ldrb	r3, [r2, r3]
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f5c:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	220f      	movs	r2, #15
 8001f62:	4013      	ands	r3, r2
 8001f64:	1d3a      	adds	r2, r7, #4
 8001f66:	5cd3      	ldrb	r3, [r2, r3]
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	025b      	lsls	r3, r3, #9
 8001f70:	4013      	ands	r3, r2
 8001f72:	d009      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f76:	4812      	ldr	r0, [pc, #72]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f78:	f7fe f8c6 	bl	8000108 <__udivsi3>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	001a      	movs	r2, r3
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	4353      	muls	r3, r2
 8001f84:	637b      	str	r3, [r7, #52]	; 0x34
 8001f86:	e009      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f8a:	000a      	movs	r2, r1
 8001f8c:	0152      	lsls	r2, r2, #5
 8001f8e:	1a52      	subs	r2, r2, r1
 8001f90:	0193      	lsls	r3, r2, #6
 8001f92:	1a9b      	subs	r3, r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	185b      	adds	r3, r3, r1
 8001f98:	021b      	lsls	r3, r3, #8
 8001f9a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fa0:	e002      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fa4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fa6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001faa:	0018      	movs	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	b00f      	add	sp, #60	; 0x3c
 8001fb0:	bd90      	pop	{r4, r7, pc}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	0800380c 	.word	0x0800380c
 8001fb8:	0800381c 	.word	0x0800381c
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	007a1200 	.word	0x007a1200

08001fc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc8:	4b02      	ldr	r3, [pc, #8]	; (8001fd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fca:	681b      	ldr	r3, [r3, #0]
}
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	20000020 	.word	0x20000020

08001fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001fdc:	f7ff fff2 	bl	8001fc4 <HAL_RCC_GetHCLKFreq>
 8001fe0:	0001      	movs	r1, r0
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	0a1b      	lsrs	r3, r3, #8
 8001fe8:	2207      	movs	r2, #7
 8001fea:	4013      	ands	r3, r2
 8001fec:	4a04      	ldr	r2, [pc, #16]	; (8002000 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fee:	5cd3      	ldrb	r3, [r2, r3]
 8001ff0:	40d9      	lsrs	r1, r3
 8001ff2:	000b      	movs	r3, r1
}    
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	40021000 	.word	0x40021000
 8002000:	08003854 	.word	0x08003854

08002004 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	025b      	lsls	r3, r3, #9
 800201c:	4013      	ands	r3, r2
 800201e:	d100      	bne.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002020:	e08e      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002022:	2017      	movs	r0, #23
 8002024:	183b      	adds	r3, r7, r0
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202a:	4b57      	ldr	r3, [pc, #348]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800202c:	69da      	ldr	r2, [r3, #28]
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	055b      	lsls	r3, r3, #21
 8002032:	4013      	ands	r3, r2
 8002034:	d110      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	4b54      	ldr	r3, [pc, #336]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002038:	69da      	ldr	r2, [r3, #28]
 800203a:	4b53      	ldr	r3, [pc, #332]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	0549      	lsls	r1, r1, #21
 8002040:	430a      	orrs	r2, r1
 8002042:	61da      	str	r2, [r3, #28]
 8002044:	4b50      	ldr	r3, [pc, #320]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002046:	69da      	ldr	r2, [r3, #28]
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	055b      	lsls	r3, r3, #21
 800204c:	4013      	ands	r3, r2
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002052:	183b      	adds	r3, r7, r0
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002058:	4b4c      	ldr	r3, [pc, #304]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4013      	ands	r3, r2
 8002062:	d11a      	bne.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002064:	4b49      	ldr	r3, [pc, #292]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b48      	ldr	r3, [pc, #288]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800206a:	2180      	movs	r1, #128	; 0x80
 800206c:	0049      	lsls	r1, r1, #1
 800206e:	430a      	orrs	r2, r1
 8002070:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002072:	f7ff f8d1 	bl	8001218 <HAL_GetTick>
 8002076:	0003      	movs	r3, r0
 8002078:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207a:	e008      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207c:	f7ff f8cc 	bl	8001218 <HAL_GetTick>
 8002080:	0002      	movs	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e077      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208e:	4b3f      	ldr	r3, [pc, #252]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4013      	ands	r3, r2
 8002098:	d0f0      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800209a:	4b3b      	ldr	r3, [pc, #236]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800209c:	6a1a      	ldr	r2, [r3, #32]
 800209e:	23c0      	movs	r3, #192	; 0xc0
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d034      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	23c0      	movs	r3, #192	; 0xc0
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4013      	ands	r3, r2
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d02c      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020bc:	4b32      	ldr	r3, [pc, #200]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4a33      	ldr	r2, [pc, #204]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020c6:	4b30      	ldr	r3, [pc, #192]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020c8:	6a1a      	ldr	r2, [r3, #32]
 80020ca:	4b2f      	ldr	r3, [pc, #188]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020cc:	2180      	movs	r1, #128	; 0x80
 80020ce:	0249      	lsls	r1, r1, #9
 80020d0:	430a      	orrs	r2, r1
 80020d2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020d4:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020d6:	6a1a      	ldr	r2, [r3, #32]
 80020d8:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020da:	492e      	ldr	r1, [pc, #184]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80020dc:	400a      	ands	r2, r1
 80020de:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020e0:	4b29      	ldr	r3, [pc, #164]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2201      	movs	r2, #1
 80020ea:	4013      	ands	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ee:	f7ff f893 	bl	8001218 <HAL_GetTick>
 80020f2:	0003      	movs	r3, r0
 80020f4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f6:	e009      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f8:	f7ff f88e 	bl	8001218 <HAL_GetTick>
 80020fc:	0002      	movs	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	4a25      	ldr	r2, [pc, #148]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d901      	bls.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e038      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210c:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	2202      	movs	r2, #2
 8002112:	4013      	ands	r3, r2
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002116:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4a1d      	ldr	r2, [pc, #116]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800211c:	4013      	ands	r3, r2
 800211e:	0019      	movs	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	4b18      	ldr	r3, [pc, #96]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002126:	430a      	orrs	r2, r1
 8002128:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800212a:	2317      	movs	r3, #23
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d105      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002136:	69da      	ldr	r2, [r3, #28]
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800213a:	4918      	ldr	r1, [pc, #96]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800213c:	400a      	ands	r2, r1
 800213e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2201      	movs	r2, #1
 8002146:	4013      	ands	r3, r2
 8002148:	d009      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	2203      	movs	r2, #3
 8002150:	4393      	bics	r3, r2
 8002152:	0019      	movs	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800215a:	430a      	orrs	r2, r1
 800215c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2220      	movs	r2, #32
 8002164:	4013      	ands	r3, r2
 8002166:	d009      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	2210      	movs	r2, #16
 800216e:	4393      	bics	r3, r2
 8002170:	0019      	movs	r1, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002178:	430a      	orrs	r2, r1
 800217a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	0018      	movs	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	b006      	add	sp, #24
 8002184:	bd80      	pop	{r7, pc}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	40021000 	.word	0x40021000
 800218c:	40007000 	.word	0x40007000
 8002190:	fffffcff 	.word	0xfffffcff
 8002194:	fffeffff 	.word	0xfffeffff
 8002198:	00001388 	.word	0x00001388
 800219c:	efffffff 	.word	0xefffffff

080021a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e0a8      	b.n	8002304 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d109      	bne.n	80021ce <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	2382      	movs	r3, #130	; 0x82
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d009      	beq.n	80021da <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	61da      	str	r2, [r3, #28]
 80021cc:	e005      	b.n	80021da <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	225d      	movs	r2, #93	; 0x5d
 80021e4:	5c9b      	ldrb	r3, [r3, r2]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d107      	bne.n	80021fc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	225c      	movs	r2, #92	; 0x5c
 80021f0:	2100      	movs	r1, #0
 80021f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	0018      	movs	r0, r3
 80021f8:	f7fe fed2 	bl	8000fa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	225d      	movs	r2, #93	; 0x5d
 8002200:	2102      	movs	r1, #2
 8002202:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2140      	movs	r1, #64	; 0x40
 8002210:	438a      	bics	r2, r1
 8002212:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	23e0      	movs	r3, #224	; 0xe0
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	429a      	cmp	r2, r3
 800221e:	d902      	bls.n	8002226 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e002      	b.n	800222c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	015b      	lsls	r3, r3, #5
 800222a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	23f0      	movs	r3, #240	; 0xf0
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	429a      	cmp	r2, r3
 8002236:	d008      	beq.n	800224a <HAL_SPI_Init+0xaa>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	23e0      	movs	r3, #224	; 0xe0
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	429a      	cmp	r2, r3
 8002242:	d002      	beq.n	800224a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	2382      	movs	r3, #130	; 0x82
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	401a      	ands	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6899      	ldr	r1, [r3, #8]
 8002258:	2384      	movs	r3, #132	; 0x84
 800225a:	021b      	lsls	r3, r3, #8
 800225c:	400b      	ands	r3, r1
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	2102      	movs	r1, #2
 8002266:	400b      	ands	r3, r1
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	2101      	movs	r1, #1
 8002270:	400b      	ands	r3, r1
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6999      	ldr	r1, [r3, #24]
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	400b      	ands	r3, r1
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	2138      	movs	r1, #56	; 0x38
 8002286:	400b      	ands	r3, r1
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	2180      	movs	r1, #128	; 0x80
 8002290:	400b      	ands	r3, r1
 8002292:	431a      	orrs	r2, r3
 8002294:	0011      	movs	r1, r2
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	019b      	lsls	r3, r3, #6
 800229e:	401a      	ands	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	0c1b      	lsrs	r3, r3, #16
 80022ae:	2204      	movs	r2, #4
 80022b0:	401a      	ands	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	2110      	movs	r1, #16
 80022b8:	400b      	ands	r3, r1
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c0:	2108      	movs	r1, #8
 80022c2:	400b      	ands	r3, r1
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68d9      	ldr	r1, [r3, #12]
 80022ca:	23f0      	movs	r3, #240	; 0xf0
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	400b      	ands	r3, r1
 80022d0:	431a      	orrs	r2, r3
 80022d2:	0011      	movs	r1, r2
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	015b      	lsls	r3, r3, #5
 80022da:	401a      	ands	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	69da      	ldr	r2, [r3, #28]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4907      	ldr	r1, [pc, #28]	; (800230c <HAL_SPI_Init+0x16c>)
 80022f0:	400a      	ands	r2, r1
 80022f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	225d      	movs	r2, #93	; 0x5d
 80022fe:	2101      	movs	r1, #1
 8002300:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	0018      	movs	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	b004      	add	sp, #16
 800230a:	bd80      	pop	{r7, pc}
 800230c:	fffff7ff 	.word	0xfffff7ff

08002310 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	1dbb      	adds	r3, r7, #6
 800231e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002320:	231f      	movs	r3, #31
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	225c      	movs	r2, #92	; 0x5c
 800232c:	5c9b      	ldrb	r3, [r3, r2]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_SPI_Transmit+0x26>
 8002332:	2302      	movs	r3, #2
 8002334:	e140      	b.n	80025b8 <HAL_SPI_Transmit+0x2a8>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	225c      	movs	r2, #92	; 0x5c
 800233a:	2101      	movs	r1, #1
 800233c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800233e:	f7fe ff6b 	bl	8001218 <HAL_GetTick>
 8002342:	0003      	movs	r3, r0
 8002344:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002346:	2316      	movs	r3, #22
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	1dba      	adds	r2, r7, #6
 800234c:	8812      	ldrh	r2, [r2, #0]
 800234e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	225d      	movs	r2, #93	; 0x5d
 8002354:	5c9b      	ldrb	r3, [r3, r2]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b01      	cmp	r3, #1
 800235a:	d004      	beq.n	8002366 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800235c:	231f      	movs	r3, #31
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	2202      	movs	r2, #2
 8002362:	701a      	strb	r2, [r3, #0]
    goto error;
 8002364:	e11d      	b.n	80025a2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_SPI_Transmit+0x64>
 800236c:	1dbb      	adds	r3, r7, #6
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d104      	bne.n	800237e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002374:	231f      	movs	r3, #31
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	2201      	movs	r2, #1
 800237a:	701a      	strb	r2, [r3, #0]
    goto error;
 800237c:	e111      	b.n	80025a2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	225d      	movs	r2, #93	; 0x5d
 8002382:	2103      	movs	r1, #3
 8002384:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1dba      	adds	r2, r7, #6
 8002396:	8812      	ldrh	r2, [r2, #0]
 8002398:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1dba      	adds	r2, r7, #6
 800239e:	8812      	ldrh	r2, [r2, #0]
 80023a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2244      	movs	r2, #68	; 0x44
 80023ac:	2100      	movs	r1, #0
 80023ae:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2246      	movs	r2, #70	; 0x46
 80023b4:	2100      	movs	r1, #0
 80023b6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d110      	bne.n	80023f2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2140      	movs	r1, #64	; 0x40
 80023dc:	438a      	bics	r2, r1
 80023de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2180      	movs	r1, #128	; 0x80
 80023ec:	01c9      	lsls	r1, r1, #7
 80023ee:	430a      	orrs	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2240      	movs	r2, #64	; 0x40
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b40      	cmp	r3, #64	; 0x40
 80023fe:	d007      	beq.n	8002410 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2140      	movs	r1, #64	; 0x40
 800240c:	430a      	orrs	r2, r1
 800240e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	23e0      	movs	r3, #224	; 0xe0
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	429a      	cmp	r2, r3
 800241a:	d94e      	bls.n	80024ba <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d004      	beq.n	800242e <HAL_SPI_Transmit+0x11e>
 8002424:	2316      	movs	r3, #22
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d13f      	bne.n	80024ae <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	881a      	ldrh	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	1c9a      	adds	r2, r3, #2
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002448:	b29b      	uxth	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002452:	e02c      	b.n	80024ae <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2202      	movs	r2, #2
 800245c:	4013      	ands	r3, r2
 800245e:	2b02      	cmp	r3, #2
 8002460:	d112      	bne.n	8002488 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	881a      	ldrh	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002472:	1c9a      	adds	r2, r3, #2
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002486:	e012      	b.n	80024ae <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002488:	f7fe fec6 	bl	8001218 <HAL_GetTick>
 800248c:	0002      	movs	r2, r0
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d802      	bhi.n	800249e <HAL_SPI_Transmit+0x18e>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	3301      	adds	r3, #1
 800249c:	d102      	bne.n	80024a4 <HAL_SPI_Transmit+0x194>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d104      	bne.n	80024ae <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80024a4:	231f      	movs	r3, #31
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	2203      	movs	r2, #3
 80024aa:	701a      	strb	r2, [r3, #0]
          goto error;
 80024ac:	e079      	b.n	80025a2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1cd      	bne.n	8002454 <HAL_SPI_Transmit+0x144>
 80024b8:	e04f      	b.n	800255a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d004      	beq.n	80024cc <HAL_SPI_Transmit+0x1bc>
 80024c2:	2316      	movs	r3, #22
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d141      	bne.n	8002550 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	330c      	adds	r3, #12
 80024d6:	7812      	ldrb	r2, [r2, #0]
 80024d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80024f2:	e02d      	b.n	8002550 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2202      	movs	r2, #2
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d113      	bne.n	800252a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	330c      	adds	r3, #12
 800250c:	7812      	ldrb	r2, [r2, #0]
 800250e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002528:	e012      	b.n	8002550 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800252a:	f7fe fe75 	bl	8001218 <HAL_GetTick>
 800252e:	0002      	movs	r2, r0
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d802      	bhi.n	8002540 <HAL_SPI_Transmit+0x230>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	3301      	adds	r3, #1
 800253e:	d102      	bne.n	8002546 <HAL_SPI_Transmit+0x236>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d104      	bne.n	8002550 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8002546:	231f      	movs	r3, #31
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	2203      	movs	r2, #3
 800254c:	701a      	strb	r2, [r3, #0]
          goto error;
 800254e:	e028      	b.n	80025a2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1cc      	bne.n	80024f4 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	6839      	ldr	r1, [r7, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	0018      	movs	r0, r3
 8002562:	f000 fce5 	bl	8002f30 <SPI_EndRxTxTransaction>
 8002566:	1e03      	subs	r3, r0, #0
 8002568:	d002      	beq.n	8002570 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2220      	movs	r2, #32
 800256e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002592:	2b00      	cmp	r3, #0
 8002594:	d004      	beq.n	80025a0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8002596:	231f      	movs	r3, #31
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]
 800259e:	e000      	b.n	80025a2 <HAL_SPI_Transmit+0x292>
  }

error:
 80025a0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	225d      	movs	r2, #93	; 0x5d
 80025a6:	2101      	movs	r1, #1
 80025a8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	225c      	movs	r2, #92	; 0x5c
 80025ae:	2100      	movs	r1, #0
 80025b0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80025b2:	231f      	movs	r3, #31
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	781b      	ldrb	r3, [r3, #0]
}
 80025b8:	0018      	movs	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b008      	add	sp, #32
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b089      	sub	sp, #36	; 0x24
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	1dbb      	adds	r3, r7, #6
 80025ce:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025d0:	2317      	movs	r3, #23
 80025d2:	18fb      	adds	r3, r7, r3
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	2382      	movs	r3, #130	; 0x82
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d113      	bne.n	800260c <HAL_SPI_Receive+0x4c>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10f      	bne.n	800260c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	225d      	movs	r2, #93	; 0x5d
 80025f0:	2104      	movs	r1, #4
 80025f2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025f4:	1dbb      	adds	r3, r7, #6
 80025f6:	881c      	ldrh	r4, [r3, #0]
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	68b9      	ldr	r1, [r7, #8]
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	0023      	movs	r3, r4
 8002604:	f000 f928 	bl	8002858 <HAL_SPI_TransmitReceive>
 8002608:	0003      	movs	r3, r0
 800260a:	e11c      	b.n	8002846 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	225c      	movs	r2, #92	; 0x5c
 8002610:	5c9b      	ldrb	r3, [r3, r2]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_SPI_Receive+0x5a>
 8002616:	2302      	movs	r3, #2
 8002618:	e115      	b.n	8002846 <HAL_SPI_Receive+0x286>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	225c      	movs	r2, #92	; 0x5c
 800261e:	2101      	movs	r1, #1
 8002620:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002622:	f7fe fdf9 	bl	8001218 <HAL_GetTick>
 8002626:	0003      	movs	r3, r0
 8002628:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	225d      	movs	r2, #93	; 0x5d
 800262e:	5c9b      	ldrb	r3, [r3, r2]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b01      	cmp	r3, #1
 8002634:	d004      	beq.n	8002640 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002636:	2317      	movs	r3, #23
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	2202      	movs	r2, #2
 800263c:	701a      	strb	r2, [r3, #0]
    goto error;
 800263e:	e0f7      	b.n	8002830 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_SPI_Receive+0x8e>
 8002646:	1dbb      	adds	r3, r7, #6
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d104      	bne.n	8002658 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800264e:	2317      	movs	r3, #23
 8002650:	18fb      	adds	r3, r7, r3
 8002652:	2201      	movs	r2, #1
 8002654:	701a      	strb	r2, [r3, #0]
    goto error;
 8002656:	e0eb      	b.n	8002830 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	225d      	movs	r2, #93	; 0x5d
 800265c:	2104      	movs	r1, #4
 800265e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1dba      	adds	r2, r7, #6
 8002670:	2144      	movs	r1, #68	; 0x44
 8002672:	8812      	ldrh	r2, [r2, #0]
 8002674:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1dba      	adds	r2, r7, #6
 800267a:	2146      	movs	r1, #70	; 0x46
 800267c:	8812      	ldrh	r2, [r2, #0]
 800267e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	23e0      	movs	r3, #224	; 0xe0
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d908      	bls.n	80026bc <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4966      	ldr	r1, [pc, #408]	; (8002850 <HAL_SPI_Receive+0x290>)
 80026b6:	400a      	ands	r2, r1
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	e008      	b.n	80026ce <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2180      	movs	r1, #128	; 0x80
 80026c8:	0149      	lsls	r1, r1, #5
 80026ca:	430a      	orrs	r2, r1
 80026cc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	021b      	lsls	r3, r3, #8
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d10f      	bne.n	80026fa <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2140      	movs	r1, #64	; 0x40
 80026e6:	438a      	bics	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4957      	ldr	r1, [pc, #348]	; (8002854 <HAL_SPI_Receive+0x294>)
 80026f6:	400a      	ands	r2, r1
 80026f8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2240      	movs	r2, #64	; 0x40
 8002702:	4013      	ands	r3, r2
 8002704:	2b40      	cmp	r3, #64	; 0x40
 8002706:	d007      	beq.n	8002718 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2140      	movs	r1, #64	; 0x40
 8002714:	430a      	orrs	r2, r1
 8002716:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	23e0      	movs	r3, #224	; 0xe0
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	429a      	cmp	r2, r3
 8002722:	d900      	bls.n	8002726 <HAL_SPI_Receive+0x166>
 8002724:	e069      	b.n	80027fa <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002726:	e031      	b.n	800278c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2201      	movs	r2, #1
 8002730:	4013      	ands	r3, r2
 8002732:	2b01      	cmp	r3, #1
 8002734:	d117      	bne.n	8002766 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	330c      	adds	r3, #12
 800273c:	001a      	movs	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	7812      	ldrb	r2, [r2, #0]
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2246      	movs	r2, #70	; 0x46
 8002756:	5a9b      	ldrh	r3, [r3, r2]
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b299      	uxth	r1, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2246      	movs	r2, #70	; 0x46
 8002762:	5299      	strh	r1, [r3, r2]
 8002764:	e012      	b.n	800278c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002766:	f7fe fd57 	bl	8001218 <HAL_GetTick>
 800276a:	0002      	movs	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d802      	bhi.n	800277c <HAL_SPI_Receive+0x1bc>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	3301      	adds	r3, #1
 800277a:	d102      	bne.n	8002782 <HAL_SPI_Receive+0x1c2>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d104      	bne.n	800278c <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8002782:	2317      	movs	r3, #23
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	2203      	movs	r2, #3
 8002788:	701a      	strb	r2, [r3, #0]
          goto error;
 800278a:	e051      	b.n	8002830 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2246      	movs	r2, #70	; 0x46
 8002790:	5a9b      	ldrh	r3, [r3, r2]
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1c7      	bne.n	8002728 <HAL_SPI_Receive+0x168>
 8002798:	e035      	b.n	8002806 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2201      	movs	r2, #1
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d115      	bne.n	80027d4 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	b292      	uxth	r2, r2
 80027b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	1c9a      	adds	r2, r3, #2
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2246      	movs	r2, #70	; 0x46
 80027c4:	5a9b      	ldrh	r3, [r3, r2]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b299      	uxth	r1, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2246      	movs	r2, #70	; 0x46
 80027d0:	5299      	strh	r1, [r3, r2]
 80027d2:	e012      	b.n	80027fa <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027d4:	f7fe fd20 	bl	8001218 <HAL_GetTick>
 80027d8:	0002      	movs	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d802      	bhi.n	80027ea <HAL_SPI_Receive+0x22a>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	3301      	adds	r3, #1
 80027e8:	d102      	bne.n	80027f0 <HAL_SPI_Receive+0x230>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d104      	bne.n	80027fa <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80027f0:	2317      	movs	r3, #23
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	2203      	movs	r2, #3
 80027f6:	701a      	strb	r2, [r3, #0]
          goto error;
 80027f8:	e01a      	b.n	8002830 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2246      	movs	r2, #70	; 0x46
 80027fe:	5a9b      	ldrh	r3, [r3, r2]
 8002800:	b29b      	uxth	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1c9      	bne.n	800279a <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	6839      	ldr	r1, [r7, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	0018      	movs	r0, r3
 800280e:	f000 fb31 	bl	8002e74 <SPI_EndRxTransaction>
 8002812:	1e03      	subs	r3, r0, #0
 8002814:	d002      	beq.n	800281c <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2220      	movs	r2, #32
 800281a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002820:	2b00      	cmp	r3, #0
 8002822:	d004      	beq.n	800282e <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8002824:	2317      	movs	r3, #23
 8002826:	18fb      	adds	r3, r7, r3
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
 800282c:	e000      	b.n	8002830 <HAL_SPI_Receive+0x270>
  }

error :
 800282e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	225d      	movs	r2, #93	; 0x5d
 8002834:	2101      	movs	r1, #1
 8002836:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	225c      	movs	r2, #92	; 0x5c
 800283c:	2100      	movs	r1, #0
 800283e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002840:	2317      	movs	r3, #23
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	781b      	ldrb	r3, [r3, #0]
}
 8002846:	0018      	movs	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	b007      	add	sp, #28
 800284c:	bd90      	pop	{r4, r7, pc}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	ffffefff 	.word	0xffffefff
 8002854:	ffffbfff 	.word	0xffffbfff

08002858 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	001a      	movs	r2, r3
 8002866:	1cbb      	adds	r3, r7, #2
 8002868:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800286a:	2301      	movs	r3, #1
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800286e:	2323      	movs	r3, #35	; 0x23
 8002870:	18fb      	adds	r3, r7, r3
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	225c      	movs	r2, #92	; 0x5c
 800287a:	5c9b      	ldrb	r3, [r3, r2]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_SPI_TransmitReceive+0x2c>
 8002880:	2302      	movs	r3, #2
 8002882:	e1b5      	b.n	8002bf0 <HAL_SPI_TransmitReceive+0x398>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	225c      	movs	r2, #92	; 0x5c
 8002888:	2101      	movs	r1, #1
 800288a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800288c:	f7fe fcc4 	bl	8001218 <HAL_GetTick>
 8002890:	0003      	movs	r3, r0
 8002892:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002894:	201b      	movs	r0, #27
 8002896:	183b      	adds	r3, r7, r0
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	215d      	movs	r1, #93	; 0x5d
 800289c:	5c52      	ldrb	r2, [r2, r1]
 800289e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80028a6:	2312      	movs	r3, #18
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	1cba      	adds	r2, r7, #2
 80028ac:	8812      	ldrh	r2, [r2, #0]
 80028ae:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028b0:	183b      	adds	r3, r7, r0
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d011      	beq.n	80028dc <HAL_SPI_TransmitReceive+0x84>
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	2382      	movs	r3, #130	; 0x82
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	429a      	cmp	r2, r3
 80028c0:	d107      	bne.n	80028d2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d103      	bne.n	80028d2 <HAL_SPI_TransmitReceive+0x7a>
 80028ca:	183b      	adds	r3, r7, r0
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d004      	beq.n	80028dc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80028d2:	2323      	movs	r3, #35	; 0x23
 80028d4:	18fb      	adds	r3, r7, r3
 80028d6:	2202      	movs	r2, #2
 80028d8:	701a      	strb	r2, [r3, #0]
    goto error;
 80028da:	e17e      	b.n	8002bda <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d006      	beq.n	80028f0 <HAL_SPI_TransmitReceive+0x98>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_SPI_TransmitReceive+0x98>
 80028e8:	1cbb      	adds	r3, r7, #2
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d104      	bne.n	80028fa <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80028f0:	2323      	movs	r3, #35	; 0x23
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]
    goto error;
 80028f8:	e16f      	b.n	8002bda <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	225d      	movs	r2, #93	; 0x5d
 80028fe:	5c9b      	ldrb	r3, [r3, r2]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b04      	cmp	r3, #4
 8002904:	d003      	beq.n	800290e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	225d      	movs	r2, #93	; 0x5d
 800290a:	2105      	movs	r1, #5
 800290c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1cba      	adds	r2, r7, #2
 800291e:	2146      	movs	r1, #70	; 0x46
 8002920:	8812      	ldrh	r2, [r2, #0]
 8002922:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1cba      	adds	r2, r7, #2
 8002928:	2144      	movs	r1, #68	; 0x44
 800292a:	8812      	ldrh	r2, [r2, #0]
 800292c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	1cba      	adds	r2, r7, #2
 8002938:	8812      	ldrh	r2, [r2, #0]
 800293a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	1cba      	adds	r2, r7, #2
 8002940:	8812      	ldrh	r2, [r2, #0]
 8002942:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	23e0      	movs	r3, #224	; 0xe0
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	429a      	cmp	r2, r3
 800295a:	d908      	bls.n	800296e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	49a4      	ldr	r1, [pc, #656]	; (8002bf8 <HAL_SPI_TransmitReceive+0x3a0>)
 8002968:	400a      	ands	r2, r1
 800296a:	605a      	str	r2, [r3, #4]
 800296c:	e008      	b.n	8002980 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2180      	movs	r1, #128	; 0x80
 800297a:	0149      	lsls	r1, r1, #5
 800297c:	430a      	orrs	r2, r1
 800297e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2240      	movs	r2, #64	; 0x40
 8002988:	4013      	ands	r3, r2
 800298a:	2b40      	cmp	r3, #64	; 0x40
 800298c:	d007      	beq.n	800299e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2140      	movs	r1, #64	; 0x40
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	23e0      	movs	r3, #224	; 0xe0
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d800      	bhi.n	80029ac <HAL_SPI_TransmitReceive+0x154>
 80029aa:	e07f      	b.n	8002aac <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_SPI_TransmitReceive+0x168>
 80029b4:	2312      	movs	r3, #18
 80029b6:	18fb      	adds	r3, r7, r3
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d000      	beq.n	80029c0 <HAL_SPI_TransmitReceive+0x168>
 80029be:	e069      	b.n	8002a94 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c4:	881a      	ldrh	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d0:	1c9a      	adds	r2, r3, #2
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029e4:	e056      	b.n	8002a94 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2202      	movs	r2, #2
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d11b      	bne.n	8002a2c <HAL_SPI_TransmitReceive+0x1d4>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <HAL_SPI_TransmitReceive+0x1d4>
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d113      	bne.n	8002a2c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	881a      	ldrh	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a14:	1c9a      	adds	r2, r3, #2
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2201      	movs	r2, #1
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d11c      	bne.n	8002a74 <HAL_SPI_TransmitReceive+0x21c>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2246      	movs	r2, #70	; 0x46
 8002a3e:	5a9b      	ldrh	r3, [r3, r2]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d016      	beq.n	8002a74 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	b292      	uxth	r2, r2
 8002a52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	1c9a      	adds	r2, r3, #2
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2246      	movs	r2, #70	; 0x46
 8002a62:	5a9b      	ldrh	r3, [r3, r2]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b299      	uxth	r1, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2246      	movs	r2, #70	; 0x46
 8002a6e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a70:	2301      	movs	r3, #1
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a74:	f7fe fbd0 	bl	8001218 <HAL_GetTick>
 8002a78:	0002      	movs	r2, r0
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d807      	bhi.n	8002a94 <HAL_SPI_TransmitReceive+0x23c>
 8002a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a86:	3301      	adds	r3, #1
 8002a88:	d004      	beq.n	8002a94 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8002a8a:	2323      	movs	r3, #35	; 0x23
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	2203      	movs	r2, #3
 8002a90:	701a      	strb	r2, [r3, #0]
        goto error;
 8002a92:	e0a2      	b.n	8002bda <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1a3      	bne.n	80029e6 <HAL_SPI_TransmitReceive+0x18e>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2246      	movs	r2, #70	; 0x46
 8002aa2:	5a9b      	ldrh	r3, [r3, r2]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d19d      	bne.n	80029e6 <HAL_SPI_TransmitReceive+0x18e>
 8002aaa:	e085      	b.n	8002bb8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_SPI_TransmitReceive+0x268>
 8002ab4:	2312      	movs	r3, #18
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d000      	beq.n	8002ac0 <HAL_SPI_TransmitReceive+0x268>
 8002abe:	e070      	b.n	8002ba2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	330c      	adds	r3, #12
 8002aca:	7812      	ldrb	r2, [r2, #0]
 8002acc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ae6:	e05c      	b.n	8002ba2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2202      	movs	r2, #2
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d11c      	bne.n	8002b30 <HAL_SPI_TransmitReceive+0x2d8>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d017      	beq.n	8002b30 <HAL_SPI_TransmitReceive+0x2d8>
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d114      	bne.n	8002b30 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	330c      	adds	r3, #12
 8002b10:	7812      	ldrb	r2, [r2, #0]
 8002b12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2201      	movs	r2, #1
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d11e      	bne.n	8002b7c <HAL_SPI_TransmitReceive+0x324>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2246      	movs	r2, #70	; 0x46
 8002b42:	5a9b      	ldrh	r3, [r3, r2]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d018      	beq.n	8002b7c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	330c      	adds	r3, #12
 8002b50:	001a      	movs	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	7812      	ldrb	r2, [r2, #0]
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2246      	movs	r2, #70	; 0x46
 8002b6a:	5a9b      	ldrh	r3, [r3, r2]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b299      	uxth	r1, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2246      	movs	r2, #70	; 0x46
 8002b76:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b7c:	f7fe fb4c 	bl	8001218 <HAL_GetTick>
 8002b80:	0002      	movs	r2, r0
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d802      	bhi.n	8002b92 <HAL_SPI_TransmitReceive+0x33a>
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	3301      	adds	r3, #1
 8002b90:	d102      	bne.n	8002b98 <HAL_SPI_TransmitReceive+0x340>
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d104      	bne.n	8002ba2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002b98:	2323      	movs	r3, #35	; 0x23
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	701a      	strb	r2, [r3, #0]
        goto error;
 8002ba0:	e01b      	b.n	8002bda <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d19d      	bne.n	8002ae8 <HAL_SPI_TransmitReceive+0x290>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2246      	movs	r2, #70	; 0x46
 8002bb0:	5a9b      	ldrh	r3, [r3, r2]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d197      	bne.n	8002ae8 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f000 f9b6 	bl	8002f30 <SPI_EndRxTxTransaction>
 8002bc4:	1e03      	subs	r3, r0, #0
 8002bc6:	d007      	beq.n	8002bd8 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002bc8:	2323      	movs	r3, #35	; 0x23
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	2201      	movs	r2, #1
 8002bce:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	661a      	str	r2, [r3, #96]	; 0x60
 8002bd6:	e000      	b.n	8002bda <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002bd8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	225d      	movs	r2, #93	; 0x5d
 8002bde:	2101      	movs	r1, #1
 8002be0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	225c      	movs	r2, #92	; 0x5c
 8002be6:	2100      	movs	r1, #0
 8002be8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002bea:	2323      	movs	r3, #35	; 0x23
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	781b      	ldrb	r3, [r3, #0]
}
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b00a      	add	sp, #40	; 0x28
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	ffffefff 	.word	0xffffefff

08002bfc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	225d      	movs	r2, #93	; 0x5d
 8002c08:	5c9b      	ldrb	r3, [r3, r2]
 8002c0a:	b2db      	uxtb	r3, r3
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b002      	add	sp, #8
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	1dfb      	adds	r3, r7, #7
 8002c22:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c24:	f7fe faf8 	bl	8001218 <HAL_GetTick>
 8002c28:	0002      	movs	r2, r0
 8002c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	18d3      	adds	r3, r2, r3
 8002c32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c34:	f7fe faf0 	bl	8001218 <HAL_GetTick>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c3c:	4b3a      	ldr	r3, [pc, #232]	; (8002d28 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	015b      	lsls	r3, r3, #5
 8002c42:	0d1b      	lsrs	r3, r3, #20
 8002c44:	69fa      	ldr	r2, [r7, #28]
 8002c46:	4353      	muls	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c4a:	e058      	b.n	8002cfe <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	d055      	beq.n	8002cfe <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c52:	f7fe fae1 	bl	8001218 <HAL_GetTick>
 8002c56:	0002      	movs	r2, r0
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	69fa      	ldr	r2, [r7, #28]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d902      	bls.n	8002c68 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d142      	bne.n	8002cee <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	21e0      	movs	r1, #224	; 0xe0
 8002c74:	438a      	bics	r2, r1
 8002c76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	2382      	movs	r3, #130	; 0x82
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d113      	bne.n	8002cac <SPI_WaitFlagStateUntilTimeout+0x98>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d005      	beq.n	8002c9c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d107      	bne.n	8002cac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2140      	movs	r1, #64	; 0x40
 8002ca8:	438a      	bics	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	019b      	lsls	r3, r3, #6
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d110      	bne.n	8002cda <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	491a      	ldr	r1, [pc, #104]	; (8002d2c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002cc4:	400a      	ands	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2180      	movs	r1, #128	; 0x80
 8002cd4:	0189      	lsls	r1, r1, #6
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	225d      	movs	r2, #93	; 0x5d
 8002cde:	2101      	movs	r1, #1
 8002ce0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	225c      	movs	r2, #92	; 0x5c
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e017      	b.n	8002d1e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	4013      	ands	r3, r2
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	425a      	negs	r2, r3
 8002d0e:	4153      	adcs	r3, r2
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	001a      	movs	r2, r3
 8002d14:	1dfb      	adds	r3, r7, #7
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d197      	bne.n	8002c4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	0018      	movs	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b008      	add	sp, #32
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	20000020 	.word	0x20000020
 8002d2c:	ffffdfff 	.word	0xffffdfff

08002d30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	; 0x28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002d3e:	2317      	movs	r3, #23
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	2200      	movs	r2, #0
 8002d44:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002d46:	f7fe fa67 	bl	8001218 <HAL_GetTick>
 8002d4a:	0002      	movs	r2, r0
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	18d3      	adds	r3, r2, r3
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002d56:	f7fe fa5f 	bl	8001218 <HAL_GetTick>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	330c      	adds	r3, #12
 8002d64:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002d66:	4b41      	ldr	r3, [pc, #260]	; (8002e6c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	0013      	movs	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	189b      	adds	r3, r3, r2
 8002d70:	00da      	lsls	r2, r3, #3
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	0d1b      	lsrs	r3, r3, #20
 8002d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d78:	4353      	muls	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002d7c:	e068      	b.n	8002e50 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	23c0      	movs	r3, #192	; 0xc0
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d10a      	bne.n	8002d9e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d107      	bne.n	8002d9e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	2117      	movs	r1, #23
 8002d96:	187b      	adds	r3, r7, r1
 8002d98:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	3301      	adds	r3, #1
 8002da2:	d055      	beq.n	8002e50 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002da4:	f7fe fa38 	bl	8001218 <HAL_GetTick>
 8002da8:	0002      	movs	r2, r0
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d902      	bls.n	8002dba <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d142      	bne.n	8002e40 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	21e0      	movs	r1, #224	; 0xe0
 8002dc6:	438a      	bics	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	2382      	movs	r3, #130	; 0x82
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d113      	bne.n	8002dfe <SPI_WaitFifoStateUntilTimeout+0xce>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d005      	beq.n	8002dee <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d107      	bne.n	8002dfe <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2140      	movs	r1, #64	; 0x40
 8002dfa:	438a      	bics	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	019b      	lsls	r3, r3, #6
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d110      	bne.n	8002e2c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4916      	ldr	r1, [pc, #88]	; (8002e70 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002e16:	400a      	ands	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2180      	movs	r1, #128	; 0x80
 8002e26:	0189      	lsls	r1, r1, #6
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	225d      	movs	r2, #93	; 0x5d
 8002e30:	2101      	movs	r1, #1
 8002e32:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	225c      	movs	r2, #92	; 0x5c
 8002e38:	2100      	movs	r1, #0
 8002e3a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e010      	b.n	8002e62 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d18e      	bne.n	8002d7e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	0018      	movs	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b00a      	add	sp, #40	; 0x28
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	20000020 	.word	0x20000020
 8002e70:	ffffdfff 	.word	0xffffdfff

08002e74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	2382      	movs	r3, #130	; 0x82
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d113      	bne.n	8002eb4 <SPI_EndRxTransaction+0x40>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	2380      	movs	r3, #128	; 0x80
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d005      	beq.n	8002ea4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d107      	bne.n	8002eb4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2140      	movs	r1, #64	; 0x40
 8002eb0:	438a      	bics	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	0013      	movs	r3, r2
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2180      	movs	r1, #128	; 0x80
 8002ec2:	f7ff fea7 	bl	8002c14 <SPI_WaitFlagStateUntilTimeout>
 8002ec6:	1e03      	subs	r3, r0, #0
 8002ec8:	d007      	beq.n	8002eda <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ece:	2220      	movs	r2, #32
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e026      	b.n	8002f28 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	2382      	movs	r3, #130	; 0x82
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d11f      	bne.n	8002f26 <SPI_EndRxTransaction+0xb2>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	021b      	lsls	r3, r3, #8
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d005      	beq.n	8002efe <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d113      	bne.n	8002f26 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	23c0      	movs	r3, #192	; 0xc0
 8002f02:	00d9      	lsls	r1, r3, #3
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	0013      	movs	r3, r2
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f7ff ff0f 	bl	8002d30 <SPI_WaitFifoStateUntilTimeout>
 8002f12:	1e03      	subs	r3, r0, #0
 8002f14:	d007      	beq.n	8002f26 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e000      	b.n	8002f28 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	0018      	movs	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b004      	add	sp, #16
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	23c0      	movs	r3, #192	; 0xc0
 8002f40:	0159      	lsls	r1, r3, #5
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	0013      	movs	r3, r2
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f7ff fef0 	bl	8002d30 <SPI_WaitFifoStateUntilTimeout>
 8002f50:	1e03      	subs	r3, r0, #0
 8002f52:	d007      	beq.n	8002f64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f58:	2220      	movs	r2, #32
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e027      	b.n	8002fb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	0013      	movs	r3, r2
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2180      	movs	r1, #128	; 0x80
 8002f72:	f7ff fe4f 	bl	8002c14 <SPI_WaitFlagStateUntilTimeout>
 8002f76:	1e03      	subs	r3, r0, #0
 8002f78:	d007      	beq.n	8002f8a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7e:	2220      	movs	r2, #32
 8002f80:	431a      	orrs	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e014      	b.n	8002fb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	23c0      	movs	r3, #192	; 0xc0
 8002f8e:	00d9      	lsls	r1, r3, #3
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	0013      	movs	r3, r2
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f7ff fec9 	bl	8002d30 <SPI_WaitFifoStateUntilTimeout>
 8002f9e:	1e03      	subs	r3, r0, #0
 8002fa0:	d007      	beq.n	8002fb2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e000      	b.n	8002fb4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b004      	add	sp, #16
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e044      	b.n	8003058 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d107      	bne.n	8002fe6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2274      	movs	r2, #116	; 0x74
 8002fda:	2100      	movs	r1, #0
 8002fdc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f7fe f82b 	bl	800103c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2224      	movs	r2, #36	; 0x24
 8002fea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	438a      	bics	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	0018      	movs	r0, r3
 8003000:	f000 f8da 	bl	80031b8 <UART_SetConfig>
 8003004:	0003      	movs	r3, r0
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e024      	b.n	8003058 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	0018      	movs	r0, r3
 800301a:	f000 f9f7 	bl	800340c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	490d      	ldr	r1, [pc, #52]	; (8003060 <HAL_UART_Init+0xa4>)
 800302a:	400a      	ands	r2, r1
 800302c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2108      	movs	r1, #8
 800303a:	438a      	bics	r2, r1
 800303c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2101      	movs	r1, #1
 800304a:	430a      	orrs	r2, r1
 800304c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	0018      	movs	r0, r3
 8003052:	f000 fa8f 	bl	8003574 <UART_CheckIdleState>
 8003056:	0003      	movs	r3, r0
}
 8003058:	0018      	movs	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	b002      	add	sp, #8
 800305e:	bd80      	pop	{r7, pc}
 8003060:	fffff7ff 	.word	0xfffff7ff

08003064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	; 0x28
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	1dbb      	adds	r3, r7, #6
 8003072:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003078:	2b20      	cmp	r3, #32
 800307a:	d000      	beq.n	800307e <HAL_UART_Transmit+0x1a>
 800307c:	e096      	b.n	80031ac <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_UART_Transmit+0x28>
 8003084:	1dbb      	adds	r3, r7, #6
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e08e      	b.n	80031ae <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	015b      	lsls	r3, r3, #5
 8003098:	429a      	cmp	r2, r3
 800309a:	d109      	bne.n	80030b0 <HAL_UART_Transmit+0x4c>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d105      	bne.n	80030b0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2201      	movs	r2, #1
 80030a8:	4013      	ands	r3, r2
 80030aa:	d001      	beq.n	80030b0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e07e      	b.n	80031ae <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2274      	movs	r2, #116	; 0x74
 80030b4:	5c9b      	ldrb	r3, [r3, r2]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_UART_Transmit+0x5a>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e077      	b.n	80031ae <HAL_UART_Transmit+0x14a>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2274      	movs	r2, #116	; 0x74
 80030c2:	2101      	movs	r1, #1
 80030c4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2280      	movs	r2, #128	; 0x80
 80030ca:	2100      	movs	r1, #0
 80030cc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2221      	movs	r2, #33	; 0x21
 80030d2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030d4:	f7fe f8a0 	bl	8001218 <HAL_GetTick>
 80030d8:	0003      	movs	r3, r0
 80030da:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1dba      	adds	r2, r7, #6
 80030e0:	2150      	movs	r1, #80	; 0x50
 80030e2:	8812      	ldrh	r2, [r2, #0]
 80030e4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1dba      	adds	r2, r7, #6
 80030ea:	2152      	movs	r1, #82	; 0x52
 80030ec:	8812      	ldrh	r2, [r2, #0]
 80030ee:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	2380      	movs	r3, #128	; 0x80
 80030f6:	015b      	lsls	r3, r3, #5
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d108      	bne.n	800310e <HAL_UART_Transmit+0xaa>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d104      	bne.n	800310e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003104:	2300      	movs	r3, #0
 8003106:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	e003      	b.n	8003116 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003112:	2300      	movs	r3, #0
 8003114:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2274      	movs	r2, #116	; 0x74
 800311a:	2100      	movs	r1, #0
 800311c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800311e:	e02d      	b.n	800317c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	0013      	movs	r3, r2
 800312a:	2200      	movs	r2, #0
 800312c:	2180      	movs	r1, #128	; 0x80
 800312e:	f000 fa69 	bl	8003604 <UART_WaitOnFlagUntilTimeout>
 8003132:	1e03      	subs	r3, r0, #0
 8003134:	d001      	beq.n	800313a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e039      	b.n	80031ae <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10b      	bne.n	8003158 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	881a      	ldrh	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	05d2      	lsls	r2, r2, #23
 800314a:	0dd2      	lsrs	r2, r2, #23
 800314c:	b292      	uxth	r2, r2
 800314e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	3302      	adds	r3, #2
 8003154:	61bb      	str	r3, [r7, #24]
 8003156:	e008      	b.n	800316a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	781a      	ldrb	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	b292      	uxth	r2, r2
 8003162:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	3301      	adds	r3, #1
 8003168:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2252      	movs	r2, #82	; 0x52
 800316e:	5a9b      	ldrh	r3, [r3, r2]
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b299      	uxth	r1, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2252      	movs	r2, #82	; 0x52
 800317a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2252      	movs	r2, #82	; 0x52
 8003180:	5a9b      	ldrh	r3, [r3, r2]
 8003182:	b29b      	uxth	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1cb      	bne.n	8003120 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	0013      	movs	r3, r2
 8003192:	2200      	movs	r2, #0
 8003194:	2140      	movs	r1, #64	; 0x40
 8003196:	f000 fa35 	bl	8003604 <UART_WaitOnFlagUntilTimeout>
 800319a:	1e03      	subs	r3, r0, #0
 800319c:	d001      	beq.n	80031a2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e005      	b.n	80031ae <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	e000      	b.n	80031ae <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80031ac:	2302      	movs	r3, #2
  }
}
 80031ae:	0018      	movs	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b008      	add	sp, #32
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031c0:	231e      	movs	r3, #30
 80031c2:	18fb      	adds	r3, r7, r3
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a84      	ldr	r2, [pc, #528]	; (80033f8 <UART_SetConfig+0x240>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	0019      	movs	r1, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4a7f      	ldr	r2, [pc, #508]	; (80033fc <UART_SetConfig+0x244>)
 80031fe:	4013      	ands	r3, r2
 8003200:	0019      	movs	r1, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4a76      	ldr	r2, [pc, #472]	; (8003400 <UART_SetConfig+0x248>)
 8003226:	4013      	ands	r3, r2
 8003228:	0019      	movs	r1, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	430a      	orrs	r2, r1
 8003232:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003234:	4b73      	ldr	r3, [pc, #460]	; (8003404 <UART_SetConfig+0x24c>)
 8003236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003238:	2203      	movs	r2, #3
 800323a:	4013      	ands	r3, r2
 800323c:	2b03      	cmp	r3, #3
 800323e:	d00d      	beq.n	800325c <UART_SetConfig+0xa4>
 8003240:	d81b      	bhi.n	800327a <UART_SetConfig+0xc2>
 8003242:	2b02      	cmp	r3, #2
 8003244:	d014      	beq.n	8003270 <UART_SetConfig+0xb8>
 8003246:	d818      	bhi.n	800327a <UART_SetConfig+0xc2>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <UART_SetConfig+0x9a>
 800324c:	2b01      	cmp	r3, #1
 800324e:	d00a      	beq.n	8003266 <UART_SetConfig+0xae>
 8003250:	e013      	b.n	800327a <UART_SetConfig+0xc2>
 8003252:	231f      	movs	r3, #31
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	2200      	movs	r2, #0
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	e012      	b.n	8003282 <UART_SetConfig+0xca>
 800325c:	231f      	movs	r3, #31
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	2202      	movs	r2, #2
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	e00d      	b.n	8003282 <UART_SetConfig+0xca>
 8003266:	231f      	movs	r3, #31
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	2204      	movs	r2, #4
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	e008      	b.n	8003282 <UART_SetConfig+0xca>
 8003270:	231f      	movs	r3, #31
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	2208      	movs	r2, #8
 8003276:	701a      	strb	r2, [r3, #0]
 8003278:	e003      	b.n	8003282 <UART_SetConfig+0xca>
 800327a:	231f      	movs	r3, #31
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	2210      	movs	r2, #16
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	021b      	lsls	r3, r3, #8
 800328c:	429a      	cmp	r2, r3
 800328e:	d15d      	bne.n	800334c <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8003290:	231f      	movs	r3, #31
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b08      	cmp	r3, #8
 8003298:	d015      	beq.n	80032c6 <UART_SetConfig+0x10e>
 800329a:	dc18      	bgt.n	80032ce <UART_SetConfig+0x116>
 800329c:	2b04      	cmp	r3, #4
 800329e:	d00d      	beq.n	80032bc <UART_SetConfig+0x104>
 80032a0:	dc15      	bgt.n	80032ce <UART_SetConfig+0x116>
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <UART_SetConfig+0xf4>
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d005      	beq.n	80032b6 <UART_SetConfig+0xfe>
 80032aa:	e010      	b.n	80032ce <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ac:	f7fe fe94 	bl	8001fd8 <HAL_RCC_GetPCLK1Freq>
 80032b0:	0003      	movs	r3, r0
 80032b2:	61bb      	str	r3, [r7, #24]
        break;
 80032b4:	e012      	b.n	80032dc <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032b6:	4b54      	ldr	r3, [pc, #336]	; (8003408 <UART_SetConfig+0x250>)
 80032b8:	61bb      	str	r3, [r7, #24]
        break;
 80032ba:	e00f      	b.n	80032dc <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032bc:	f7fe fe1e 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 80032c0:	0003      	movs	r3, r0
 80032c2:	61bb      	str	r3, [r7, #24]
        break;
 80032c4:	e00a      	b.n	80032dc <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	61bb      	str	r3, [r7, #24]
        break;
 80032cc:	e006      	b.n	80032dc <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032d2:	231e      	movs	r3, #30
 80032d4:	18fb      	adds	r3, r7, r3
 80032d6:	2201      	movs	r2, #1
 80032d8:	701a      	strb	r2, [r3, #0]
        break;
 80032da:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d100      	bne.n	80032e4 <UART_SetConfig+0x12c>
 80032e2:	e07b      	b.n	80033dc <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	005a      	lsls	r2, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	085b      	lsrs	r3, r3, #1
 80032ee:	18d2      	adds	r2, r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	0019      	movs	r1, r3
 80032f6:	0010      	movs	r0, r2
 80032f8:	f7fc ff06 	bl	8000108 <__udivsi3>
 80032fc:	0003      	movs	r3, r0
 80032fe:	b29b      	uxth	r3, r3
 8003300:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b0f      	cmp	r3, #15
 8003306:	d91c      	bls.n	8003342 <UART_SetConfig+0x18a>
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	025b      	lsls	r3, r3, #9
 800330e:	429a      	cmp	r2, r3
 8003310:	d217      	bcs.n	8003342 <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	b29a      	uxth	r2, r3
 8003316:	200e      	movs	r0, #14
 8003318:	183b      	adds	r3, r7, r0
 800331a:	210f      	movs	r1, #15
 800331c:	438a      	bics	r2, r1
 800331e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	085b      	lsrs	r3, r3, #1
 8003324:	b29b      	uxth	r3, r3
 8003326:	2207      	movs	r2, #7
 8003328:	4013      	ands	r3, r2
 800332a:	b299      	uxth	r1, r3
 800332c:	183b      	adds	r3, r7, r0
 800332e:	183a      	adds	r2, r7, r0
 8003330:	8812      	ldrh	r2, [r2, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	183a      	adds	r2, r7, r0
 800333c:	8812      	ldrh	r2, [r2, #0]
 800333e:	60da      	str	r2, [r3, #12]
 8003340:	e04c      	b.n	80033dc <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8003342:	231e      	movs	r3, #30
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]
 800334a:	e047      	b.n	80033dc <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 800334c:	231f      	movs	r3, #31
 800334e:	18fb      	adds	r3, r7, r3
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b08      	cmp	r3, #8
 8003354:	d015      	beq.n	8003382 <UART_SetConfig+0x1ca>
 8003356:	dc18      	bgt.n	800338a <UART_SetConfig+0x1d2>
 8003358:	2b04      	cmp	r3, #4
 800335a:	d00d      	beq.n	8003378 <UART_SetConfig+0x1c0>
 800335c:	dc15      	bgt.n	800338a <UART_SetConfig+0x1d2>
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <UART_SetConfig+0x1b0>
 8003362:	2b02      	cmp	r3, #2
 8003364:	d005      	beq.n	8003372 <UART_SetConfig+0x1ba>
 8003366:	e010      	b.n	800338a <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003368:	f7fe fe36 	bl	8001fd8 <HAL_RCC_GetPCLK1Freq>
 800336c:	0003      	movs	r3, r0
 800336e:	61bb      	str	r3, [r7, #24]
        break;
 8003370:	e012      	b.n	8003398 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003372:	4b25      	ldr	r3, [pc, #148]	; (8003408 <UART_SetConfig+0x250>)
 8003374:	61bb      	str	r3, [r7, #24]
        break;
 8003376:	e00f      	b.n	8003398 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003378:	f7fe fdc0 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 800337c:	0003      	movs	r3, r0
 800337e:	61bb      	str	r3, [r7, #24]
        break;
 8003380:	e00a      	b.n	8003398 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	021b      	lsls	r3, r3, #8
 8003386:	61bb      	str	r3, [r7, #24]
        break;
 8003388:	e006      	b.n	8003398 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800338e:	231e      	movs	r3, #30
 8003390:	18fb      	adds	r3, r7, r3
 8003392:	2201      	movs	r2, #1
 8003394:	701a      	strb	r2, [r3, #0]
        break;
 8003396:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d01e      	beq.n	80033dc <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	085a      	lsrs	r2, r3, #1
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	18d2      	adds	r2, r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	0019      	movs	r1, r3
 80033ae:	0010      	movs	r0, r2
 80033b0:	f7fc feaa 	bl	8000108 <__udivsi3>
 80033b4:	0003      	movs	r3, r0
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	2b0f      	cmp	r3, #15
 80033be:	d909      	bls.n	80033d4 <UART_SetConfig+0x21c>
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	2380      	movs	r3, #128	; 0x80
 80033c4:	025b      	lsls	r3, r3, #9
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d204      	bcs.n	80033d4 <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	e003      	b.n	80033dc <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 80033d4:	231e      	movs	r3, #30
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	2201      	movs	r2, #1
 80033da:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80033e8:	231e      	movs	r3, #30
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	781b      	ldrb	r3, [r3, #0]
}
 80033ee:	0018      	movs	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b008      	add	sp, #32
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	ffff69f3 	.word	0xffff69f3
 80033fc:	ffffcfff 	.word	0xffffcfff
 8003400:	fffff4ff 	.word	0xfffff4ff
 8003404:	40021000 	.word	0x40021000
 8003408:	007a1200 	.word	0x007a1200

0800340c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	2201      	movs	r2, #1
 800341a:	4013      	ands	r3, r2
 800341c:	d00b      	beq.n	8003436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4a4a      	ldr	r2, [pc, #296]	; (8003550 <UART_AdvFeatureConfig+0x144>)
 8003426:	4013      	ands	r3, r2
 8003428:	0019      	movs	r1, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	2202      	movs	r2, #2
 800343c:	4013      	ands	r3, r2
 800343e:	d00b      	beq.n	8003458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	4a43      	ldr	r2, [pc, #268]	; (8003554 <UART_AdvFeatureConfig+0x148>)
 8003448:	4013      	ands	r3, r2
 800344a:	0019      	movs	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	2204      	movs	r2, #4
 800345e:	4013      	ands	r3, r2
 8003460:	d00b      	beq.n	800347a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4a3b      	ldr	r2, [pc, #236]	; (8003558 <UART_AdvFeatureConfig+0x14c>)
 800346a:	4013      	ands	r3, r2
 800346c:	0019      	movs	r1, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	2208      	movs	r2, #8
 8003480:	4013      	ands	r3, r2
 8003482:	d00b      	beq.n	800349c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4a34      	ldr	r2, [pc, #208]	; (800355c <UART_AdvFeatureConfig+0x150>)
 800348c:	4013      	ands	r3, r2
 800348e:	0019      	movs	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	2210      	movs	r2, #16
 80034a2:	4013      	ands	r3, r2
 80034a4:	d00b      	beq.n	80034be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	4a2c      	ldr	r2, [pc, #176]	; (8003560 <UART_AdvFeatureConfig+0x154>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	0019      	movs	r1, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	2220      	movs	r2, #32
 80034c4:	4013      	ands	r3, r2
 80034c6:	d00b      	beq.n	80034e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	4a25      	ldr	r2, [pc, #148]	; (8003564 <UART_AdvFeatureConfig+0x158>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	0019      	movs	r1, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	2240      	movs	r2, #64	; 0x40
 80034e6:	4013      	ands	r3, r2
 80034e8:	d01d      	beq.n	8003526 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	4a1d      	ldr	r2, [pc, #116]	; (8003568 <UART_AdvFeatureConfig+0x15c>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	0019      	movs	r1, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	035b      	lsls	r3, r3, #13
 800350a:	429a      	cmp	r2, r3
 800350c:	d10b      	bne.n	8003526 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	4a15      	ldr	r2, [pc, #84]	; (800356c <UART_AdvFeatureConfig+0x160>)
 8003516:	4013      	ands	r3, r2
 8003518:	0019      	movs	r1, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	2280      	movs	r2, #128	; 0x80
 800352c:	4013      	ands	r3, r2
 800352e:	d00b      	beq.n	8003548 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	4a0e      	ldr	r2, [pc, #56]	; (8003570 <UART_AdvFeatureConfig+0x164>)
 8003538:	4013      	ands	r3, r2
 800353a:	0019      	movs	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	605a      	str	r2, [r3, #4]
  }
}
 8003548:	46c0      	nop			; (mov r8, r8)
 800354a:	46bd      	mov	sp, r7
 800354c:	b002      	add	sp, #8
 800354e:	bd80      	pop	{r7, pc}
 8003550:	fffdffff 	.word	0xfffdffff
 8003554:	fffeffff 	.word	0xfffeffff
 8003558:	fffbffff 	.word	0xfffbffff
 800355c:	ffff7fff 	.word	0xffff7fff
 8003560:	ffffefff 	.word	0xffffefff
 8003564:	ffffdfff 	.word	0xffffdfff
 8003568:	ffefffff 	.word	0xffefffff
 800356c:	ff9fffff 	.word	0xff9fffff
 8003570:	fff7ffff 	.word	0xfff7ffff

08003574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af02      	add	r7, sp, #8
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2280      	movs	r2, #128	; 0x80
 8003580:	2100      	movs	r1, #0
 8003582:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003584:	f7fd fe48 	bl	8001218 <HAL_GetTick>
 8003588:	0003      	movs	r3, r0
 800358a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2208      	movs	r2, #8
 8003594:	4013      	ands	r3, r2
 8003596:	2b08      	cmp	r3, #8
 8003598:	d10c      	bne.n	80035b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2280      	movs	r2, #128	; 0x80
 800359e:	0391      	lsls	r1, r2, #14
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4a17      	ldr	r2, [pc, #92]	; (8003600 <UART_CheckIdleState+0x8c>)
 80035a4:	9200      	str	r2, [sp, #0]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f000 f82c 	bl	8003604 <UART_WaitOnFlagUntilTimeout>
 80035ac:	1e03      	subs	r3, r0, #0
 80035ae:	d001      	beq.n	80035b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e021      	b.n	80035f8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2204      	movs	r2, #4
 80035bc:	4013      	ands	r3, r2
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d10c      	bne.n	80035dc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2280      	movs	r2, #128	; 0x80
 80035c6:	03d1      	lsls	r1, r2, #15
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4a0d      	ldr	r2, [pc, #52]	; (8003600 <UART_CheckIdleState+0x8c>)
 80035cc:	9200      	str	r2, [sp, #0]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f000 f818 	bl	8003604 <UART_WaitOnFlagUntilTimeout>
 80035d4:	1e03      	subs	r3, r0, #0
 80035d6:	d001      	beq.n	80035dc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e00d      	b.n	80035f8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2220      	movs	r2, #32
 80035e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2274      	movs	r2, #116	; 0x74
 80035f2:	2100      	movs	r1, #0
 80035f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	0018      	movs	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b004      	add	sp, #16
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	01ffffff 	.word	0x01ffffff

08003604 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b094      	sub	sp, #80	; 0x50
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	1dfb      	adds	r3, r7, #7
 8003612:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003614:	e0a3      	b.n	800375e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003618:	3301      	adds	r3, #1
 800361a:	d100      	bne.n	800361e <UART_WaitOnFlagUntilTimeout+0x1a>
 800361c:	e09f      	b.n	800375e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361e:	f7fd fdfb 	bl	8001218 <HAL_GetTick>
 8003622:	0002      	movs	r2, r0
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800362a:	429a      	cmp	r2, r3
 800362c:	d302      	bcc.n	8003634 <UART_WaitOnFlagUntilTimeout+0x30>
 800362e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003630:	2b00      	cmp	r3, #0
 8003632:	d13d      	bne.n	80036b0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003634:	f3ef 8310 	mrs	r3, PRIMASK
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800363c:	647b      	str	r3, [r7, #68]	; 0x44
 800363e:	2301      	movs	r3, #1
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	f383 8810 	msr	PRIMASK, r3
}
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	494c      	ldr	r1, [pc, #304]	; (8003788 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003656:	400a      	ands	r2, r1
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800365c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	f383 8810 	msr	PRIMASK, r3
}
 8003664:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003666:	f3ef 8310 	mrs	r3, PRIMASK
 800366a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800366c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366e:	643b      	str	r3, [r7, #64]	; 0x40
 8003670:	2301      	movs	r3, #1
 8003672:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003676:	f383 8810 	msr	PRIMASK, r3
}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2101      	movs	r1, #1
 8003688:	438a      	bics	r2, r1
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800368e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003692:	f383 8810 	msr	PRIMASK, r3
}
 8003696:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2220      	movs	r2, #32
 80036a2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2274      	movs	r2, #116	; 0x74
 80036a8:	2100      	movs	r1, #0
 80036aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e067      	b.n	8003780 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2204      	movs	r2, #4
 80036b8:	4013      	ands	r3, r2
 80036ba:	d050      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	69da      	ldr	r2, [r3, #28]
 80036c2:	2380      	movs	r3, #128	; 0x80
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	401a      	ands	r2, r3
 80036c8:	2380      	movs	r3, #128	; 0x80
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d146      	bne.n	800375e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2280      	movs	r2, #128	; 0x80
 80036d6:	0112      	lsls	r2, r2, #4
 80036d8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036da:	f3ef 8310 	mrs	r3, PRIMASK
 80036de:	613b      	str	r3, [r7, #16]
  return(result);
 80036e0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036e4:	2301      	movs	r3, #1
 80036e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f383 8810 	msr	PRIMASK, r3
}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4923      	ldr	r1, [pc, #140]	; (8003788 <UART_WaitOnFlagUntilTimeout+0x184>)
 80036fc:	400a      	ands	r2, r1
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003702:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f383 8810 	msr	PRIMASK, r3
}
 800370a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800370c:	f3ef 8310 	mrs	r3, PRIMASK
 8003710:	61fb      	str	r3, [r7, #28]
  return(result);
 8003712:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003714:	64bb      	str	r3, [r7, #72]	; 0x48
 8003716:	2301      	movs	r3, #1
 8003718:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	f383 8810 	msr	PRIMASK, r3
}
 8003720:	46c0      	nop			; (mov r8, r8)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2101      	movs	r1, #1
 800372e:	438a      	bics	r2, r1
 8003730:	609a      	str	r2, [r3, #8]
 8003732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	f383 8810 	msr	PRIMASK, r3
}
 800373c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2220      	movs	r2, #32
 8003742:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2280      	movs	r2, #128	; 0x80
 800374e:	2120      	movs	r1, #32
 8003750:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2274      	movs	r2, #116	; 0x74
 8003756:	2100      	movs	r1, #0
 8003758:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e010      	b.n	8003780 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	4013      	ands	r3, r2
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	425a      	negs	r2, r3
 800376e:	4153      	adcs	r3, r2
 8003770:	b2db      	uxtb	r3, r3
 8003772:	001a      	movs	r2, r3
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d100      	bne.n	800377e <UART_WaitOnFlagUntilTimeout+0x17a>
 800377c:	e74b      	b.n	8003616 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	0018      	movs	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	b014      	add	sp, #80	; 0x50
 8003786:	bd80      	pop	{r7, pc}
 8003788:	fffffe5f 	.word	0xfffffe5f

0800378c <__libc_init_array>:
 800378c:	b570      	push	{r4, r5, r6, lr}
 800378e:	2600      	movs	r6, #0
 8003790:	4d0c      	ldr	r5, [pc, #48]	; (80037c4 <__libc_init_array+0x38>)
 8003792:	4c0d      	ldr	r4, [pc, #52]	; (80037c8 <__libc_init_array+0x3c>)
 8003794:	1b64      	subs	r4, r4, r5
 8003796:	10a4      	asrs	r4, r4, #2
 8003798:	42a6      	cmp	r6, r4
 800379a:	d109      	bne.n	80037b0 <__libc_init_array+0x24>
 800379c:	2600      	movs	r6, #0
 800379e:	f000 f821 	bl	80037e4 <_init>
 80037a2:	4d0a      	ldr	r5, [pc, #40]	; (80037cc <__libc_init_array+0x40>)
 80037a4:	4c0a      	ldr	r4, [pc, #40]	; (80037d0 <__libc_init_array+0x44>)
 80037a6:	1b64      	subs	r4, r4, r5
 80037a8:	10a4      	asrs	r4, r4, #2
 80037aa:	42a6      	cmp	r6, r4
 80037ac:	d105      	bne.n	80037ba <__libc_init_array+0x2e>
 80037ae:	bd70      	pop	{r4, r5, r6, pc}
 80037b0:	00b3      	lsls	r3, r6, #2
 80037b2:	58eb      	ldr	r3, [r5, r3]
 80037b4:	4798      	blx	r3
 80037b6:	3601      	adds	r6, #1
 80037b8:	e7ee      	b.n	8003798 <__libc_init_array+0xc>
 80037ba:	00b3      	lsls	r3, r6, #2
 80037bc:	58eb      	ldr	r3, [r5, r3]
 80037be:	4798      	blx	r3
 80037c0:	3601      	adds	r6, #1
 80037c2:	e7f2      	b.n	80037aa <__libc_init_array+0x1e>
 80037c4:	0800385c 	.word	0x0800385c
 80037c8:	0800385c 	.word	0x0800385c
 80037cc:	0800385c 	.word	0x0800385c
 80037d0:	08003860 	.word	0x08003860

080037d4 <memset>:
 80037d4:	0003      	movs	r3, r0
 80037d6:	1882      	adds	r2, r0, r2
 80037d8:	4293      	cmp	r3, r2
 80037da:	d100      	bne.n	80037de <memset+0xa>
 80037dc:	4770      	bx	lr
 80037de:	7019      	strb	r1, [r3, #0]
 80037e0:	3301      	adds	r3, #1
 80037e2:	e7f9      	b.n	80037d8 <memset+0x4>

080037e4 <_init>:
 80037e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ea:	bc08      	pop	{r3}
 80037ec:	469e      	mov	lr, r3
 80037ee:	4770      	bx	lr

080037f0 <_fini>:
 80037f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037f6:	bc08      	pop	{r3}
 80037f8:	469e      	mov	lr, r3
 80037fa:	4770      	bx	lr
